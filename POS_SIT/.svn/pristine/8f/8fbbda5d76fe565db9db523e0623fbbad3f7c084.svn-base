package com.newgen.iforms.user;

import com.newgen.workstep.Fleet_Search;

import ISPack.CPISDocumentTxn;
import ISPack.ISUtil.JPDBRecoverDocData;
import ISPack.ISUtil.JPISException;
import ISPack.ISUtil.JPISIsIndex;

import java.io.*;
import java.math.BigDecimal;
import java.math.MathContext;
import java.math.RoundingMode;
import java.net.CookieHandler;
import java.net.CookieManager;
import java.net.CookiePolicy;
import java.net.HttpURLConnection;
import java.net.Socket;
import java.net.URL;
import java.net.UnknownHostException;
import java.sql.Timestamp;
import java.text.DecimalFormat;
//SK
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.OffsetDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Currency;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Optional;
import java.util.Properties;
import java.util.stream.Collectors;

import org.apache.log4j.Logger;

import com.newgen.iforms.custom.IFormReference;
import com.newgen.integration.GetXML;
import com.newgen.integration.SocketConnector;
import com.newgen.mvcbeans.model.wfobjects.WDGeneralData;
import com.newgen.omni.jts.cmgr.XMLParser;
import com.newgen.omni.wf.util.app.NGEjbClient;
import com.newgen.omni.wf.util.excp.NGException;
import com.newgen.util.NumberToArabic;
import com.newgen.wfdesktop.xmlapi.WFXmlList;
import com.newgen.wfdesktop.xmlapi.WFXmlResponse;

import org.json.JSONException;
import org.json.XML;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.JsonArray;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

public class StringDataHandler extends FleetCommon {
	Logger logger = Logger.getLogger(StringDataHandler.class);

	public String stringHandler(IFormReference iformObj, String control, String stringdata) {
		logger.info("inside stringHandler method @@@@@");
		String callName = "";
		String responseXML;
		boolean SetPQList_flag=false;
		// Logger.getLogger()

		if (control.equalsIgnoreCase("setRoutingLevel")) {
			logger.info("Inside stringHandler function");
			String returnValue="";
			returnValue=setRoutingLevel(iformObj, "Branch");
			returnValue=setRoutingLevel(iformObj, "Credit Officer");
			return returnValue;
		} else if (control.equalsIgnoreCase("AddToDecisionHistoryGrid")) {
			logger.info("inside Decision function choice");
			return addToDecisionHistoryGrid(iformObj, stringdata);
		} else if (control.equalsIgnoreCase("fetchTHIQAH")) {
			logger.info("Inside Fetch Thiqah button");
			callName = "GetCrInfobyCrNo";
			// responseXML = createRequestXML(iformObj, callName);
			// setResponseData(iformObj, callName, responseXML);
			return "";
		} else if (control.equalsIgnoreCase("createDisbursementWI")) {
			logger.info("inside create Disbursement WI details");
			return createDisbursementWI(iformObj, stringdata);
		} else if (control.equalsIgnoreCase("fillStatementData")) {
			logger.info("inside fill statement data");
			return fillStatementData(iformObj, stringdata);
		} else if (control.equalsIgnoreCase("fillCTFMSBData")) {
			logger.info("inside fillCTFMSBData function ");
			return fillCTFMSBData(iformObj, stringdata);
		} else if (control.equalsIgnoreCase("fillTerminalId")) {
			logger.info("inside fillTerminalId function ");
			return fillTerminalId(iformObj, stringdata);
		} else if (control.equalsIgnoreCase("fillPOSdetails")) {
			logger.info("inside fillPOSdetails function ");
			return fillPOSdetails(iformObj, stringdata);
		} else if (control.equalsIgnoreCase("SetPQList")) {
			logger.info("inside SetPQList function ");
			return SetPQList(iformObj, stringdata);
		} else if (control.equalsIgnoreCase("fillTrassetData")) {
			logger.info("inside fillTrassetData function ");
			return fillTrassetData(iformObj, stringdata);
		}else if (control.equalsIgnoreCase("fillFullRMName")) {
			logger.info("inside fillFullRMName function ");
			return fillFullRMName(iformObj, stringdata);
		} 
		else if (control.equalsIgnoreCase("fetchSIMAH")) {
			logger.info("inside fetchSIMAH function ");
			return fillSIMAHData(iformObj, stringdata);
		}else if (control.equalsIgnoreCase("fillSIMAHDataIndividual")) 
		{
			logger.info("inside fillSIMAHDataIndividual function ");
			return fillSIMAHDataIndividual(iformObj, stringdata);
		}
		
		else if (control.equalsIgnoreCase("ToConvertHijriDate")) {
			logger.info("inside ToConvertHijriDate function ");
			return ConvertHijriDate(iformObj, stringdata);
		}else if (control.equalsIgnoreCase("calculateProfitPercentage")) {
			logger.info("inside calculateProfitPercentage function ");
			return calculateProfitPercentage(iformObj, stringdata);
		}else if (control.equalsIgnoreCase("generateAmmortization")) {
			logger.info("inside generateAmmortization function ");
			return generateAmmortization(iformObj, stringdata);
		}else if (control.equalsIgnoreCase("generateAmmortizationChild")) {
			logger.info("inside generateAmmortizationChild function ");
			return generateAmmortizationChild(iformObj, stringdata);
		}else if (control.equalsIgnoreCase("fillHeaderDetails")) {
			logger.info("inside fillHeaderDetails function ");
			return fillHeaderDetails(iformObj, stringdata);
		}
		// ashutosh-start
		else if (control.equalsIgnoreCase("template_gen_btn")) {
			logger.info("111111PRINT_CLIENT_APP_FORM");
			try {
				logger.info("inside try block");
				return generateTemplate(iformObj, stringdata);
			} catch (Exception e) {

				e.getMessage();
			}
		}else if (control.equalsIgnoreCase("document_upload")) {
			logger.info("inside java control of @@@ document_upload ");
			return Documentgrid(iformObj, stringdata);
		}/*else if (control.equalsIgnoreCase("CallCommodityPurchase")) {
			logger.info("inside COMMODITY Purchase ");
			return CallCommodityPurchase(iformObj, stringdata);
		}*/
		else if (control.equalsIgnoreCase("CallContractSimulation")) {
			logger.info("inside CallContractSimulation call ");
			return CallContractSimulation(iformObj, stringdata);
		}else if (control.equalsIgnoreCase("MSBContractMngRq")) {
			logger.info("inside MSBContractMngRq call to stipulate master contract ");
			return MSBContractMngRq(iformObj, stringdata);
		}else if (control.equalsIgnoreCase("MSBContractMngRqChild")) {
			logger.info("inside MSBContractMngRqChild call to stipulate master contract for child ");
			return MSBContractMngRqChild(iformObj, stringdata);
		}
		
		else if (control.equalsIgnoreCase("CallRepaymntAccCreation")) {
			logger.info("inside COMMODITY Purchase");
			return CallRepaymntAccCreation(iformObj, stringdata);
		}else if (control.equalsIgnoreCase("relatedpartyfetchCIC")) {
			logger.info("inside relatedpartyfetchCIC function");
			return relatedpartyfetchCIC(iformObj, stringdata);
		}else if (control.equalsIgnoreCase("fillMoveAccGrid")) {
			logger.info("inside fillMoveAccGrid function ");
			return fillMoveAccGrid(iformObj, stringdata);
		}/*else if (control.equalsIgnoreCase("AdvanceListViewTest")) {
			logger.info("inside AdvanceListViewTest");
			return AdvanceListViewTest(iformObj, stringdata);
		}else if (control.equalsIgnoreCase("AdvanceListViewTest_2")) {
			logger.info("inside AdvanceListViewTest");
			return AdvanceListViewTest_2(iformObj, stringdata);
		}*/
		else if (control.equalsIgnoreCase("CallMSBLimitMng")) {
			logger.info("inside Application Data ");
			return CallMSBLimitMng(iformObj, stringdata);
		}else if (control.equalsIgnoreCase("test3check")) {
			logger.info("inside test3check function ");
			return test3check(iformObj, stringdata);
		}
		else if (control.equalsIgnoreCase("fetchBankAccount")) {
			logger.info("inside fetchBankAccount function ");
			return fetchBankAccount(iformObj, stringdata);
		}
		else if (control.equalsIgnoreCase("retrurnMax_and_Min_rate")) 
		{
			logger.info("inside retrurnMax_and_Min_rate function ");
			return return_max_min_rate(iformObj, stringdata); 
		}
		else if (control.equalsIgnoreCase("return_max_min_FEE_amount")) 
		{
			logger.info("inside return_max_min_FEE_amount function ");
			return return_max_min_FEE_amount(iformObj, stringdata); 
		}
		else if (control.equalsIgnoreCase("retrurnMax_and_Min_FEE_rate")) {
			logger.info("inside retrurnMax_and_Min_FEE_rate function ");
			return return_max_min_FEE_rate(iformObj, stringdata);
		}else if (control.equalsIgnoreCase("calculateFixedFeeAmount")) {
			logger.info("inside retrurnMax_and_Min_FEE_rate function ");
			return calculateFixedFeeAmount(iformObj, stringdata);
		}
		
		else if (control.equalsIgnoreCase("CallShortCICMng")) {
			logger.info("inside CallShortCICMng call ");
			return CallShortCICMng(iformObj, stringdata);
		}else if (control.equalsIgnoreCase("fillNoOfExceptionAndAlerts")) {
			logger.info("inside fillNoOfExceptionAndAlerts function ");
			return fillNoOfExceptionAndAlerts(iformObj, stringdata);
		}else if (control.equalsIgnoreCase("calculateLosAppNum")) {
			logger.info("inside calculateLosAppNum function ");
			return calculateLosAppNum(iformObj, stringdata);
		}else if (control.equalsIgnoreCase("fillArabicAmountFields")) {
			logger.info("inside fillArabicAmountFields function ");
			return fillArabicAmountFields(iformObj, stringdata);
		}
		else if (control.equalsIgnoreCase("isarabic")) {
			logger.info("inside isarabic function ");
			return isarabic(iformObj, stringdata);
		}else if (control.equalsIgnoreCase("retrurnMax_and_Min_Amount")) {
			logger.info("inside retrurnMax_and_Min function ");
			return return_max_min_amount(iformObj, stringdata);
		}else if (control.equalsIgnoreCase("CallCommodityPurchase")) {
			logger.info("inside COMMODITY Purchase ");
			return CallCommodityPurchase(iformObj, stringdata);
		}else if (control.equalsIgnoreCase("ConfirmPurchase")) {
			logger.info("inside ConfirmDealKey ");
			return ConfirmPurchase(iformObj, stringdata);
		}else if (control.equalsIgnoreCase("calculateLosAppNum")) {
			logger.info("inside calculateLosAppNum function ");
			return calculateLosAppNum(iformObj, stringdata);
		}else if (control.equalsIgnoreCase("CommoditySell")) {
			logger.info("inside COMMODITY Sell ");
			return CommoditySell(iformObj, stringdata);
		}else if (control.equalsIgnoreCase("ConfirmSell")) {
			return ConfirmSell(iformObj, stringdata);
		}else if (control.equalsIgnoreCase("CalculateFeesGrid")) {
			logger.info("inside CalculateFeesGrid for disbursement ");
			return calculateDisbursementAdminFee(iformObj, stringdata);
		}else if (control.equalsIgnoreCase("CallContractSimulationChild")) {
			logger.info("inside CallContractSimulationChild call ");
			return CallContractSimulationChild(iformObj, stringdata);
		}else if (control.equalsIgnoreCase("TMSblockUnblockGrid")) {
			logger.info("inside TMSblockUnblockGrid ");
			return TMSblockUnblockGrid(iformObj, stringdata);
		}else if (control.equalsIgnoreCase("ExecuteAutoSell")) {
			logger.info("inside ExecuteAutoSell ");
			return ExecuteAutoSell(iformObj, stringdata);
		}else if (control.equalsIgnoreCase("LoanDisbursement")) {
			logger.info("inside LoanDisbursement ");
			return LoanDisbursement(iformObj, stringdata);
		}else if (control.equalsIgnoreCase("BuyAndContractOnLoad")) {
			logger.info("inside BuyAndContractOnLoad ");
			return BuyAndContractOnLoad(iformObj, stringdata);
		}else if (control.equalsIgnoreCase("subFormLoadSIMAH")) {
			logger.info("inside subFormLoadSIMAH ");
			return subFormLoadSIMAH(iformObj, stringdata);
		}else if (control.equalsIgnoreCase("subFormLoadSIMAHCommercial")) {
			logger.info("inside subFormLoadSIMAHCommercial ");
			return subFormLoadSIMAHCommercial(iformObj, stringdata);
		}
		else if (control.equalsIgnoreCase("RelatedPartyHiddenRowSet")) {
			logger.info("inside BuyAndContractOnLoad ");
			return RelatedPartyHiddenRowSet(iformObj, stringdata);
		}else if (control.equalsIgnoreCase("subFormTest")) {
			logger.info("inside subFormTest ");
			return subFormTest(iformObj, stringdata);
		}else if (control.equalsIgnoreCase("SiteVisitChecklist")) {
			logger.info("inside Locationvisitgrid ");
			return SiteVisitChecklist(iformObj, stringdata);
		}else if (control.equalsIgnoreCase("defaultcampaign")) {
			logger.info("inside defaultcampaign ");
			return defaultcampaign(iformObj, stringdata);
		}else if (control.equalsIgnoreCase("AddRelatedPartyPQ")) {
            logger.info("inside AddRelatedPartyPQ function ");
            return AddRelatedPartyPQ(iformObj, stringdata);
		}else if (control.equalsIgnoreCase("pqapprovedAmountAfterSIMAH")) {
            logger.info("inside pqapprovedAmountAfterSIMAH function ");
            return pqapprovedAmountAfterSIMAH(iformObj, stringdata);
		}else if (control.equalsIgnoreCase("calculateCurrentDBR")) {
            logger.info("inside calculateCurrentDBR function ");
            return calculateCurrentDBR(iformObj, stringdata);
		}else if (control.equalsIgnoreCase("BrokerDocumentcall")) {
            logger.info("inside BrokerDocumentcall function ");
            return BrokerDocumentcall_main(iformObj,stringdata);
		}else if (control.equalsIgnoreCase("maxCommodityPurchaseCheck")) {
            logger.info("inside maxCommodityPurchaseCheck function ");
            return maxCommodityPurchaseCheck(iformObj, stringdata);
		}else if (control.equalsIgnoreCase("stagewisemandatorydocumentCheck")) {
            logger.info("inside stagewisemandatorydocumentCheck function ");
            return stagewisemandatorydocumentCheck(iformObj, stringdata);
		}else if (control.equalsIgnoreCase("corporateGuaranteeCheck")) {
            logger.info("inside corporateGuaranteeCheck function ");
            return corporateGuaranteeCheck(iformObj, stringdata);
		}else if (control.equalsIgnoreCase("RelatedPartyfillSIMAHDataCommercial")) {
            logger.info("inside RelatedPartyfillSIMAHDataCommercial function ");
            return RelatedPartyfillSIMAHDataCommercial(iformObj, stringdata);
		}
		else if (control.equalsIgnoreCase("fillMerchantDetails")) {
            logger.info("inside fillMerchantDetails function ");
            return fillMerchantDetails(iformObj, stringdata);
		}
		else if (control.equalsIgnoreCase("calculateT24BranchCode")) {
            logger.info("inside calculateT24BranchCode function ");
            return calculateT24BranchCode(iformObj,stringdata);
		}
		else if (control.equalsIgnoreCase("SIMAHvalidationcheck")) {
            logger.info("inside SIMAHvalidationcheck function ");
            return SIMAHvalidationcheck(iformObj,stringdata);
		}
		else if (control.equalsIgnoreCase("relatedpartyFetchDataFromIDnumber")) {
			logger.info("inside relatedpartyFetchDataFromIDnumber function");
			return relatedpartyFetchDataFromIDnumber(iformObj, stringdata);
		}
		else if (control.equalsIgnoreCase("fetchDataForVehicleCategory")) {
			logger.info("inside relatedpartyFetchDataFromIDnumber function");
			return fetchDataForVehicleCategory(iformObj, stringdata);
		}
		
		else if (control.equalsIgnoreCase("fetchExceptionsToGrid")) {
			logger.info("inside fetchExceptionsToGrid function");
			return fetchExceptionsToGrid(iformObj, stringdata);
		}
		
		/*
		 * else if (control.equalsIgnoreCase("downloadAllWIDocument")) {
		 * logger.info("inside downloadAllWIDocument function "); String
		 * wi_name=getWorkitemName(iformObj); obj=new CreateDocument(); return
		 * obj.downloadAllWIDocument(iformObj,wi_name); }
		 */
		else if (control.equalsIgnoreCase("template_gen_btn_cic")) {
			logger.info("111111PRINT_CLIENT_APP_FORM");
			try 
			{
				logger.info("inside try block");
				return generateTemplateWithCIC(iformObj, stringdata);
			} 
			catch (Exception e) 
			{
				
				e.getMessage();
			}
		}
		

		return stringdata;
	}
	
	private String fetchExceptionsToGrid(IFormReference iformObj, String stringdata) {
		
		try
		{
			String fetchExceptionsQuery="SELECT DISTINCT PQ_DESCRIPTION FROM NG_FLEET_PQLIST_STATUS_GRID WITH(NOLOCK) WHERE PQ_CATEGORY='Exception' AND PQ_STATUS='Fail' AND WI_NAME='"+iformObj.getObjGeneralData().getM_strProcessInstanceId().toString()+"'";
			logger.info("Fetch Exception Query : "+fetchExceptionsQuery);
			
			
			iformObj.clearTable("Q_NG_FLEET_EXCEPTION_GRID");
			JSONArray jsonArray = new JSONArray();
			JSONObject jsonObject;
			List<List<String>> exceptionsFetched=iformObj.getDataFromDB(fetchExceptionsQuery);
			logger.info("Result Fetched : "+exceptionsFetched);
			Optional<List<List<String>>> checkList=Optional.ofNullable(exceptionsFetched);
			if(checkList.isPresent()&&exceptionsFetched.size()>0)
			{
			for(List<String> exceptions:exceptionsFetched)
			{
				jsonObject=new JSONObject();
				jsonObject.put("Exception Details",exceptions.get(0).trim());	
				logger.info("JSON Object : "+jsonObject.toString());
				jsonArray.add(jsonObject);				
			}
			
			
			logger.info("JSON Array : "+jsonArray.toString());
			iformObj.addDataToGrid("Q_NG_FLEET_EXCEPTION_GRID", jsonArray);
			}
			return jsonArray.toString();
			
		}
		catch(Exception e)
		{
			return e.toString();
		}	
	}

	public String fetchDataForVehicleCategory(IFormReference iformObj, String stringdata) {
		try
		{
		String vehicleCategory = (String)iformObj.getValue("Q_NG_FLEET_VEHICLE_DETAILS_GRID_NG_FLEET_VEHICLE_TYPE_INFO_VehicleCategory");
		String product = (String)iformObj.getValue("Q_NG_FLEET_VEHICLE_DETAILS_GRID_NG_FLEET_VEHICLE_TYPE_INFO_Product");
		String customerCategory = (String)iformObj.getValue("Q_NG_POS_APPLICATION_DATA_CUSTOMER_CATEGORY");
		logger.info("Inside fetch Data for vehicle function");
		logger.info("VEHICLE_CATEGORY ='"+vehicleCategory+"' AND CUSTOMER_CATEGORY = '"+customerCategory+"' AND PRODUCT_CATEGORY = '"+product+"'");
//		String query = "SELECT TENURE,FREQUENCY,BALLON_PAYMENT,PROFIT_RATE,ADMIN_FEE,DOWN_PAYMENT,VEHICLE_CATEGORY,CUSTOMER_CATEGORY,PRODUCT_CATEGORY FROM "
//				+ "NG_MAST_VEHICLE_DETAILS_FETCH WHERE VEHICLE_CATEGORY ='"+vehicleCategory+"' AND CUSTOMER_CATEGORY = '"+customerCategory+"' AND PRODUCT_CATEGORY = '"+product+"'";
//		
		String query = "SELECT TENURE,FREQUENCY,BALLON_PAYMENT,PROFIT_RATE,ADMIN_FEE,DOWN_PAYMENT,VEHICLE_CATEGORY,CUSTOMER_CATEGORY,PRODUCT_CATEGORY, GRACE_PERIOD FROM "
				+ "NG_MAST_VEHICLE_DETAILS_FETCH WHERE VEHICLE_CATEGORY ='"+vehicleCategory+"' AND PRODUCT_CATEGORY = '"+product+"'";
		
		logger.info("Query to get the data from table is: "+query);
		List<List<String>> dataValues = iformObj.getDataFromDB(query);
		
		logger.info("List after fetching the data from database : "+query);
		String tenure = dataValues.get(0).get(0);
		String frequency = dataValues.get(0).get(1);
		String ballonPayment = dataValues.get(0).get(2);
		String profitRate = dataValues.get(0).get(3);
		String adminFee = dataValues.get(0).get(4);
		String downPayment = dataValues.get(0).get(5);
		String gracePeriod=dataValues.get(0).get(9);
		
		logger.info("tenure ='"+tenure+"' AND frequency = '"+frequency+"' AND ballonPayment = '"+ballonPayment+"' profitRate ='"+profitRate+"' AND adminFee = '"+adminFee+"' AND downPayment = '"+downPayment+"'"+" Grace period = "+gracePeriod);
		iformObj.setValue("Q_NG_FLEET_VEHICLE_DETAILS_GRID_NG_FLEET_VEHICLE_TYPE_INFO_Tenure", tenure);
		iformObj.setValue("Q_NG_FLEET_VEHICLE_DETAILS_GRID_NG_FLEET_VEHICLE_TYPE_INFO_FREQUENCY", frequency);
		iformObj.setValue("Q_NG_FLEET_VEHICLE_DETAILS_GRID_NG_FLEET_VEHICLE_TYPE_INFO_BALLOON_PAYMENT", ballonPayment);
		iformObj.setValue("Q_NG_FLEET_VEHICLE_DETAILS_GRID_NG_FLEET_VEHICLE_TYPE_INFO_PROFIT_RATE", profitRate);
		iformObj.setValue("Q_NG_FLEET_VEHICLE_DETAILS_GRID_NG_FLEET_VEHICLE_TYPE_INFO_ADMIN_FEE", adminFee);
		iformObj.setValue("Q_NG_FLEET_VEHICLE_DETAILS_GRID_NG_FLEET_VEHICLE_TYPE_INFO_DOWN_PAYMENT", downPayment);
		iformObj.setValue("Q_NG_FLEET_VEHICLE_DETAILS_GRID_NG_FLEET_VEHICLE_TYPE_INFO_GRACE_PERIOD_MONTH", gracePeriod);

		logger.info("All data set in the vehicle detail form");
		return "Success";
		}
		catch(Exception e)
		{
			e.printStackTrace();
			
			return e.toString();
		}
		
	}
	private String fillArabicAmountFields(IFormReference iformObj, String stringdata) 
	{
		String requested_amt="",disbursal_amt="",app_data_total_profit="",disb_total_profit="",requested_amt_plus_total_profit="",disbursal_amt_plus_total_profit="";
		double requested_amt_plus_total_profit_double=0,disbursal_amt_plus_total_profit_double=0;
		requested_amt=(String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_REQ_AMNT_SAR");
		app_data_total_profit=(String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_TOTAL_PROFIT");
		disbursal_amt=(String) iformObj.getValue("Q_NG_POS_DISBURSAL_DATA_DISBURSAL_AMT");
		disb_total_profit=(String) iformObj.getValue("Q_NG_POS_DISBURSAL_DATA_TOTAL_PROFIT");
		logger.info("fillArabicAmountFields data is captured successfully");
		
		if(requested_amt==null || requested_amt==""  || requested_amt.equals("") || requested_amt=="0.00")
			requested_amt="0";
		
		if(app_data_total_profit==null || app_data_total_profit.equals("")  || app_data_total_profit=="0" || app_data_total_profit=="0.00")
			app_data_total_profit="0";
		
		if(disbursal_amt==null || disbursal_amt=="0" || disbursal_amt.equals("") || disbursal_amt=="0.00")
			disbursal_amt="0";
		
		if( disb_total_profit==null || disb_total_profit.equals("") ||  disb_total_profit=="0" || disb_total_profit=="0.00" )
			disb_total_profit="0";
		
		try
		{
			if(requested_amt!=null && requested_amt!=""  && !requested_amt.equals("") && requested_amt!="0.00" && app_data_total_profit!=null && !app_data_total_profit.equals("")  && app_data_total_profit!="0" &&app_data_total_profit!="0.00" )
				requested_amt_plus_total_profit_double=Double.parseDouble(requested_amt)+Double.parseDouble(app_data_total_profit);
			
			if(disbursal_amt!=null && disbursal_amt!="0" && !disbursal_amt.equals("") && disbursal_amt!="0.00" && disb_total_profit!=null && !disb_total_profit.equals("") && disb_total_profit!="0" &&disb_total_profit!="0.00" )
				disbursal_amt_plus_total_profit_double=Double.parseDouble(disbursal_amt)+Double.parseDouble(disb_total_profit);
		}
		catch(Exception e)
		{
			logger.info("Exception occurred:: fillArabicAmountFields and exception is "+e);
		}
		
		requested_amt_plus_total_profit=String.format("%.2f", requested_amt_plus_total_profit_double);
		disbursal_amt_plus_total_profit=String.format("%.2f", disbursal_amt_plus_total_profit_double);
		
		
		logger.info("fillArabicAmountFields data is captured successfully, here also");
		logger.info("fillArabicAmountFields requested amount is "+requested_amt);
		logger.info("fillArabicAmountFields requested amount plus profit is "+requested_amt_plus_total_profit);
		logger.info("fillArabicAmountFields disbursal amount is "+disbursal_amt);
		logger.info("fillArabicAmountFields disbursed amount plus profit is "+disb_total_profit);
		
		BigDecimal requested_amt_big=new BigDecimal(requested_amt);
		logger.info("sdfsfs");
		BigDecimal app_data_total_profit_big=new BigDecimal(requested_amt_plus_total_profit);
		logger.info("sdfsfsdddddd");
		BigDecimal disbursal_amt_big=new BigDecimal(disbursal_amt);
		logger.info("sdfsfsssssssssssssssssssssssssssssss");
		BigDecimal disbursal_amt_plus_total_profit_double_big=new BigDecimal(disbursal_amt_plus_total_profit);
		logger.info("sdfsfsd");
		logger.info("fillArabicAmountFields requested amount is "+requested_amt_big);
		logger.info("fillArabicAmountFields requested amount plus profit is "+app_data_total_profit_big);
		logger.info("fillArabicAmountFields disbursed amount is "+disbursal_amt_big);
		logger.info("fillArabicAmountFields disbursed amount plus profit is "+disbursal_amt_plus_total_profit_double_big);
		NumberToArabic n=new NumberToArabic();
		logger.info(" For "+requested_amt+" arabic is "+n.convertToArabic(requested_amt_big,"SAR"));
		logger.info(" For "+requested_amt_plus_total_profit_double+" arabic is "+n.convertToArabic(app_data_total_profit_big,"SAR"));
		logger.info(" For "+disbursal_amt+" arabic is "+n.convertToArabic(disbursal_amt_big,"SAR"));
		logger.info(" For "+disbursal_amt_plus_total_profit_double+" arabic is "+n.convertToArabic(disbursal_amt_plus_total_profit_double_big,"SAR"));

		try {
		String requsted_amt_arabic=new String (n.convertToArabic(requested_amt_big,"SAR").getBytes(),"UTF-8");
		logger.info("%%%%%%%%%%%%%%%%%%%%% requsted_amt_arabic "+requsted_amt_arabic);
		iformObj.setValue("REQUESTED_AMT_ARABIC",n.convertToArabic(requested_amt_big,"SAR"));
		iformObj.setValue("REQUESTED_AMT_PLUS_PROFIT_ARABIC",n.convertToArabic(app_data_total_profit_big,"SAR"));
		iformObj.setValue("DISBURSAL_AMT_ARABIC",n.convertToArabic(disbursal_amt_big,"SAR"));
		iformObj.setValue("DISBURSAL_AMT_PLUS_PROFIT_ARABIC",n.convertToArabic(disbursal_amt_plus_total_profit_double_big,"SAR"));

		
		/*
		iformObj.setValue("REQUESTED_AMT_ARABIC",new String (n.convertToArabic(requested_amt_big,"SAR").getBytes(),"UTF-8"));
		iformObj.setValue("REQUESTED_AMT_PLUS_PROFIT_ARABIC",new String (n.convertToArabic(app_data_total_profit_big,"SAR").getBytes(),"UTF-8"));
		iformObj.setValue("DISBURSAL_AMT_ARABIC",new String (n.convertToArabic(disbursal_amt_big,"SAR").getBytes(),"UTF-8"));
		iformObj.setValue("DISBURSAL_AMT_PLUS_PROFIT_ARABIC",new String (n.convertToArabic(disbursal_amt_plus_total_profit_double_big,"SAR").getBytes(),"UTF-8"));
	*/
	//	String wi_name=getWorkitemName(iformObj);
		//String query="UPDATE NG_FLEET_EXTTABLE SET REQUESTED_AMT_ARABIC=N'"+n.convertToArabic(requested_amt_big,"SAR")+"' WHERE WI_NAME='"+wi_name+"' ";
		
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return "Success~fillArabicAmountFields";
	}

	private String fillHeaderDetails(IFormReference iformObj, String stringdata) 
	{
		String processInstanceID=getWorkitemName(iformObj);
		logger.info("inside fillHeaderDetails function body");
		//String region="",area="",district="",branch="",channel="",branch_id="";
		String hrmsUserId="",hrmsFullName="",hrmsEmailID="",hrmsBranchID="",hrmsBranchName="",hrmsBranchRegion="",hrmsArea="",hrmsBranchDistrict="",hrmsBranchCity="",channel="",ho_brn="";
		//String userid_from_pdbuser="";
		String loggedInUserID="";
		String username=getUserName(iformObj);// Currently giving only administrator hence passing from js
		//String username=stringdata;
		String hrmsLinkedServerName=GetXML.getProp().getProperty("HRMS_Linked_server");
		String query="";
		try
		{
		
			/*
			 * String query="SELECT Comment FROM PDBUser WHERE USERNAME = '"+username+"' ";
			 * List<List<String>> comment= iformObj.getDataFromDB(query);
			 * logger.info("Query from pdbuser is "+query+" and its result is "+comment);
			 * if(comment.size()>0) { if(comment.get(0).size()>0) userid_from_pdbuser =
			 * (String) comment.get(0).get(0); }
			 * logger.info("Value set in userid_from_pdbuser is  "+userid_from_pdbuser);
			 */
			loggedInUserID=getUserName(iformObj);
			//loggedInUserID="0039355";
			if(loggedInUserID.length()>0)
			{
			 //query="SELECT * FROM OPENQUERY (TEST2,'SELECT a.BRANCH_ID,BRANCH_REGION,AREA,BRANCH_DISTRICT,B.BRANCH_NAME FROM APPS.XXARB_MSB_NEWGEN_EMP_DTLS_V A,APPS.XXARB_MSB_NEWGEN_BRANCH_DTLS_V B WHERE A.BRANCH_ID=B.BRANCH_ID AND A.USER_ID=''"+userid_from_pdbuser+"'' '); ";
			 query="SELECT * FROM OPENQUERY ("+hrmsLinkedServerName+",'SELECT a.user_id,a.full_name_ARABIC,a.email_address,a.branch_id,a.branch_name_arabic,b.branch_region_arabic,b.area,b.branch_district_arabic,b.branch_city,a.ho_brn FROM APPS.XXARB_MSB_NEWGEN_EMP_DTLS_V A,APPS.XXARB_MSB_NEWGEN_BRANCH_DTLS_V B WHERE A.BRANCH_ID=B.BRANCH_ID AND A.BRANCH_NAME=B.BRANCH_NAME AND A.USER_ID=''"+loggedInUserID+"'' '); ";
			 List<List<String>> result_from_query= iformObj.getDataFromDB(query);	
			 logger.info("Query from HRMS is "+query+" and its result is "+result_from_query);
			 if(result_from_query.size()>0)
			 {
				 if(result_from_query.get(0).size()>4)
				 {
					 
					 hrmsUserId=result_from_query.get(0).get(0);
					 hrmsFullName=result_from_query.get(0).get(1);
					 hrmsEmailID=result_from_query.get(0).get(2);
					 hrmsBranchID=result_from_query.get(0).get(3);
					 hrmsBranchName=result_from_query.get(0).get(4);
					 hrmsBranchRegion=result_from_query.get(0).get(5);
					 hrmsArea=result_from_query.get(0).get(6);
					 hrmsBranchDistrict=result_from_query.get(0).get(7);
					 hrmsBranchCity=result_from_query.get(0).get(8);
					 ho_brn=result_from_query.get(0).get(9);
					 
				 }
				 
				 if(ho_brn.equalsIgnoreCase("Branch"))
					 channel="Branch"; //channel="Head Quarter";
				 	else
				 	 channel="Head Quarter"; //channel="Branch";
				 
				 //hrmsUserId="0039355";
				// query="UPDATE NG_FLEET_EXTTABLE SET REGION=N'"+hrmsBranchRegion+"',AREA=N'"+hrmsArea+"',DISTRICT=N'"+hrmsBranchDistrict+"',BRANCH=N'"+hrmsBranchName+"',CHANNEL=N'"+channel+"' WHERE WI_NAME = '"+processInstanceID+"'  ";
				 String query_hrms="DELETE FROM ng_mast_hrms_data WHERE USER_ID ='"+hrmsUserId+"'  ";
				 logger.info("Query to delete query_hrms is  "+query_hrms);
				 iformObj.saveDataInDB(query_hrms);
				 
				 
				 query_hrms="INSERT INTO ng_mast_hrms_data (USER_ID,FULL_NAME,EMAIL_ID,BRANCH_ID,BRANCH_NAME,BRANCH_REGION,AREA,BRANCH_DISTRICT,BRANCH_CITY,INSERTED_DATETIME) VALUES (N'"+hrmsUserId+"',N'"+hrmsFullName+"',N'"+hrmsEmailID+"',N'"+hrmsBranchID+"',N'"+hrmsBranchName+"',N'"+hrmsBranchRegion+"',N'"+hrmsArea+"',N'"+hrmsBranchDistrict+"',N'"+hrmsBranchCity+"',GETDATE())  ";
				 logger.info("Query to insert query_hrms is  "+query_hrms);
				 iformObj.saveDataInDB(query_hrms);
				 iformObj.setValue("RM_NAME", loggedInUserID);
				 iformObj.setValue("REGION", hrmsBranchRegion);
				 iformObj.setValue("AREA", hrmsArea);
				 iformObj.setValue("DISTRICT", hrmsBranchDistrict);
				 iformObj.setValue("BRANCH", hrmsBranchCity);
				 iformObj.setValue("CHANNEL", channel);
				 
			 }
			 else
			 {
				 //query="UPDATE NG_FLEET_EXTTABLE SET REGION='Riyadh Region',AREA='Central',DISTRICT='Riyadh',BRANCH='Riyadh',CHANNEL='Head Quarter' WHERE WI_NAME LIKE '"+processInstanceID+"'  ";
				 	iformObj.setValue("RM_NAME", loggedInUserID);
				 	iformObj.setValue("REGION", "Riyadh Region");
					iformObj.setValue("AREA", "Central");
					iformObj.setValue("DISTRICT", "Riyadh");
					iformObj.setValue("BRANCH", "Riyadh-Branch");
					iformObj.setValue("CHANNEL", "Head Quarter"); 
			 }
			// logger.info("Query to insert header details in exttable is  "+query);
			// iformObj.saveDataInDB(query);
			 
			}
			else
			{
				//query="UPDATE NG_FLEET_EXTTABLE SET REGION='Riyadh Region',AREA='Central',DISTRICT='Riyadh',BRANCH='Riyadh-Branch',CHANNEL='Head Quarter' WHERE WI_NAME LIKE '"+processInstanceID+"'  ";
				//	logger.info("Query to insert header details in exttable case 2 is  "+query);
				//iformObj.saveDataInDB(query);
				iformObj.setValue("RM_NAME", loggedInUserID);
				iformObj.setValue("REGION", "Riyadh Region");
				iformObj.setValue("AREA", "Central");
				iformObj.setValue("DISTRICT", "Riyadh");
				iformObj.setValue("BRANCH", "Riyadh-Branch");
				iformObj.setValue("CHANNEL", "Head Quarter");
				
			}
		}
		catch (Exception e)
		{
			 logger.info("Exception Occurred: fillHeaderDetails and exception is "+e);
		}
		
		return "fillHeaderDetails working sucessfully";
	}

	private String fillFullRMName(IFormReference iformObj, String stringdata) 
	{
        logger.info("inside implementation of fillFullRMName function ");
		String rm_name=(String) iformObj.getValue("RM_NAME");
		logger.info("RM name on form is  "+rm_name);
		String fullrmname="",firstname="",secondname="";
		try
		{
			String query="SELECT PersonalName,FamilyName FROM PDBUSER WHERE UserName='"+rm_name+"'";
			List<List<String>> result=iformObj.getDataFromDB(query);
			logger.info("Query to fetch full name is "+query+" and its result is "+result);
			if(result.size()>0)
			{
				if(result.get(0).size()==2)
				{
					firstname=result.get(0).get(0);
					secondname=result.get(0).get(1);
				}
				else if(result.get(0).size()==1)
				{
					firstname=result.get(0).get(0);
					secondname="";
				}
			}
			
			if(firstname=="NULL" || firstname==null)
			{
				firstname="";
			}
			if(secondname=="NULL" || secondname==null)
			{
				secondname="";
			}
		
			fullrmname=firstname+" "+secondname;
			iformObj.setValue("FULL_RM_NAME", fullrmname);
			return "Success~"+fullrmname;
		}
		catch(Exception e)
		{
			logger.info("Exception Occurred: fillFullRMName and exception is "+e);
		}
		
		return "";
	}

	private String SIMAHvalidationcheck(IFormReference iformObj, String stringdata) 
	{
        logger.info("inside implementation of SIMAHvalidationcheck function ");
		
		String wi_name=getWorkitemName(iformObj);
		String query="";
		List<List<String>> result;
		String value="";
		try
		{
			query="select count(1) from NG_FLEET_RELATED_PARTY_ROLES_GRID where PARTY_TYPE='Individual' and SIMAH_REQUIRED='true' and WI_NAME='"+wi_name+"' and ID_NUMBER not in (select cid2 from NG_FLEET_SIMAH_IND_PROVIDED_SECTION)";
			result=iformObj.getDataFromDB(query);
			if(result.size()>0)
			{
				if(result.get(0).size()>0)
				{
					value=result.get(0).get(0);
					
				}
			}
			
			int i=Integer.parseInt(value);
			if(i>0)
			{
				return "error~Please Fetch SIMAH For All Individuals Party";
			}
			
			value="";
			query="select count(1) from NG_FLEET_RELATED_PARTY_ROLES_GRID where PARTY_TYPE='Company' and SIMAH_REQUIRED='true' and WI_NAME='"+wi_name+"' and CR not in (SELECT CR_NO from NG_FLEET_SIMAH_RP_BASIC_DETAILS) ";
			result=iformObj.getDataFromDB(query);
			if(result.size()>0)
			{
				if(result.get(0).size()>0)
				{
					value=result.get(0).get(0);
					
				}
			}
			
			i=Integer.parseInt(value);
			if(i>0)
			{
				return "error~Please Fetch SIMAH For All Company Party";
			}
			
			value="";
			query="select count(1) from NG_FLEET_SIMAH_BASIC_DETAILS where WI_NAME='"+wi_name+"'  ";
			result=iformObj.getDataFromDB(query);
			if(result.size()>0)
			{
				if(result.get(0).size()>0)
				{
					value=result.get(0).get(0);
					
				}
			}
			
			i=Integer.parseInt(value);
			if(i==0)
			{
				return "error~Please Fetch SIMAH For Applicant Party";
			}
	
		}
		catch(Exception e)
		{
			logger.info("Exception Occurred: SIMAHvalidationcheck and exception is "+e);
			return "error~Error From Backend while applying SIMAH validation";
		}
		
		return "Success~SIMAHvalidationcheck";
	}

	private String fillMerchantDetails(IFormReference iformObj, String stringdata) 
	{	
		String wi_name=getWorkitemName(iformObj);
		String cic_no=(String) iformObj.getValue("PADDED_CIC_NO");
		String callname="MerchantDetailsInq";
		//createRequestXML customized to handle cic
		try
		{
			logger.info("Inside createRequestXML Function and callName is " + callname);
			String tagName = "_TagName";
			
			String request_prefix=GetXML.getProp().getProperty(callname+"_RequestPrefix");
			if(request_prefix.equals(null))
			{
				request_prefix="";
			}
			logger.info("Request prefix is "+request_prefix+"please check");
			
			String header_tags=GetXML.getProp().getProperty(callname+"_Header");
			String []header_tags_arry=header_tags.split(",");
			
			logger.info("Header tags are "+header_tags);
			JSONObject jsonobj_header=new JSONObject();
			for(String temp:header_tags_arry)
			{
				String[] hash_split=temp.split("#");
				jsonobj_header.put(hash_split[0],hash_split[1]);
			}
			
			logger.info("JSOn object is "+jsonobj_header);
		
			String tagNames = GetXML.getProp().getProperty(callname + tagName);
			logger.info(tagNames);
			String[] tags = tagNames.split(",");
	
			String requestXML = readDummyRequest(callname);
	
			XMLParser parser = new XMLParser(requestXML);
			
	
			for (String tag : tags) 
			{
				String tagValue = parser.getValueOf(request_prefix+tag);
				logger.info("tag values are"+tagValue);
				if(tagValue.contains("header~"))
				{
					try {
						
					if(tagValue.split("~")[1].equalsIgnoreCase("UUID"))
					{
						parser.changeValue(request_prefix+tag, java.util.UUID.randomUUID().toString());
					}
					else
					{
					String value=(String) jsonobj_header.get(tagValue.split("~")[1]);
					logger.info("Value to be replaced by jsonobj_header is "+value);
					parser.changeValue(request_prefix+tag, value);
					}
					}
					catch(Exception e)
					{
						logger.info("Exception is "+e);
					}
				}
				if (tagValue.startsWith("formid~")) 
				{
					String value = (String) iformObj.getValue(tagValue.split("~")[1]);
					parser.changeValue(request_prefix+tag, value);
				}
				
			}
			
			//String timestamp=new Timestamp(System.currentTimeMillis()).toString();
			//logger.info("Setting Enquiy Reference for simah call "+timestamp);
			logger.info("CreateRequestXML :Handling Language in Request ");
			logger.info("Language tag for "+callname+" present in proerty file or not ??? "+GetXML.getProp().containsKey(callname+"_LanguageTag"));
			if(GetXML.getProp().containsKey(callname+"_LanguageTag"))
			{
				logger.info("CreateRequestXML : Language tag is present in property file");
				String language_tag=GetXML.getProp().getProperty(callname+"_LanguageTag");
				logger.info("CreateRequestXML : Language tag value in property file is "+language_tag);
				String session_lang=(String) iformObj.getValue("SESSION_LANG");
				logger.info("CreateRequestXML : Session Language is "+session_lang);
				parser.changeValue(request_prefix+language_tag, session_lang);
				logger.info(request_prefix+language_tag+" got value "+session_lang);
			}
			
			logger.info("Request prefix is "+request_prefix+"please check");
		//	parser.changeValue(request_prefix+"alr:CICNum", cic_no); //Just because of this we wrote this code, instead of using creatreqestxml
			System.out.println("RequestXML is :\n" + parser.toString());
			logger.info("RequestXML is :\n" + parser.toString());
			String responseXML = new SocketConnector().getSocketXMLResponse(parser.toString(), callname,iformObj);
		
			String restricted_tags=GetXML.getProp().getProperty(callname+"_RestrictedTags");
			String []restricted_values=restricted_tags.split(",");
			for(String temp:restricted_values)
				responseXML=responseXML.replace(temp,"");
			
			//Hello
			String[] callNamesGrid = {"MerchantDetailsInq_MerchantList"};
		
			for (String callNames : callNamesGrid) 
				{
					
					//logger.info("Response XML received by setResponseDataGrid is"+responseXML);
					tagName = "_TagNameResponseGrid";
					tagNames = GetXML.getProp().getProperty(callNames + tagName);
					
					logger.info(tagNames);
					String[] tagValue = tagNames.split(",");
					
					String date = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss").format(new Date());
					
					
					String values=" ";
					String query="";
					//columnames="CIC_NO,CR_NO";
					String insertinto="INSERT INTO ";
					String tablename=GetXML.getProp().getProperty(callNames+"_Table_Grid");
					
					//Delete is not required as we are using workitemname for handling
					//String delete_query="DELETE FROM "+tablename+" where CIC_NO= '"+cic_no+"' ";
					//iformObj.saveDataInDB(delete_query);
					//logger.info("With this query table is emptied :: "+delete_query);
					
					String statuscode=GetXML.getProp().getProperty(callNames+"_StatusCode");
					String[] status_code_split=statuscode.split("~");
					
					
					for(String tag: tagValue)
					{
						tags=tag.split("~");
						WFXmlResponse objWFxmlResponse = new WFXmlResponse(responseXML);
						//logger.info("objWFxmlResponse value is "+objWFxmlResponse);
						
						String columnames="CIC_NO,WI_NAME,";
						values=" ";
						for(int j=2;j<tags.length;++j)
						{
							String tag_split_values=tags[j];
							logger.info("Tag values split to set column names"+tag_split_values);
							String []hash_split_values=tag_split_values.split("#");
							columnames=columnames+hash_split_values[0].replace("$","")+",";
						}
						
						columnames=columnames+"ENTRY_DATE_TIME";
						logger.info("column names are"+columnames);
						
						if (objWFxmlResponse.getVal(status_code_split[0]).equals(status_code_split[1])) 
						{
							
							
						logger.info("Tags[0] is "+tags[0]);
						logger.info("Tags[1] is "+tags[1]);
						WFXmlList WFXmlList = objWFxmlResponse.createList(tags[0],tags[1]);
						logger.info("Wfmxmlsit is --------------"+WFXmlList);
						logger.info("Size of Wfmxmlsit is "+WFXmlList.hasMoreElements());
						for (int i = 0; WFXmlList.hasMoreElements(true); WFXmlList.skip(true), i++) 
						{
						
							values=values+"( '"+cic_no+"','"+wi_name+"',";
							
							for(int j=2;j<tags.length;++j)
							{
								String tag_split_values=tags[j];
								if((!tag_split_values.contains("@")))
								{
									String []hash_split_values=tag_split_values.split("#");
									String result_from_response=WFXmlList.getVal(hash_split_values[1]);
									result_from_response=result_from_response.replace("'","''");
									if(result_from_response== null || result_from_response=="")
									{
										result_from_response=" ";
									}
									
									if(hash_split_values[0].contains("$"))
										values=values+"'"+result_from_response+"',";
									else
										values=values+"N'"+result_from_response+"',";
								}
								else
								{
									String []inputTagswithoutRateSign=tag_split_values.split("@");
									String []hash_split_values=inputTagswithoutRateSign[0].split("#");
									String result_from_response=WFXmlList.getVal(hash_split_values[1]);
									if(result_from_response.equals(null) || result_from_response.equals(""))
									{
										result_from_response=" ";
									}
									String internal_query="";
									internal_query="( SELECT PARAM_VALUE FROM NG_MAST_POS_TAG_KEY_VALUE_CONFIG WHERE PARAM_KEY='"+result_from_response+"' AND TAG_IDENT='"+inputTagswithoutRateSign[1]+"' AND ISACTIVE='Y' )" ;
									values=values+internal_query+",";
								}
								
								
							}
							values=values+"'"+date+"'),";
						}
						
						if (values.endsWith(",")) 
						{
							values = values.substring(0, values.length() - 1);
						}
						
						logger.info("Final column variables are"+columnames);
						logger.info("values are"+values);
						
						query=insertinto+tablename+" ( "+ columnames +" ) VALUES "+values;
						logger.info("Query for setting response in search screen tables is"+query);
						iformObj.saveDataInDB(query);	
						
						iformObj.setValue("MERCHANT_DETAILS_FETCHED","YES");
						
						}
						else
						{
							logger.info("For "+callname+" Status code returned from response is not success ");
							return "Error~In "+callname+" error received from backen";
						}
						
					}
				}
			}
			catch(Exception e)
			{
				logger.info("Excpetion Occurred::fillMerchantDetails and exception is "+e);
				return "Error~Error in fillMerchantDetails";
			}
	
		return "Success~fillMerchantDetails";
	}

	private String calculateT24BranchCode(IFormReference iformObj, String stringdata) 
	{
		logger.info("Inside calculateT24BranchCode");
		String disbursal_acc_no=(String)iformObj.getValue("Q_NG_POS_APPLICATION_DATA_DISBURSAL_ACC_NO");
		logger.info("Disbursement Account no is "+disbursal_acc_no);
		String rbs_branch_code="",T24_branch_code="";
		try
		{
			if(disbursal_acc_no!=null && disbursal_acc_no.trim().length()>=5)
			{
				rbs_branch_code=disbursal_acc_no.substring(0,5);
				logger.info("RBS Branch Code is "+rbs_branch_code);
				String query="SELECT T24_BRANCH_CODE FROM NG_MAST_T24_BRANCH_MAPPING WHERE RBS_BRANCH_CODE='"+rbs_branch_code+"' AND ISACTIVE='Y' ";
				List<List<String>> T24_branch_codes_result = iformObj.getDataFromDB(query);
				logger.info("Query to fetch T24_BRANCH_CODE no is "+query+" and its result is "+T24_branch_codes_result);
				if(T24_branch_codes_result.size()>0)
				{
					if(T24_branch_codes_result.get(0).size()>0)
					{
						logger.info("Setting T24_branch_codes_result as "+T24_branch_codes_result.get(0).get(0));
						T24_branch_code=T24_branch_codes_result.get(0).get(0);
						logger.info("Setting T24_branch_code as "+T24_branch_code);
						iformObj.setValue("T24_BRANCH_CODE", T24_branch_code);
						return "Success~"+T24_branch_code;
					}
					else
					{
						iformObj.setValue("T24_BRANCH_CODE","");
						iformObj.setValue("Q_NG_POS_APPLICATION_DATA_DISBURSAL_ACC_NO","");
						logger.info("T24 Company ID does not found for given Account no");
						return "Error~T24 Company ID does not exist for selected Account no";
					}
				}
				else
				{
					iformObj.setValue("T24_BRANCH_CODE","");
					iformObj.setValue("Q_NG_POS_APPLICATION_DATA_DISBURSAL_ACC_NO","");
					logger.info("T24 Company ID does not found for given Account no");
					return "Error~T24 Company ID does not exist for selected Account no";
				}
			}
			else
			{
				logger.info("Disbural Account number is either null or less than of 5 digit");
				return "Error~Error in Fetching T24 Branch code from given account number";
			}
			
		}
		catch(Exception e)
		{
			logger.info("Exception Occurred: calculateT24BranchCode"+e);
			return "Error~Error in fetching T24 Branch Code";
		}
	}

	private String corporateGuaranteeCheck(IFormReference iformObj, String stringdata)
	{
		logger.info("Inside corporateGuaranteeCheck");
		try
		{
			String wi_name=getWorkitemName(iformObj);
			String query="SELECT CR_NUMBER from NG_FLEET_CR_DETAILS_GRID WHERE WI_NAME ='"+wi_name+"' AND CR_TYPE='Main CR'";
			List<List<String>> cr_no=iformObj.getDataFromDB(query);
			logger.info( "corporateGuaranteeCheck: Query to get cr no is "+query+" and its result is "+cr_no);
			if(cr_no.size()>0)
			{
				if(cr_no.size()==1)
				{
					if(cr_no.get(0).get(0)!=null)
					{
						int count=0;
						query="SELECT COUNT(1) from NG_FLEET_RELATED_PARTY_ROLES_GRID WHERE ROLE_TYPE='Guarantor' AND PERSONAL_GUARANTEE='TRUE' AND PARENT_CR ='"+cr_no.get(0).get(0)+"' ";
						List<List<String>> count_Result=iformObj.getDataFromDB(query);
						logger.info( "corporateGuaranteeCheck: Query to get count is "+query+" and its result is "+cr_no);
						if(count_Result.size()>0)
						{
							if(count_Result.get(0).get(0)!=null)
							{
								count=Integer.parseInt(count_Result.get(0).get(0).trim());
							}
						}
						logger.info("Inside corporateGuaranteeCheck, and case count is "+count_Result);
						
						if(count>0)
						{
							return "Error~Please add Main Company as corporate Guarantor" ;
						}
						else
						{
							return "Success" ;
						}
					}					
				}
				else
				{
					return "Error~Something went wrong in CR Details";
				}
			}
			else
			{
				return "";
			}
			
		}
		catch(Exception e)
		{
			logger.info("Exception Occurred: stagewisemandatorydocumentCheck "+e);
		}
		return"";
	}
	
	private String stagewisemandatorydocumentCheck(IFormReference iformObj, String stringdata) 
	{
		logger.info("Inside stagewisemandatorydocumentCheck");
		try
		{
			int document_Count=0;
			String wi_name=getWorkitemName(iformObj);
			String query="select count(1) from NG_FLEET_DOCUMENT_GRID where wi_name='"+wi_name+"' and MANDATORY='Yes' and UPLOAD_STATUS is null";
			List<List<String>> stage_wise_mandatory_document_count=iformObj.getDataFromDB(query);
			logger.info( "stagewisemandatorydocumentCheck: Error in query "+query+" and its result is "+stage_wise_mandatory_document_count);
			if(stage_wise_mandatory_document_count.size()>0)
			{
				if(stage_wise_mandatory_document_count.size()>0)
				{
					if(stage_wise_mandatory_document_count.get(0).get(0)!=null)
					{
						document_Count=Integer.parseInt(stage_wise_mandatory_document_count.get(0).get(0).trim());
						logger.info("Inside stagewisemandatorydocumentCheck, and document count is "+document_Count);
						if(document_Count>0)
						{
							return "Pass" ;
						}
						else
						{
							return "Fail" ;
						}
					}					
				}
			}
			else
			{
				logger.info("Inside stagewisemandatorydocumentCheck, No result fetch from the query, Please check ");
			}
			
		}
		catch(Exception e)
		{
			logger.info("Exception Occurred: stagewisemandatorydocumentCheck "+e);
		}
		return "";
	}

	private String maxCommodityPurchaseCheck(IFormReference iformObj, String stringdata) 
	{
		logger.info("Inside maxCommodityPurchaseCheck");
		try
		{
			String query="SELECT IIF(SUM(CAST(A.AMOUNT_SAR AS FLOAT))>(select sum(cast(param_value as float)) from NG_FLEET_PARAM_CONFIG where PARAM_KEY='MAX_COMMODITY_CAP'),'Yes','No') OUTSTANDING_AMT FROM NG_DIS_COMMODITY_PURCHASE A WHERE A.WI_NAME NOT IN (SELECT WI_NAME from NG_FLEET_EXTTABLE B WHERE B.SELL_COMM_CONFIRM_STATUS <>'NULL') AND A.DEAL_KEY <> 'NULL' ";
			List<List<String>> max_commodity_purchase_check=iformObj.getDataFromDB(query);
			logger.info( "maxCommodityPurchaseCheck: Error in query "+query+" and its result is "+max_commodity_purchase_check);
			if(max_commodity_purchase_check.size()>0)
			{
				if(max_commodity_purchase_check.size()>0)
				{
					if(max_commodity_purchase_check.get(0).get(0).trim().equalsIgnoreCase("Yes"))
					{
						logger.info("Inside maxCommodityPurchaseCheck, Returning Yes");
						return "Yes";
					}
					else if (max_commodity_purchase_check.get(0).get(0).trim().equalsIgnoreCase("No"))
					{
						logger.info("Inside maxCommodityPurchaseCheck, Returning No");
						return "No";
					}
				}
			}
			else
			{
				logger.info("Inside maxCommodityPurchaseCheck, No result fetch from the query Please check ");
			}
			
		}
		catch(Exception e)
		{
			logger.info("Exception Occurred: maxCommodityPurchaseCheck "+e);
		}
		return "";
	}

	private String pqapprovedAmountAfterSIMAH(IFormReference iformObj, String stringdata) 
	{
		String wi_name=getWorkitemName(iformObj);
		BigDecimal approved_amt_after_SIMAH=new BigDecimal(0); 
		try
		{
		logger.info("inside pqapprovedAmountAfterSIMAH function body ");
		DecimalFormat df=new DecimalFormat("#.##");
		
		BigDecimal total_obligation=new BigDecimal(0);
		BigDecimal total_througput=new BigDecimal(0);
		BigDecimal outstanding_principal=new BigDecimal(0);
		BigDecimal funded_utilization=new BigDecimal(0);
		
		BigDecimal other_SIMAH_obligation=new BigDecimal(0);
		BigDecimal total_SIMAH_obligation=new BigDecimal(0);
		BigDecimal pos_internal_obligation=new BigDecimal(0);
		BigDecimal non_pos_internal_obligation=new BigDecimal(0);

		BigDecimal current_dbr=new BigDecimal(0);
		
		String requested_amt=(String )iformObj.getValue("Q_NG_POS_APPLICATION_DATA_REQ_AMNT_SAR");
		BigDecimal req_amt_sar;
		try
		{
			 req_amt_sar=new BigDecimal(requested_amt);
		}
		catch(Exception e)
		{
			 req_amt_sar=new BigDecimal(0);
		}
		
		logger.info("Requested Amount is "+req_amt_sar);
	
		/*
		String total_througput_12_month_arb=null,total_througput_12_month_non_arb=null;
		total_througput_12_month_arb=(String) iformObj.getValue("Q_NG_POS_STMTDATA_ACCMOVMNT_TOT_THRGPUT_12MNTH");
		if(total_througput_12_month_arb.trim()==""  )
		{
			total_througput_12_month_arb="0";
		}
		logger.info("ARB 12 month througput is "+total_througput_12_month_arb);
		
		total_througput_12_month_non_arb=(String) iformObj.getValue("Q_NG_POS_STMTDATA_OTHER_DETAIL_TOT_THRGPUT_12MNTH");
		if(total_througput_12_month_non_arb.trim()==""  )
		{
			total_througput_12_month_non_arb="0";
		}
		logger.info("Non-ARB 12 month througput is "+total_througput_12_month_non_arb);
		
		
		//double temp=Double.parseDouble(String.format("%.2f",total_througput_12_month_arb ))+Double.parseDouble(String.format("%.2f",total_througput_12_month_non_arb));
		double temp=Double.parseDouble(total_througput_12_month_arb )+Double.parseDouble(total_througput_12_month_non_arb);
		*/
		
		String query="SELECT SUM(D.X) FROM( SELECT SUM(CAST(REPLACE(IIF(TOT_THRGPUT_12MNTH='',NULL,TOT_THRGPUT_12MNTH),',','') AS NUMERIC(30,2))) AS X from NG_FLEET_STMTDATA_ACCMOVMNT WHERE WI_NAME='"+wi_name+"' UNION ALL SELECT SUM(CAST(REPLACE(IIF(TOT_THROUGPUT_LAST_12='',NULL,TOT_THROUGPUT_LAST_12),',','') AS NUMERIC(30,2))) AS X from NG_FLEET_STMTDATA_ACCMOVMNT_NON_ARB WHERE WI_NAME='"+wi_name+"') D";
		List<List<String>> resultfromdb=iformObj.getDataFromDB(query);
		logger.info("Inside pqapprovedAmountAfterSIMAH and query for total througput is"+query+" and its result is "+resultfromdb);
		if(resultfromdb.size()>0)
		{
			if(resultfromdb.get(0).size()==1)
			{
				if(resultfromdb.get(0).get(0).trim()!="" && !resultfromdb.get(0).get(0).equalsIgnoreCase("Null") )
				{
					logger.info("other_SIMAH_obligation from db is "+resultfromdb.get(0).get(0));
					total_througput=new BigDecimal(resultfromdb.get(0).get(0));
					logger.info("other_SIMAH_obligationl_obligation is "+total_througput);
				}
			}
		}
		
		//total_througput=temp;
		logger.info("Total 12 month througput is "+total_througput);
		
		
		
		//Calculating a
		query="SELECT SUM(CAST(REPLACE(IIF(UTILIZATION='',NULL,UTILIZATION),',','') AS NUMERIC(30,2))) from NG_FLEET_SIMAH_L1_C1_SUMMARY_GRID WHERE CREDITOR !='RAJB' AND WI_NAME='"+wi_name+"' ";
		resultfromdb=iformObj.getDataFromDB(query);
		logger.info("Inside pqapprovedAmountAfterSIMAH and query for other_SIMAH_obligation is NG_FLEET_SIMAH_L1_C1_SUMMARY_GRID is"+query+" and its result is "+resultfromdb);
		if(resultfromdb.size()>0)
		{
			if(resultfromdb.get(0).size()==1)
			{
				if(resultfromdb.get(0).get(0).trim()!="" && !resultfromdb.get(0).get(0).equalsIgnoreCase("Null") )
				{
					logger.info("other_SIMAH_obligation from db is "+resultfromdb.get(0).get(0));
					other_SIMAH_obligation=new BigDecimal(resultfromdb.get(0).get(0));
					logger.info("other_SIMAH_obligationl_obligation is "+other_SIMAH_obligation);
				}
			}
		}
		
		//Calculating b
		query="SELECT sum(Outstanding) from( SELECT SUM(CAST(REPLACE(IIF(OUTSTDNG_PRINCIPAL='',NULL,OUTSTDNG_PRINCIPAL),',','') AS NUMERIC(30,2))) AS Outstanding from NG_FLEET_CREDITLINE_LOANACC_GRID WHERE WI_NAME='"+wi_name+"' AND PRODUCT='Point of Sale Finance' UNION SELECT IIF(TEMP.Outstanding =0 OR TEMP.Outstanding IS NULL, TEMP.ELIGIBLE_LIMIT_AMT, TEMP.Outstanding) FROM ( SELECT SUM(CAST(REPLACE(IIF(UTILIZED_AMT='',NULL,UTILIZED_AMT),',','') AS NUMERIC(30,2))) as Outstanding, SUM(CAST(REPLACE(IIF(ELIG_LIMIT_AMT='',NULL,ELIG_LIMIT_AMT),',','') AS NUMERIC(30,2))) as ELIGIBLE_LIMIT_AMT from NG_FLEET_CREDITLINE_CTF_MSB_GRID WHERE WI_NAME='"+wi_name+"' AND PRODUCT_CODE='1012' ) TEMP )b";
		resultfromdb=iformObj.getDataFromDB(query);
		logger.info("Inside pqapprovedAmountAfterSIMAH and query for pos_internal_obligation  is"+query+" and its result is "+resultfromdb);
		if(resultfromdb.size()>0)
		{
			if(resultfromdb.get(0).size()==1)
			{
				if(resultfromdb.get(0).get(0).trim()!="" && !resultfromdb.get(0).get(0).equalsIgnoreCase("Null") )
				{
					logger.info("pos_internal_obligation from db is "+resultfromdb.get(0).get(0));
					pos_internal_obligation=new BigDecimal(resultfromdb.get(0).get(0));
					logger.info("pos_internal_obligation is "+pos_internal_obligation);
				}
			}
		}

		//Calculating c
		query="SELECT SUm(Outstanding) from( SELECT SUM(CAST(REPLACE(IIF(OUTSTDNG_PRINCIPAL='',NULL,OUTSTDNG_PRINCIPAL),',','') AS NUMERIC(30,2))) AS Outstanding from NG_FLEET_CREDITLINE_LOANACC_GRID WHERE WI_NAME='"+wi_name+"' AND PRODUCT!='Point of Sale Finance' UNION SELECT IIF(TEMP.Outstanding =0 OR TEMP.Outstanding IS NULL, TEMP.ELIGIBLE_LIMIT_AMT, TEMP.Outstanding) FROM ( SELECT SUM(CAST(REPLACE(IIF(UTILIZED_AMT='',NULL,UTILIZED_AMT),',','') AS NUMERIC(30,2))) as Outstanding, SUM(CAST(REPLACE(IIF(ELIG_LIMIT_AMT='',NULL,ELIG_LIMIT_AMT),',','') AS NUMERIC(30,2))) as ELIGIBLE_LIMIT_AMT from NG_FLEET_CREDITLINE_CTF_MSB_GRID WHERE WI_NAME='"+wi_name+"' AND PRODUCT_CODE!='1012' ) TEMP UNION SELECT SUM(CAST(REPLACE(IIF(OUTSTDNG_AMT='',NULL,OUTSTDNG_AMT),',','') AS NUMERIC(30,2))) from NG_FLEET_CREDITLINE_TRASSET_DET_GRID  WHERE WI_NAME='"+wi_name+"' )C ";
		resultfromdb=iformObj.getDataFromDB(query);
		logger.info("Inside pqapprovedAmountAfterSIMAH and query for non_pos_internal_obligation  is"+query+" and its result is "+resultfromdb);
		if(resultfromdb.size()>0)
		{
			if(resultfromdb.get(0).size()==1)
			{
				if(resultfromdb.get(0).get(0).trim()!="" && !resultfromdb.get(0).get(0).equalsIgnoreCase("Null") )
				{
						logger.info("non_pos_internal_obligation from db is "+resultfromdb.get(0).get(0));
						non_pos_internal_obligation=new BigDecimal(resultfromdb.get(0).get(0));
						logger.info("non_pos_internal_obligation is "+non_pos_internal_obligation);
				}
			}
		}
		
		//total_obligation=other_SIMAH_obligation+pos_internal_obligation+non_pos_internal_obligation;
		total_obligation=total_obligation.add(other_SIMAH_obligation);
		total_obligation=total_obligation.add(pos_internal_obligation);
		total_obligation=total_obligation.add(non_pos_internal_obligation);
		
		logger.info("Final value of total_obligation is "+total_obligation);
		
		MathContext m=new MathContext(3);
		//current_dbr=(total_obligation+req_amt_sar)/total_througput;
		if(!total_througput.equals(0))
		{
			
			current_dbr=current_dbr.add(total_obligation);
			logger.info("Step 1 value of dbr is"+current_dbr);
			current_dbr=current_dbr.add(req_amt_sar);
			logger.info("Step 2 value of dbr is "+current_dbr);
			current_dbr=current_dbr.divide(total_througput,m);
			logger.info("Step 3 value of dbr is "+current_dbr);
			current_dbr=current_dbr.multiply(new BigDecimal(100));
			logger.info("Step 4 value of dbr is "+current_dbr);
		}
	
		logger.info("Current DBR is "+current_dbr);
		logger.info("Current DBR after formatting is "+df.format(current_dbr));
		iformObj.setValue("Q_NG_POS_ELIGIBILITY_CRNT_DBR",df.format(current_dbr));
		
		//approved_amt_after_SIMAH=0.40*total_througput-total_obligation;
		approved_amt_after_SIMAH=total_througput.multiply(new BigDecimal("0.40"));
		approved_amt_after_SIMAH=approved_amt_after_SIMAH.subtract(total_obligation);
		
		logger.info("Approved amount after SIMAH is "+approved_amt_after_SIMAH);
		
		BigDecimal zero=new BigDecimal("0");
		
		if(approved_amt_after_SIMAH.compareTo(zero)==-1)
		{
			logger.info("Approved amount after SIMAH is negative hence putting it as 0");
			approved_amt_after_SIMAH=zero;
		}
		

		String pq_approve_amount_string=(String )iformObj.getValue("pq1_approved_amount");
		BigDecimal pq_approve_amount;
		try
		{
			pq_approve_amount=new BigDecimal(pq_approve_amount_string);
		}
		catch(Exception e)
		{
			pq_approve_amount=new BigDecimal(0);
		}
		
		logger.info("PQ1 Approved Amount is "+pq_approve_amount);
		
		logger.info("PQ1 apporved amount is "+pq_approve_amount+" and pq2 amount upto now is "+approved_amt_after_SIMAH+" and their minimum is "+pq_approve_amount.min(approved_amt_after_SIMAH));
	
	
		
		iformObj.setValue("Q_NG_POS_APPLICATION_DATA_APPROVED_LIMIT_AMT_AFTER_SIMAH",String.format("%.2f",pq_approve_amount.min(approved_amt_after_SIMAH)));
		
		
		//Calculating SIMAH Obligation
		query="SELECT SUM(CAST(REPLACE(IIF(UTILIZATION='',NULL,UTILIZATION),',','') AS NUMERIC(30,2))) from NG_FLEET_SIMAH_L1_C1_SUMMARY_GRID WHERE WI_NAME='"+wi_name+"' ";
		resultfromdb=iformObj.getDataFromDB(query);
		logger.info("Inside pqapprovedAmountAfterSIMAH and query for total_SIMAH_obligation is"+query+" and its result is "+resultfromdb);
		if(resultfromdb.size()>0)
		{
			if(resultfromdb.get(0).size()==1)
				{
					if(resultfromdb.get(0).get(0).trim()!="" && !resultfromdb.get(0).get(0).equalsIgnoreCase("Null") )
					{
						logger.info("total_SIMAH_obligation from db is "+resultfromdb.get(0).get(0));
						total_SIMAH_obligation=new BigDecimal(resultfromdb.get(0).get(0));
						logger.info("total_SIMAH_obligation is "+total_SIMAH_obligation);
					}
				}
		}
		iformObj.setValue("Q_NG_POS_ELIGIBILITY_SIMAH_OBLIGATION",String.format("%.2f",total_SIMAH_obligation));
		
		}
		catch(Exception e)
		{
			logger.info("Exception Occurred: calculatepqamountafterSIMAH and exception is "+e);
		}
		return "Success~calculatepqamountafterSIMAH"+approved_amt_after_SIMAH;
	}
	
	private String calculateCurrentDBR(IFormReference iformObj, String stringData)
	{
		BigDecimal total_througput=new BigDecimal(0);
		BigDecimal total_obligation=new BigDecimal(0);
		BigDecimal req_amt_sar=new BigDecimal(0);
		

		//BigDecimal total_obligation=new BigDecimal(0);
		//BigDecimal total_througput=new BigDecimal(0);
		BigDecimal outstanding_principal=new BigDecimal(0);
		BigDecimal funded_utilization=new BigDecimal(0);
		
		BigDecimal other_SIMAH_obligation=new BigDecimal(0);
		BigDecimal total_SIMAH_obligation=new BigDecimal(0);
		BigDecimal pos_internal_obligation=new BigDecimal(0);
		BigDecimal non_pos_internal_obligation=new BigDecimal(0);
		
		String wi_name=getWorkitemName(iformObj);
		String query="SELECT SUM(D.X) FROM( SELECT SUM(CAST(REPLACE(IIF(TOT_THRGPUT_12MNTH='',NULL,TOT_THRGPUT_12MNTH),',','') AS NUMERIC(30,2))) AS X from NG_FLEET_STMTDATA_ACCMOVMNT WHERE WI_NAME='"+wi_name+"' UNION ALL SELECT SUM(CAST(REPLACE(IIF(TOT_THROUGPUT_LAST_12='',NULL,TOT_THROUGPUT_LAST_12),',','') AS NUMERIC(30,2))) AS X from NG_FLEET_STMTDATA_ACCMOVMNT_NON_ARB WHERE WI_NAME='"+wi_name+"') D";
		List<List<String>> resultfromdb=iformObj.getDataFromDB(query);
		logger.info("Inside pqapprovedAmountAfterSIMAH and query for total througput is"+query+" and its result is "+resultfromdb);
		if(resultfromdb.size()>0)
		{
			if(resultfromdb.get(0).size()==1)
			{
				if(resultfromdb.get(0).get(0).trim()!="" && !resultfromdb.get(0).get(0).equalsIgnoreCase("Null") )
				{
					logger.info("other_SIMAH_obligation from db is "+resultfromdb.get(0).get(0));
					total_througput=new BigDecimal(resultfromdb.get(0).get(0));
					logger.info("other_SIMAH_obligationl_obligation is "+total_througput);
				}
			}
		}
		
		//total_througput=temp;
		logger.info("Total 12 month througput is "+total_througput);
			
		try
		{
			query="SELECT SUM(CAST(REPLACE(IIF(UTILIZATION='',NULL,UTILIZATION),',','') AS NUMERIC(30,2))) from NG_FLEET_SIMAH_L1_C1_SUMMARY_GRID WHERE CREDITOR !='RAJB' AND WI_NAME='"+wi_name+"' ";
			resultfromdb=iformObj.getDataFromDB(query);
			logger.info("Inside pqapprovedAmountAfterSIMAH and query for other_SIMAH_obligation is NG_FLEET_SIMAH_L1_C1_SUMMARY_GRID is"+query+" and its result is "+resultfromdb);
			if(resultfromdb.size()>0)
			{
				if(resultfromdb.get(0).size()==1)
				{
					if(resultfromdb.get(0).get(0).trim()!="" && !resultfromdb.get(0).get(0).equalsIgnoreCase("Null") )
					{
						logger.info("other_SIMAH_obligation from db is "+resultfromdb.get(0).get(0));
						other_SIMAH_obligation=new BigDecimal(resultfromdb.get(0).get(0));
						logger.info("other_SIMAH_obligationl_obligation is "+other_SIMAH_obligation);
					}
				}
			}
			
			//Calculating b
			query="SELECT sum(Outstanding) from( SELECT SUM(CAST(REPLACE(IIF(OUTSTDNG_PRINCIPAL='',NULL,OUTSTDNG_PRINCIPAL),',','') AS NUMERIC(30,2))) AS Outstanding from NG_FLEET_CREDITLINE_LOANACC_GRID WHERE WI_NAME='"+wi_name+"' AND PRODUCT='Point of Sale Finance' UNION SELECT IIF(TEMP.Outstanding =0 OR TEMP.Outstanding IS NULL, TEMP.ELIGIBLE_LIMIT_AMT, TEMP.Outstanding) FROM ( SELECT SUM(CAST(REPLACE(IIF(UTILIZED_AMT='',NULL,UTILIZED_AMT),',','') AS NUMERIC(30,2))) as Outstanding, SUM(CAST(REPLACE(IIF(ELIG_LIMIT_AMT='',NULL,ELIG_LIMIT_AMT),',','') AS NUMERIC(30,2))) as ELIGIBLE_LIMIT_AMT from NG_FLEET_CREDITLINE_CTF_MSB_GRID WHERE WI_NAME='"+wi_name+"' AND PRODUCT_CODE='1012' ) TEMP )b";
			resultfromdb=iformObj.getDataFromDB(query);
			logger.info("Inside pqapprovedAmountAfterSIMAH and query for pos_internal_obligation  is"+query+" and its result is "+resultfromdb);
			if(resultfromdb.size()>0)
			{
				if(resultfromdb.get(0).size()==1)
				{
					if(resultfromdb.get(0).get(0).trim()!="" && !resultfromdb.get(0).get(0).equalsIgnoreCase("Null") )
					{
						logger.info("pos_internal_obligation from db is "+resultfromdb.get(0).get(0));
						pos_internal_obligation=new BigDecimal(resultfromdb.get(0).get(0));
						logger.info("pos_internal_obligation is "+pos_internal_obligation);
					}
				}
			}

			//Calculating c
			query="SELECT SUm(Outstanding) from( SELECT SUM(CAST(REPLACE(IIF(OUTSTDNG_PRINCIPAL='',NULL,OUTSTDNG_PRINCIPAL),',','') AS NUMERIC(30,2))) AS Outstanding from NG_FLEET_CREDITLINE_LOANACC_GRID WHERE WI_NAME='"+wi_name+"' AND PRODUCT!='Point of Sale Finance' UNION SELECT IIF(TEMP.Outstanding =0 OR TEMP.Outstanding IS NULL, TEMP.ELIGIBLE_LIMIT_AMT, TEMP.Outstanding) FROM ( SELECT SUM(CAST(REPLACE(IIF(UTILIZED_AMT='',NULL,UTILIZED_AMT),',','') AS NUMERIC(30,2))) as Outstanding, SUM(CAST(REPLACE(IIF(ELIG_LIMIT_AMT='',NULL,ELIG_LIMIT_AMT),',','') AS NUMERIC(30,2))) as ELIGIBLE_LIMIT_AMT from NG_FLEET_CREDITLINE_CTF_MSB_GRID WHERE WI_NAME='"+wi_name+"' AND PRODUCT_CODE!='1012' ) TEMP UNION SELECT SUM(CAST(REPLACE(IIF(OUTSTDNG_AMT='',NULL,OUTSTDNG_AMT),',','') AS NUMERIC(30,2))) from NG_FLEET_CREDITLINE_TRASSET_DET_GRID  WHERE WI_NAME='"+wi_name+"' )C ";
			resultfromdb=iformObj.getDataFromDB(query);
			logger.info("Inside pqapprovedAmountAfterSIMAH and query for non_pos_internal_obligation  is"+query+" and its result is "+resultfromdb);
			if(resultfromdb.size()>0)
			{
				if(resultfromdb.get(0).size()==1)
				{
					if(resultfromdb.get(0).get(0).trim()!="" && !resultfromdb.get(0).get(0).equalsIgnoreCase("Null") )
					{
							logger.info("non_pos_internal_obligation from db is "+resultfromdb.get(0).get(0));
							non_pos_internal_obligation=new BigDecimal(resultfromdb.get(0).get(0));
							logger.info("non_pos_internal_obligation is "+non_pos_internal_obligation);
					}
				}
			}
			
			//total_obligation=other_SIMAH_obligation+pos_internal_obligation+non_pos_internal_obligation;
			total_obligation=total_obligation.add(other_SIMAH_obligation);
			total_obligation=total_obligation.add(pos_internal_obligation);
			total_obligation=total_obligation.add(non_pos_internal_obligation);
			
			logger.info("Final value of total_obligation is "+total_obligation);

		}
		catch (Exception e)
		{
			total_obligation=new BigDecimal(0);
		}
		
		String requested_amt=(String )iformObj.getValue("Q_NG_POS_APPLICATION_DATA_REQ_AMNT_SAR");
		try
		{
			req_amt_sar=new BigDecimal(requested_amt);
		}
		catch(Exception e)
		{
			req_amt_sar=new BigDecimal(0);
		}
		MathContext m=new MathContext(3);
		//current_dbr=(total_obligation+req_amt_sar)/total_througput;
		BigDecimal zero=new BigDecimal("0");
		BigDecimal current_dbr=new BigDecimal(0);
		if(!total_througput.equals(0))
		{
			current_dbr=current_dbr.add(total_obligation);
			logger.info("Step 1 value of dbr is"+current_dbr);
			current_dbr=current_dbr.add(req_amt_sar);
			logger.info("Step 2 value of dbr is "+current_dbr);
			current_dbr=current_dbr.divide(total_througput,m);
			logger.info("Step 3 value of dbr is "+current_dbr);
			current_dbr=current_dbr.multiply(new BigDecimal(100));
			logger.info("Step 4 value of dbr is "+current_dbr);
		}
		
		logger.info("Current DBR is "+current_dbr+" and after roundoff value is "+String.format("%.2f",current_dbr));
		
		
		iformObj.setValue("Q_NG_POS_ELIGIBILITY_CRNT_DBR",String.format("%.2f",current_dbr));
		
		return "";
	}

	private String AddRelatedPartyPQ(IFormReference iformObj, String stringData) {
		logger.info("Inside AddRelatedPartyPQ stringData :"+stringData);
        String eligibility=callProcedurewithreturn(iformObj, "[NG_calculate_limit_PQ1]", getWorkitemName(iformObj).toString());
        logger.info("eligibility:"+eligibility);
        iformObj.setValue("pq1_approved_amount", eligibility.split("~")[0].replace("[[", "").replace("[", "").replace("]", ""));
        if(eligibility.split("~").length==3)
        	iformObj.setValue("PQ1_AMOUNT_WITH_EXCEPTION", eligibility.split("~")[1].replace("[[", "").replace("[", "").replace("]", ""));
        else
        	iformObj.setValue("PQ1_AMOUNT_WITH_EXCEPTION","0.00");
        return "Success~AddRelatedPartyPQ";
 }


	private String defaultcampaign(IFormReference iformObj, String stringdata) 
	{
		try 
		{
		
		String query="";
		List<List> result_list=null;
		if(((String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_CAMPAIGN")).length()==0)
		{
			//Start Edit by Deepak Goyal
			//query="SELECT CAMPAIGN FROM NG_MAST_CAMPAIGN WHERE ISACTIVE='Y' ";
			query="SELECT CAMPAIGN FROM NG_MAST_CAMPAIGN WHERE getdate() between start_date and end_date ";
			//End Edit by Deepak Goyal
			result_list=iformObj.getDataFromDB(query);
			logger.info("For default campaing query is "+query+" and its result is "+result_list);
			if(result_list.size()>0)
			{
				if(result_list.size()==1)
				{
					logger.info("case1: Inside defaultcampaign: Setting default value of campaign as "+result_list.get(0).get(0));
					iformObj.setValue("Q_NG_POS_APPLICATION_DATA_CAMPAIGN",(String)result_list.get(0).get(0));
				}
				else
				{
					logger.info("case 2: Inside defaultcampaign: Setting default value of campaign as "+result_list.get(result_list.size()-1).get(0));
					iformObj.setValue("Q_NG_POS_APPLICATION_DATA_CAMPAIGN",(String)result_list.get(result_list.size()-1).get(0));
				}
			}
		}
		
		String product_category=(String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_PRODUCT_CATEGORY");
		String customer_category=(String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_CUSTOMER_CATEGORY");
		String request_type=(String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_REQUEST_TYPE");
		String campaign=(String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_CAMPAIGN");
		String requested_amt=(String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_REQ_AMNT_SAR");
		
		String default_profit_rate="",def_tenure="",def_grace_period="",def_grace_period_captialization="";
		query="SELECT Def_Profit_Rate,Max_Tenure,GRACE_PERIOD,GRACE_PERIOD_CAPITALIZATION FROM NG_MAST_POS_PRODUCT A,NG_MAST_POS_FEE B WHERE A.FeeID=B.Fees_ID AND a.CustCategoryID=b.Scheme_ID AND A.Product=(SELECT CODE FROM NG_MAST_PRODUCT WHERE PRODUCT_CATEGORY = '"+product_category+"') AND a.custcategoryID=(SELECT CODE FROM NG_MAST_CUSTOMER WHERE customer_CATEGORY = '"+customer_category+"') AND a.request_type='"+request_type+"' AND a.campaign='"+campaign+"' AND a.max_amount>="+requested_amt+" AND a.min_amount<="+requested_amt+" ";
		result_list=iformObj.getDataFromDB(query);
		logger.info("Query for default profit,tenure,grace period is "+query+" and result is "+result_list);
		if(result_list.size()>0 )
		{
			if(result_list.get(0).size()==4)
			{
				logger.info("Size of result list is 4");
				default_profit_rate=(String) result_list.get(0).get(0);
				def_tenure=(String) result_list.get(0).get(1);
				def_grace_period=(String) result_list.get(0).get(2);
				def_grace_period_captialization=(String) result_list.get(0).get(3);
			}
		}
		
		logger.info("Setting values for default profit,tenure,grace period based on condition");
		
		logger.info("Value of Q_NG_POS_APPLICATION_DATA_PROFIT is "+iformObj.getValue("Q_NG_POS_APPLICATION_DATA_PROFIT"));
		logger.info("Value of Q_NG_POS_APPLICATION_DATA_TENURE is "+iformObj.getValue("Q_NG_POS_APPLICATION_DATA_TENURE"));
		logger.info("Value of Q_NG_POS_APPLICATION_DATA_GRACE_PERIOD is "+iformObj.getValue("Q_NG_POS_APPLICATION_DATA_GRACE_PERIOD"));
		logger.info("Value of Q_NG_POS_APPLICATION_DATA_GRACE_PRD_CAPITALIZATION is "+iformObj.getValue("Q_NG_POS_APPLICATION_DATA_GRACE_PRD_CAPITALIZATION"));
		
		if(((String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_PROFIT")).trim().equals("") || ((String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_PROFIT")).equals("0") ||  ((String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_PROFIT")).equals("0.0") )
		{
			logger.info("Setting Q_NG_POS_APPLICATION_DATA_PROFIT" + default_profit_rate);
			if(default_profit_rate.trim()!="" && default_profit_rate.trim()!=null)	
				iformObj.setValue("Q_NG_POS_APPLICATION_DATA_PROFIT", default_profit_rate);
		}
		if(((String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_PROPOSED_PROFIT")).trim().equals("") || ((String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_PROPOSED_PROFIT")).equals("0") ||  ((String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_PROPOSED_PROFIT")).equals("0.0") )
		{
			logger.info("Setting Q_NG_POS_APPLICATION_DATA_PROPOSED_PROFIT" + default_profit_rate);
			if(default_profit_rate.trim()!="" && default_profit_rate.trim()!=null)
			{
				iformObj.addItemInCombo("Q_NG_POS_APPLICATION_DATA_PROPOSED_PROFIT", default_profit_rate,default_profit_rate);
				iformObj.setValue("Q_NG_POS_APPLICATION_DATA_PROPOSED_PROFIT", default_profit_rate);
			}
		}
		if(((String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_TENURE")).trim().equals(""))
		{
			logger.info("Setting Q_NG_POS_APPLICATION_DATA_TENURE"+ def_tenure);
			if(def_tenure.trim()!="" && def_tenure.trim()!=null)
			{
				//iformObj.setValue("Q_NG_POS_APPLICATION_DATA_TENURE", def_tenure);
				//Commenting this because if we set default tenure, then need some logic to calculate fees 
				//as, it is calculated on change of tenure. 
			}
				
		}
		if(((String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_GRACE_PERIOD")).trim().equals("") || true) // Always set grace period acc to product master
		{
			
			if(def_grace_period.trim()!=null && def_grace_period.trim().equalsIgnoreCase("Yes"))
			{	
				logger.info("Setting Q_NG_POS_APPLICATION_DATA_GRACE_PERIOD" + def_grace_period);
				iformObj.setValue("Q_NG_POS_APPLICATION_DATA_GRACE_PERIOD", def_grace_period.trim());
				iformObj.setStyle("Q_NG_POS_APPLICATION_DATA_GRACE_IN_MONTH","disable","false");
			}
			else
			{
				iformObj.setStyle("Q_NG_POS_APPLICATION_DATA_GRACE_IN_MONTH","disable","true");
				iformObj.setValue("Q_NG_POS_APPLICATION_DATA_GRACE_IN_MONTH", "");
			}
			
		}
		if(((String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_GRACE_PRD_CAPITALIZATION")).trim().equals(""))
		{
			logger.info("Setting Q_NG_POS_APPLICATION_DATA_GRACE_PRD_CAPITALIZATION"+ def_grace_period_captialization);
			if(def_grace_period_captialization.trim()!="" && def_grace_period_captialization.trim()!=null)
			iformObj.setValue("Q_NG_POS_APPLICATION_DATA_GRACE_PRD_CAPITALIZATION", def_grace_period_captialization);
		}
		
		}
		catch(Exception e)
		{
			logger.info("Exception occurred in defaultcampaign and exception is "+e);
		}
		
		return "Success~defaultcampaign";
	}

	private String SiteVisitChecklist(IFormReference iformObj, String stringdata) 
	{
		// TODO Auto-generated method stub
		logger.info("Inside Location Visit grid");
		JSONArray arr = new JSONArray();
		String query="SELECT SR_NO,ITEM_DESC,ITEM_CONFIRMATION FROM NG_MAST_SITEVISIT_CHECKLIST";
		String field_list="S. No.,Checklist,Value Confirmation,Description/Answer";
		String[] field_list_array=field_list.split(",");
		List<List<String>> jsonresult = iformObj.getDataFromDB(query);
		logger.info("the query is \n"+query+"\n field list array is \n"+field_list_array+"\n"+jsonresult);
		for (List<String> internal_list : jsonresult) 
			{
				JSONObject internal_object=null;
				internal_object=new JSONObject();
				for(int i=0;i<internal_list.size();i++)
					{
						internal_object.put(field_list_array[i],internal_list.get(i));
					}
				arr.add(internal_object);
			}
		logger.info("object array is"+arr.toString());
		iformObj.addDataToGrid("table10059_table48", arr);
		return "Success~SiteVisitChecklist";
	}
	
	private String RelatedPartyHiddenRowSet(IFormReference iformObj, String stringdata)
	{
		logger.info("Inside BuyAndContractOnLoad function and strin data is "+stringdata);
		//2#3#checked 1#2#unchecked
		String row_index=null,checked_unchecked_flag=null,column_index=null;
		if(stringdata.contains("#"))
		{
			row_index=stringdata.split("#")[0];
			column_index=stringdata.split("#")[1];
			checked_unchecked_flag=stringdata.split("#")[2];
			
			logger.info("rowindex,column_index and checked unchecked flag is  "+row_index+", "+column_index+", "+checked_unchecked_flag);
		}
		JSONArray jarr=iformObj.getDataFromGrid("MSB_SEARCH_ROLE_GRID");
		iformObj.setTableCellValue("MSB_SEARCH_ROLE_GRID",Integer.parseInt(row_index),Integer.parseInt(column_index),checked_unchecked_flag);	
		logger.info("Json array after changes for  MSB_SEARCH_ROLE_GRID is "+jarr);
		return "Success~RelatedPartyHiddenRowSet";
	}
	
	private String subFormTest(IFormReference iformObj, String stringdata)
	{
		iformObj.setValue("SIMAH_IND_PROVIDED_ENQUIRY_REFERENCE","0031412623");
		return "sucess~subFormTest";
		
	}
	
	private String subFormLoadSIMAHCommercial(IFormReference iformObj, String stringdata) 
	{
		logger.info("Inside subFormCalled and cr_number is "+stringdata);
		String cr_number=stringdata;
		String field_list="SIMAH_COMM_SERVICE,SIMAH_COMM_ACTION,SIMAH_COMM_MEMBER_ID,SIMAH_COMM_USER_ID,SIMAH_COMM_RUN_NO,SIMAH_COMM_TOTAL_ITEMS,SIMAH_COMM_ERROR_ITEMS,SIMAH_COMM_REPORT_DATE_GR,SIMAH_COMM_REPORT_DATE_HJ,SIMAH_COMM_ENQUIRY_TYPE,SIMAH_COMM_ENQUIRY_NO,SIMAH_COMM_REFERENCE_NO,SIMAH_COMM_AMOUNT,SIMAH_COMM_GOVERNMENT_GUARANTEED,SIMAH_COMM_PRODUCT_TYPE,SIMAH_COMM_CREDIT_FACILITY,SIMAH_COMM_PREVIOUS_ENQUIRY_CNT,SIMAH_COMM_PREVIOUS_30_DAYS_DENQ_CNT,SIMAH_COMM_CI_COUNT,SIMAH_COMM_GUARANTEED_CI_COUNT,SIMAH_COMM_ISSUE_DATE,SIMAH_COMM_TOTAL_LIMITS,SIMAH_COMM_TOTAL_GUI_LIMITS,SIMAH_COMM_TOTAL_LIABILITIES,SIMAH_COMM_TOTAL_DEFAULTS,SIMAH_COMM_CURRENT_DEL_BAL,SIMAH_COMM_UNSETTLED_DEFAULT_COUNT,SIMAH_COMM_SETTLED_DEFAULT_COUNT,SIMAH_COMM_UNSETTLED_DEFAULTS_AMT,SIMAH_COMM_UNSETTLED_BC_COUNT,SIMAH_COMM_SETTLED_BC_COUNT,SIMAH_COMM_UNSETTLED_BC_AMOUNT,SIMAH_COMM_O_30_OVER,SIMAH_COMM_O_60_OVER,SIMAH_COMM_O_90_OVER,SIMAH_COMM_O_120_OVER,SIMAH_COMM_O_150_OVER,SIMAH_COMM_O_180_OVER,SIMAH_COMM_TC_30_OVER,SIMAH_COMM_TC_60_OVER,SIMAH_COMM_TC_90_OVER,SIMAH_COMM_TC_120_OVER,SIMAH_COMM_TC_150_OVER,SIMAH_COMM_TC_180_OVER,SIMAH_COMM_PDB_30_OVER,SIMAH_COMM_PDB_60_OVER,SIMAH_COMM_PDB_90_OVER,SIMAH_COMM_PDB_120_OVER,SIMAH_COMM_PDB_150_OVER,SIMAH_COMM_PDB_180_OVER,SIMAH_COMM_DISCLAIMER_ENG,SIMAH_COMM_DISCLAIMER_AR,SIMAH_COMM_CIC_NO,SIMAH_COMM_CHECKED_DATE,SIMAH_COMM_NAME,SIMAH_COMM_NAME_AR,SIMAH_COMM_C_DATE,SIMAH_COMM_PREVIOUS_NAME,SIMAH_COMM_PERVIOUS_NAME_AR,SIMAH_COMM_ISSUER,SIMAH_COMM_ISSUER_DESCRIPT,SIMAH_COMM_ISSUER_DESCRIPT_AR,SIMAH_COMM_IDCOD,SIMAH_COMM_ISSCIT,SIMAH_COMM_ISSCIT_DESCRIPT,SIMAH_COMM_ISSCIT_DESCRIPT_AR,SIMAH_COMM_EXPIRY_DATE,SIMAH_COMM_LEGAL_FORM,SIMAH_COMM_DATE_ESTABLISHED,SIMAH_COMM_BUSINESS_ACTIVITY,SIMAH_COMM_WEBSITE,SIMAH_COMM_NO_OF_STAFF,SIMAH_COMM_GENDER,SIMAH_COMM_DOB,SIMAH_COMM_NATIONALITY";
		String field_list_array[];
		field_list_array=field_list.split(",");
		String query="SELECT SERVICE,ACTION,MEMBER_ID,USER_ID,RUN_NO,TOTAL_ITEMS,ERROR_ITEMS,REPORT_DATE_GR,REPORT_DATE_HJ,ENQUIRY_TYPE,ENQUIRY_NO,REFERENCE_NO,AMOUNT,GOVERNMENT_GUARANTEED,PRODUCT_TYPE,CREDIT_FACILITY,PREVIOUS_ENQUIRY_CNT,PREVIOUS_30_DAYS_DENQ_CNT,CI_COUNT,GUARANTEED_CI_COUNT,ISSUE_DATE,TOTAL_LIMITS,TOTAL_GUI_LIMITS,TOTAL_LIABILITIES,TOTAL_DEFAULTS,CURRENT_DEL_BAL,UNSETTLED_DEFAULT_COUNT,SETTLED_DEFAULT_COUNT,UNSETTLED_DEFAULTS_AMT,UNSETTLED_BC_COUNT,SETTLED_BC_COUNT,UNSETTLED_BC_AMOUNT,O_30_OVER,O_60_OVER,O_90_OVER,O_120_OVER,O_150_OVER,O_180_OVER,TC_30_OVER,TC_60_OVER,TC_90_OVER,TC_120_OVER,TC_150_OVER,TC_180_OVER,PDB_30_OVER,PDB_60_OVER,PDB_90_OVER,PDB_120_OVER,PDB_150_OVER,PDB_180_OVER,DISCLAIMER_ENG,DISCLAIMER_AR,CIC_NO,CHECKED_DATE,NAME,NAME_AR,C_DATE,PREVIOUS_NAME,PERVIOUS_NAME_AR,ISSUER,ISSUER_DESCRIPT,ISSUER_DESCRIPT_AR,IDCOD,ISSCIT,ISSCIT_DESCRIPT,ISSCIT_DESCRIPT_AR,EXPIRY_DATE,LEGAL_FORM,DATE_ESTABLISHED,BUSINESS_ACTIVITY,WEBSITE,NO_OF_STAFF,GENDER,DOB,NATIONALITY from NG_FLEET_SIMAH_RP_BASIC_DETAILS WHERE CR_NO ='"+cr_number+"'";
		List<List<String>> result= iformObj.getDataFromDB(query);	
		logger.info("Query for SIMAH COMMERCIAL one-one field is  "+query+" and its result is "+result);
		for(List<String> internal_list: result  )
		{
			logger.info("Internal List is "+internal_list);
			for(int i=0;i<internal_list.size();i++)
			{
				logger.info("Setting values as "+field_list_array[i]+" in "+internal_list.get(i));
				iformObj.setValue(field_list_array[i],internal_list.get(i));
			}
		}
		logger.info("After inserting in one to one field");
		
		//SIMAH_RP_PREVIOUS_ENQUIRIES_GRID
		JSONArray arr = new JSONArray();
		query="SELECT ENQUIRY_DATE,ENQUIRER,ENQUIRY_TYPE,MEMBER_REFERENCE,PRODUCT_TYPE,AMOUNT,NAME from NG_FLEET_SIMAH_RP_PREVIOUS_ENQUIRIES_GRID WHERE CR_NO='"+cr_number+"' ";
		field_list="Enquiry Date,Enquirer,Enquiry Type,Member Reference,Product Type,Amount,Name";
		field_list_array=field_list.split(",");
		result = iformObj.getDataFromDB(query);
		for (List<String> internal_list : result) 
		{
			JSONObject internal_object=null;
			internal_object=new JSONObject();
			for(int i=0;i<internal_list.size();i++)
			{
				internal_object.put(field_list_array[i],internal_list.get(i));
			}
			arr.add(internal_object);
		}
		iformObj.addDataToGrid("SIMAH_RP_PREVIOUS_ENQUIRIES_GRID", arr);
		logger.info("After SIMAH_RP_PREVIOUS_ENQUIRIES_GRID is "+arr);
		
		//SIMAH_RP_CONTACT_DETAILS_GRID
		arr = new JSONArray();
		query="SELECT PHONE_TYPE,COUNTRY,PREFIX,CONTACT_NUMBER,EXTENSION,UNFORMATED_CONTACT from NG_FLEET_SIMAH_RP_CONTACT_DETAILS_GRID WHERE CR_NO='"+cr_number+"' ";
		field_list="Phone Type,Country,Prefix,Number,Extension,Unformatted Contact";
		field_list_array=field_list.split(",");
		result = iformObj.getDataFromDB(query);
		for (List<String> internal_list : result) 
		{
			JSONObject internal_object=null;
			internal_object=new JSONObject();
			for(int i=0;i<internal_list.size();i++)
			{
				internal_object.put(field_list_array[i],internal_list.get(i));
			}
			arr.add(internal_object);
		}		
		iformObj.addDataToGrid("SIMAH_RP_CONTACT_DETAILS_GRID", arr);
		logger.info("After SIMAH_RP_CONTACT_DETAILS_GRID is "+arr);
		
		//SIMAH_RP_AS_NARRATIVE_GRID
		arr = new JSONArray();
		query="SELECT NARRATIVE_TYPE,DATE_LOADED,LOADED_BY,TEXT_ENG,TEXT_AR from NG_FLEET_SIMAH_RP_AS_NARRATIVE_GRID WHERE CR_NO='"+cr_number+"' ";
		field_list="Type,Date Loaded,Loaded By,Text,Text (Ar)";
		field_list_array=field_list.split(",");
		result = iformObj.getDataFromDB(query);
		for (List<String> internal_list : result) 
		{
			JSONObject internal_object=null;
			internal_object=new JSONObject();
			for(int i=0;i<internal_list.size();i++)
			{
				internal_object.put(field_list_array[i],internal_list.get(i));
			}
			arr.add(internal_object);
		}		
		iformObj.addDataToGrid("SIMAH_RP_AS_NARRATIVE_GRID", arr);
		logger.info("After SIMAH_RP_AS_NARRATIVE_GRID is "+arr);
		
		//SIMAH_RP_ADDRESS_DETAILS_GRID
		arr = new JSONArray();
		query="SELECT ADDRESS_LINE_1_ENG,ADDRESS_LINE_2_ENG,ADDRESS_LINE_3_ENG,ADDRESS_LINE_4_ENG,PO_BOX,CITY,POSTAL_CODE,EXTRA_NUMBER,DATE_OF_UPLOAD from NG_FLEET_SIMAH_RP_ADDRESS_DETAILS_GRID WHERE CR_NO='"+cr_number+"' ";
		field_list="Address Line 1 (Eng),Address Line 2 (Eng),Address Line 3 (Eng),Address Line 4 (Eng),PO Box,City,Post Code,Extra Number,Date of Upload";
		field_list_array=field_list.split(",");
		result = iformObj.getDataFromDB(query);
		for (List<String> internal_list : result) 
		{
			JSONObject internal_object=null;
			internal_object=new JSONObject();
			for(int i=0;i<internal_list.size();i++)
			{
				internal_object.put(field_list_array[i],internal_list.get(i));
			}
			arr.add(internal_object);
		}		
		iformObj.addDataToGrid("SIMAH_RP_ADDRESS_DETAILS_GRID", arr);
		logger.info("After SIMAH_RP_ADDRESS_DETAILS_GRID is "+arr);
		
		//SIMAH_RP_DEFAULTS_GRID
		arr = new JSONArray();
		query="SELECT PRODUCT_TYPE,CREDITOR,ACCOUNT_NO,DATE_LOADED,ORIGINAL_AMT,OS_BALANCE,DEFAULT_STATUS,SETTLEMENT_DATE from NG_FLEET_SIMAH_RP_DEFAULTS_GRID WHERE CR_NO='"+cr_number+"' ";
		field_list="Product Type,Creditor,Account Number,Date Loaded,Original Amount,OS Balance,Default Status,Settlement Date";
		field_list_array=field_list.split(",");
		result = iformObj.getDataFromDB(query);
		for (List<String> internal_list : result) 
		{
			JSONObject internal_object=null;
			internal_object=new JSONObject();
			for(int i=0;i<internal_list.size();i++)
			{
				internal_object.put(field_list_array[i],internal_list.get(i));
			}
			arr.add(internal_object);
		}		
		iformObj.addDataToGrid("SIMAH_RP_DEFAULTS_GRID", arr);
		logger.info("After SIMAH_RP_DEFAULTS_GRID is "+arr);
		
		//SIMAH_RP_GUARAN_KEY_STAKEHOLDER_GRID
		arr = new JSONArray();
		query="SELECT G_MEMBER,GUARANTOR_NAME_ENG,GUARANTOR_NAME_AR,ID_NUMBER,ID_ISSUER,ID_CITY,G_AMOUNT from NG_FLEET_SIMAH_RP_GUARAN_KEY_STAKEHOLDER_GRID WHERE CR_NO='"+cr_number+"' ";
		field_list="G Member,Guarantor Name (Eng),Guarantor Name (Ar),ID Number,ID Issuer,ID City,G Amount";
		field_list_array=field_list.split(",");
		result = iformObj.getDataFromDB(query);
		for (List<String> internal_list : result) 
		{
			JSONObject internal_object=null;
			internal_object=new JSONObject();
			for(int i=0;i<internal_list.size();i++)
			{
				internal_object.put(field_list_array[i],internal_list.get(i));
			}
			arr.add(internal_object);
		}		
		iformObj.addDataToGrid("SIMAH_RP_GUARAN_KEY_STAKEHOLDER_GRID", arr);
		logger.info("After SIMAH_RP_GUARAN_KEY_STAKEHOLDER_GRID is "+arr);
		
		//SIMAH_RP_JUDGEMENT_GRID
		arr = new JSONArray();
		query="SELECT ENFORCE_DATE,RES_NUMBER,COURT_DATE,CASE_NUMBER,DATE_LOADED,ORIGINAL_CLAIM_AMOUNT,JUDGEMENT_STATUS,SETTLEMENT_DATE from NG_FLEET_SIMAH_RP_JUDGEMENT_GRID WHERE CR_NO='"+cr_number+"' ";
		field_list="Enforce Date,Res. Number,Court Date,Case Number,Date Loaded,Original Claim Amount,Status,Settlement Date";
		field_list_array=field_list.split(",");
		result = iformObj.getDataFromDB(query);
		for (List<String> internal_list : result) 
		{
			JSONObject internal_object=null;
			internal_object=new JSONObject();
			for(int i=0;i<internal_list.size();i++)
			{
				internal_object.put(field_list_array[i],internal_list.get(i));
			}
			arr.add(internal_object);
		}		
		iformObj.addDataToGrid("SIMAH_RP_JUDGEMENT_GRID", arr);
		logger.info("After SIMAH_RP_JUDGEMENT_GRID is "+arr);
		
		//SIMAH_RP_KEY_STAKEHOLDER_GRID
		arr = new JSONArray();
		query="SELECT NAME,NAME_U,NAME_ENG,NAME_AR,ID_NO,ID_ISSUER,CITY,RELATIONSHIP,RELATIONSHIP_AR,RELATIONSHIP_CODE,RELATIONSHIP_DESCRIPT,RELATIONSHIP_DESCRIPT_AR,PERCENTAGE_OWNED from NG_FLEET_SIMAH_RP_KEY_STAKEHOLDER_GRID WHERE CR_NO='"+cr_number+"' ";
		field_list="Name,Name U,Name (Eng),Name (Ar),ID Number,ID Issuer,ID City,Relationship,Relationship (Ar),Relationship Code,Relationship Description,Relationship Description (Ar),Percentage Owned";
		field_list_array=field_list.split(",");
		result = iformObj.getDataFromDB(query);
		for (List<String> internal_list : result) 
		{
			JSONObject internal_object=null;
			internal_object=new JSONObject();
			for(int i=0;i<internal_list.size();i++)
			{
				internal_object.put(field_list_array[i],internal_list.get(i));
			}
			arr.add(internal_object);
		}		
		iformObj.addDataToGrid("SIMAH_RP_KEY_STAKEHOLDER_GRID", arr);
		logger.info("After SIMAH_RP_KEY_STAKEHOLDER_GRID is "+arr);
		
		//SIMAH_RP_L1_C1_SUMMARY_GRID
		arr = new JSONArray();
		query="SELECT CREDITOR,APPROVED_LIMIT,GLOBAL_LIMIT,UTILIZATION,UN_UTILIZED_BALANCE,MEMBER_STATUS,PAST_DUE,COLLATERAL,RELATIONSHIP_AGE,AS_OF_DATE,FUNDED_LIMIT,FUNDED_CAP,FUNDED_UTILIZATION,FUNDED_UTILIZATION_BALANCE,NON_FUNDED_LIMIT,NON_FUNDED_CAP,NON_FUNDED_UTILIZATION,NON_FUNDED_UN_UTILIZED_BALANCE,SHARED_LIMIT from NG_FLEET_SIMAH_RP_L1_C1_SUMMARY_GRID WHERE CR_NO='"+cr_number+"' ";
		field_list="Creditor,Approved Limit,Global Limit,Utilization,Un-Utilized Balance,Status,Past Due,Collateral,Relationship Age,As of Date,Funded Limit,Funded Cap,Funded Utilization,Funded Unutilized Balance,Non Funded Limit,Non Funded  Cap,Non Funded Utilization,Non Funded Unutilized Balance,Shared Limit";
		field_list_array=field_list.split(",");
		result = iformObj.getDataFromDB(query);
		for (List<String> internal_list : result) 
		{
			JSONObject internal_object=null;
			internal_object=new JSONObject();
			for(int i=0;i<internal_list.size();i++)
			{
				internal_object.put(field_list_array[i],internal_list.get(i));
			}
			arr.add(internal_object);
		}		
		iformObj.addDataToGrid("SIMAH_RP_L1_C1_SUMMARY_GRID", arr);
		logger.info("After SIMAH_RP_L1_C1_SUMMARY_GRID is "+arr);
		
		//SIMAH_RP_L2_C1_SUMMARY_GRID
		arr = new JSONArray();
		query="SELECT CREDITOR,APPROVED_LIMIT,GLOBAL_LIMIT,UTILIZATION,UN_UTILIZED_BALANCE,MEMBER_STATUS,PAST_DUE,COLLATERAL,RELATIONSHIP_AGE,AS_OF_DATE,FUNDED_LIMIT,FUNDED_CAP,FUNDED_UTILIZATION,FUNDED_UTILIZATION_BALANCE,NON_FUNDED_LIMIT,NON_FUNDED_CAP,NON_FUNDED_UTILIZATION,NON_FUNDED_UN_UTILIZED_BALANCE,SHARED_LIMIT from NG_FLEET_SIMAH_RP_L2_C1_SUMMARY_GRID WHERE CR_NO='"+cr_number+"' ";
		field_list="Creditor,Approved Limit,Global Limit,Utilization,Un-Utilized Balance,Status,Past Due,Collateral,Relationship Age,As of Date,Funded Limit,Funded Cap,Funded Utilization,Funded Unutilized Balance,Non Funded Limit,Non Funded  Cap,Non Funded Utilization,Non Funded Unutilized Balance,Shared Limit";
		field_list_array=field_list.split(",");
		result = iformObj.getDataFromDB(query);
		for (List<String> internal_list : result) 
		{
			JSONObject internal_object=null;
			internal_object=new JSONObject();
			for(int i=0;i<internal_list.size();i++)
			{
				internal_object.put(field_list_array[i],internal_list.get(i));
			}
			arr.add(internal_object);
		}		
		iformObj.addDataToGrid("SIMAH_RP_L2_C1_SUMMARY_GRID", arr);
		logger.info("After SIMAH_RP_L2_C1_SUMMARY_GRID is "+arr);
		
		//SIMAH_RP_RATING_GRID
		arr = new JSONArray();
		query="SELECT RATING_DATE,BANK_NAME,UPDATED_DATE,RATING_CODE,RATING_DESCRIPT,RATING_DESCRIPT_AR from NG_FLEET_SIMAH_RP_RATING_GRID WHERE CR_NO='"+cr_number+"' ";
		field_list="Rating Date,Bank Name, Updated Date,Rating Code,Rating Description,Rating Description (Ar)";
		field_list_array=field_list.split(",");
		result = iformObj.getDataFromDB(query);
		for (List<String> internal_list : result) 
		{
			JSONObject internal_object=null;
			internal_object=new JSONObject();
			for(int i=0;i<internal_list.size();i++)
			{
				internal_object.put(field_list_array[i],internal_list.get(i));
			}
			arr.add(internal_object);
		}		
		iformObj.addDataToGrid("SIMAH_RP_RATING_GRID", arr);
		logger.info("After SIMAH_RP_RATING_GRID is "+arr);
		
		//SIMAH_RP_BOUNCED_CHEQUES_GRID
		arr = new JSONArray();
		query="SELECT REGISTRATION_DATE,REPORTING_BANK,LOAD_DATE,REFERENCE_NO,AMOUNT,DEFAULT_STATUS,SETTLEMENT_DATE,BCHQRSCD from NG_FLEET_SIMAH_RP_BOUNCED_CHEQUES_GRID WHERE CR_NO='"+cr_number+"' ";
		field_list="Registration Date,Reporting Bank,Load Date,Reference Number,Amount,Default Status,Settlement Date,BCHQRSCD";
		field_list_array=field_list.split(",");
		result = iformObj.getDataFromDB(query);
		for (List<String> internal_list : result) 
		{
			JSONObject internal_object=null;
			internal_object=new JSONObject();
			for(int i=0;i<internal_list.size();i++)
			{
				internal_object.put(field_list_array[i],internal_list.get(i));
			}
			arr.add(internal_object);
		}		
		iformObj.addDataToGrid("SIMAH_RP_BOUNCED_CHEQUES_GRID", arr);
		logger.info("After SIMAH_RP_BOUNCED_CHEQUES_GRID is "+arr);		
				
		return "success~subFormLoadSIMAHCommercial";
	}
	
	private String subFormLoadSIMAH(IFormReference iformObj, String stringdata) 
	{
		logger.info("Inside subFormCalled");
		String cic_number=stringdata;
		String field_list="SIMAH_IND_PROVIDED_ENQUIRY_REFERENCE,SIMAH_IND_PROVIDED_ENQUIRY_TYPE,SIMAH_IND_PROVIDED_NO_OF_APPLICANTS,SIMAH_IND_PROVIDED_ACCOUNT_TYPE,SIMAH_IND_PROVIDED_REPORT_DATE,SIMAH_IND_PROVIDED_ENQUIRY_NO,SIMAH_IND_PROVIDED_PRODUCT_TYPE,SIMAH_IND_PROVIDED_AMOUNT,SIMAH_IND_PROVIDED_MBR_TYPE,SIMAH_IND_PROVIDED_MBR_STS,SIMAH_IND_PROVIDED_CAPL,SIMAH_IND_PROVIDED_CID1,SIMAH_IND_PROVIDED_CID2,SIMAH_IND_PROVIDED_CID3,SIMAH_IND_PROVIDED_CVIP,SIMAH_IND_PROVIDED_PCNMFA,SIMAH_IND_PROVIDED_PCNM1A,SIMAH_IND_PROVIDED_PCDOB,SIMAH_IND_PROVIDED_PCGND,SIMAH_IND_PROVIDED_PCMAR,SIMAH_IND_PROVIDED_PCNAT,SIMAH_IND_PROVIDED_PCEML,SIMAH_IND_PROVIDED_ACNMFA,SIMAH_IND_PROVIDED_ACNM1A,SIMAH_IND_PROVIDED_ACNM2A,SIMAH_IND_PROVIDED_ACNM3A,SIMAH_IND_PROVIDED_ACDOB,SIMAH_IND_PROVIDED_ACGND,SIMAH_IND_PROVIDED_ACMAR,SIMAH_IND_PROVIDED_ACNAT,SIMAH_IND_PROVIDED_ACEML,SIMAH_IND_PROVIDED_CNT_PE,SIMAH_IND_PROVIDED_CNT_MTDE,SIMAH_IND_PROVIDED_CNT_CI,SIMAH_IND_PROVIDED_CNT_GCI,SIMAH_IND_PROVIDED_CNT_DEF,SIMAH_IND_PROVIDED_EIID,SIMAH_IND_PROVIDED_TOT_LIM,SIMAH_IND_PROVIDED_TOT_GLIM,SIMAH_IND_PROVIDED_TOT_LIAB,SIMAH_IND_PROVIDED_TOT_GLIAB,SIMAH_IND_PROVIDED_TOT_DEF,SIMAH_IND_PROVIDED_CUR_DB,SIMAH_IND_PROVIDED_DI_TEXT,SIMAH_IND_PROVIDED_DI_TEXT_AR";
		String field_list_array[];
		field_list_array=field_list.split(",");
		String query="SELECT ENQUIRY_REFERENCE,ENQUIRY_TYPE,NO_OF_APPLICANTS,ACCOUNT_TYPE,REPORT_DATE,ENQUIRY_NO,PRODUCT_TYPE,AMOUNT,MBR_TYPE,MBR_STS,CAPL,CID1,CID2,CID3,CVIP,PCNMFA,PCNM1A,PCDOB,PCGND,PCMAR,PCNAT,PCEML,ACNMFA,ACNM1A,ACNM2A,ACNM3A,ACDOB,ACGND,ACMAR,ACNAT,ACEML,CNT_PE,CNT_MTDE,CNT_CI,CNT_GCI,CNT_DEF,EIID,TOT_LIM,TOT_GLIM,TOT_LIAB,TOT_GLIAB,TOT_DEF,CUR_DB,DI_TEXT,DI_TEXT_AR from NG_FLEET_SIMAH_IND_PROVIDED_SECTION WHERE CIC_NO='"+cic_number+"'  ";
		List<List<String>> result= iformObj.getDataFromDB(query);	
		logger.info("Query for SIMAH Individual one-one field is  "+query+" and its result is "+result);
		for(List<String> internal_list: result  )
		{
			logger.info("Internal List is "+internal_list);
			for(int i=0;i<internal_list.size();i++)
			{
				logger.info("Setting values as "+field_list_array[i]+" in "+internal_list.get(i));
				iformObj.setValue(field_list_array[i],internal_list.get(i));
			}
		}
		logger.info("After inserting in one to one field");
		
		//NG_FLEET_SIMAH_IND_PREV_ENQUIRY_GRID
		JSONArray arr = new JSONArray();
		query="SELECT PE_DATE,PE_INQR,PE_TYPE,PE_MEMB_REF,PE_PRD,PE_AMOUNT,PE_NMFA,PE_NM1A,PE_NM2A,PE_NM3A,PE_RSN from NG_FLEET_SIMAH_IND_PREV_ENQUIRY_GRID WHERE CIC_NO='"+cic_number+"' ";
		field_list="Date of Inquiry,Inquirer,Inquiry Type,Member Enquiry Reference,Product Type,Amount Inquired,Family Name (Ar),First Name (Ar),Second Name (Ar),Third Name (Ar),Reason Code";
		//field_list="PE_DATE,PE_INQR,PE_TYPE,PE_MEMB_REF,PE_PRD,PE_AMOUNT,PE_NMFA,PE_NM1A,PE_NM2A,PE_NM3A,PE_RSN";
		field_list_array=field_list.split(",");
		result = iformObj.getDataFromDB(query);
		for (List<String> internal_list : result) 
		{
			JSONObject internal_object=null;
			internal_object=new JSONObject();
			for(int i=0;i<internal_list.size();i++)
			{
				internal_object.put(field_list_array[i],internal_list.get(i));
			}
			arr.add(internal_object);
		}
		iformObj.addDataToGrid("SIMAH_IND_PREV_ENQ_GRID", arr);
		
		//NG_FLEET_SIMAH_IND_CI_DETAILS_GRID
		arr = new JSONArray();
		query="SELECT CI_CRDTR,CI_PRD,CI_ACC_NO,CI_LIMIT,CI_ISSU_DT,CI_PROD_EXP_DT,CI_STATUS,CI_CLSD_DT,CI_TNR,CI_FRQ,CI_INSTL,CI_SAL,CI_SEC,CI_CUB,CI_ODB,CI_LAST_AMT_PD,CI_LAST_PAY_DT,CI_AS_OF_DT,CI_NXT_DU_DT,CI_SUMMRY from NG_FLEET_SIMAH_IND_CI_DETAILS_GRID WHERE CIC_NO='"+cic_number+"' ";
		field_list="Creditor,Product Type,Account Number,Credit Limit,Issue Date,Expiry Date,Status,Closed Date,Tenure,Frequency,Instalment Amount,Salary Flag,Security Type,Outstanding Balance,Past Due Balance,Last Amount Paid,Last Payment Date,As of Date,Next Payment Due Date,Payment Summary";
		//field_list="CI_CRDTR,CI_PRD,CI_ACC_NO,CI_LIMIT,CI_ISSU_DT,CI_PROD_EXP_DT,CI_STATUS,CI_CLSD_DT,CI_TNR,CI_FRQ,CI_INSTL,CI_SAL,CI_SEC,CI_CUB,CI_ODB,CI_LAST_AMT_PD,CI_LAST_PAY_DT,CI_AS_OF_DT,CI_NXT_DU_DT,CI_SUMMRY";
		field_list_array=field_list.split(",");
		result = iformObj.getDataFromDB(query);
		for (List<String> internal_list : result) 
		{
			JSONObject internal_object=null;
			internal_object=new JSONObject();
			for(int i=0;i<internal_list.size();i++)
			{
				internal_object.put(field_list_array[i],internal_list.get(i));
			}
			arr.add(internal_object);
		}
		iformObj.addDataToGrid("SIMAH_IND_CI_DET_GRID", arr);
		
		//NG_FLEET_IND_SIMAH_ADDRESS_GRID
		arr = new JSONArray();
		query="SELECT CA_LOAD_DT,CA_CADT,CA_CAD1A,CA_CAD6,CA_CAD7,CA_CAD8A,CA_CAD9 from NG_FLEET_IND_SIMAH_ADDRESS_GRID WHERE CIC_NO='"+cic_number+"' ";
		field_list="Address Load Date,Address Type,Address 1 (Ar),PO Box Number,Postal Code,City (Ar),Country Code";
	//	field_list="CA_LOAD_DT,CA_CADT,CA_CAD1A,CA_CAD6,CA_CAD7,CA_CAD8A,CA_CAD9";
		field_list_array=field_list.split(",");
		result = iformObj.getDataFromDB(query);
		for (List<String> internal_list : result) 
		{
			JSONObject internal_object=null;
			internal_object=new JSONObject();
			for(int i=0;i<internal_list.size();i++)
			{
				internal_object.put(field_list_array[i],internal_list.get(i));
			}
			arr.add(internal_object);
		}
		iformObj.addDataToGrid("SIMAH_IND_ADDR_GRID", arr);
		
		//NG_FLEET_IND_SIMAH_CONTACTS_GRID
		arr = new JSONArray();
		query="SELECT CCN1,CCN2,CCN3,CCN4,CCN5 from NG_FLEET_IND_SIMAH_CONTACTS_GRID WHERE CIC_NO='"+cic_number+"' ";
		field_list="Contact Type,Country Code,Area Code,Phone Number,Extension";
		//field_list="CCN1,CCN2,CCN3,CCN4,CCN5";
		field_list_array=field_list.split(",");
		result = iformObj.getDataFromDB(query);
		for (List<String> internal_list : result) 
		{
			JSONObject internal_object=null;
			internal_object=new JSONObject();
			for(int i=0;i<internal_list.size();i++)
			{
				internal_object.put(field_list_array[i],internal_list.get(i));
			}
			arr.add(internal_object);
		}
		iformObj.addDataToGrid("SIMAH_IND_CONTACTS_GRID", arr);
		
		//NG_FLEET_IND_SIMAH_EMPLOYERS_GRID
		arr = new JSONArray();
		query="SELECT ETYP,ENMA,EADT,EAD1A,EAD2A,EAD6,EAD7,EAD8A,EAD9,EOCA,EDOE,ELEN,ECEX,EDLD,EMBS,ETMS from NG_FLEET_IND_SIMAH_EMPLOYERS_GRID WHERE CIC_NO='"+cic_number+"'  ";
		field_list="Employer type,Employer Name (Ar),Address Type,Address 1 (Ar),Address 2 (Ar),PO Box,Postal Code,City (Ar),Country Code,Occupation (Ar),Date of Employment,Length of Service,Contract Expiry Date,Date Loaded,Monthly Basic Salary,Total Monthly Salary";
		//field_list="ETYP,ENMA,EADT,EAD1A,EAD2A,EAD6,EAD7,EAD8A,EAD9,EOCA,EDOE,ELEN,ECEX,EDLD,EMBS,ETMS";
		field_list_array=field_list.split(",");
		result = iformObj.getDataFromDB(query);
		logger.info("Query for SIMAH Individual employers gridd is  "+query+" and its result is "+result);
		for (List<String> internal_list : result) 
		{
			JSONObject internal_object=null;
			internal_object=new JSONObject();
			for(int i=0;i<internal_list.size();i++)
			{
				logger.info("Setting values as "+field_list_array[i]+" in "+internal_list.get(i));
				internal_object.put(field_list_array[i],internal_list.get(i));
			}
			arr.add(internal_object);
		}	
		iformObj.addDataToGrid("SIMAH_IND_EMPLOYERS_GRID", arr);
		
		
		//NG_POS_SIMAH_IND_NARRATIVES_GRID
		arr = new JSONArray();
		query="SELECT NA_LOAD_DT,NA_LOADED_BY,NA_TYPE,NA_TEXT,NA_TEXT_AR from NG_FLEET_SIMAH_IND_NARRATIVES_GRID WHERE CIC_NO='"+cic_number+"' ";
		field_list="Load Date,Loaded By,Type,Text,Text (Ar)";
		field_list_array=field_list.split(",");
		result = iformObj.getDataFromDB(query);
		for (List<String> internal_list : result) 
		{
			JSONObject internal_object=null;
			internal_object=new JSONObject();
			for(int i=0;i<internal_list.size();i++)
			{
				internal_object.put(field_list_array[i],internal_list.get(i));
			}
			arr.add(internal_object);
		}
		iformObj.addDataToGrid("SIMAH_IND_NARRATIVES_GRID", arr);
		
		
		//NG_POS_SIMAH_IND_DEFAULTS_GRID
		arr = new JSONArray();
		query="SELECT PRODUCT_TYPE,APPLICANT_TYPE,ACCOUNT_NUMBER,CREDITOR,LOAD_DATE,ORIGINAL_AMT_AT_LOAD_DATE,OUTSTANDING_BALANCE,DEFAULTS_STATUS from NG_FLEET_SIMAH_IND_DEFAULTS_GRID WHERE CIC_NO='"+cic_number+"' ";
		field_list="Product Type,Applicant Type,Account Number,Creditor,Load Date,Original Amount at Load Date,Outstanding Balance,Status,Settlement Date";
		field_list_array=field_list.split(",");
		result = iformObj.getDataFromDB(query);
		logger.info("Queryt to fetch defaults details in simah individual is "+query+" and it's result is "+result);
		for (List<String> internal_list : result) 
		{
			JSONObject internal_object=null;
			internal_object=new JSONObject();
			for(int i=0;i<internal_list.size();i++)
			{
				internal_object.put(field_list_array[i],internal_list.get(i));
			}
			arr.add(internal_object);
		}
		logger.info("JSON array to fetch from SIMAH_IND_DEFAULT_GRID is "+arr);
		iformObj.addDataToGrid("SIMAH_IND_DEFAULT_GRID", arr);
		
		//NG_POS_SIMAH_IND_PUBLIC_NOTICES_GRID
		arr = new JSONArray();
		query="SELECT PN_LOAD_DT,PN_TYPE,PN_PUBLICATION,PN_COMMENT,PN_PUBLICATION_AR,PN_COMMENT_AR from NG_FLEET_SIMAH_IND_PUBLIC_NOTICES_GRID WHERE CIC_NO='"+cic_number+"' ";
		field_list="Load Date,Type,Publication,Comment,Publication (Ar),Comment (Ar)";
		field_list_array=field_list.split(",");
		result = iformObj.getDataFromDB(query);
		for (List<String> internal_list : result) 
		{
			JSONObject internal_object=null;
			internal_object=new JSONObject();
			for(int i=0;i<internal_list.size();i++)
			{
				internal_object.put(field_list_array[i],internal_list.get(i));
			}
			arr.add(internal_object);
		}
		iformObj.addDataToGrid("SIMAH_IND_PUBLIC_NOTICES_GRID", arr);
				
		//NG_POS_SIMAH_IND_JUDGEMENTS
		arr = new JSONArray();
		query="SELECT EJ_ENFORCE_DATE,EJ_RES_NUMBER,EJ_EXEC_TYPE,EJ_CITY,EJ_COURT_CODE,EJ_CASE_NUMBER,EJ_DATE_LOADED,EJ_ORIG_CLAIM_AMT,EJ_CLAIM_AMT,EJ_STATUS,EJ_SETTLE_DATE from NG_FLEET_SIMAH_IND_JUDGEMENTS WHERE CIC_NO='"+cic_number+"' ";
		field_list="Enforce Date,Res Number,Execution Type,City,Court Code,Case Number,Date Loaded,Originial Claim Amount,Claim Amount,Status,Settle Date";
		field_list_array=field_list.split(",");
		result = iformObj.getDataFromDB(query);
		for (List<String> internal_list : result) 
		{
			JSONObject internal_object=null;
			internal_object=new JSONObject();
			for(int i=0;i<internal_list.size();i++)
			{
				internal_object.put(field_list_array[i],internal_list.get(i));
			}
			arr.add(internal_object);
		}
		iformObj.addDataToGrid("SIMAH_IND_JUDGEMENTS", arr);		
		
		return "success~subFormCalled";
	}

	private boolean checkSIMAHValidity(IFormReference iformObj,String cic_no_or_crno,String party_type)
	{
		logger.info("Inside handling of checkSIMAHValidity function");
		try
		{
			String date = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss").format(new Date());
			LocalDateTime today_date=LocalDateTime.parse(date,DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss"));
			String query="";
			if(party_type.equalsIgnoreCase("Individual"))
				query="SELECT ENTRY_DATE_TIME from NG_FLEET_SIMAH_IND_PROVIDED_SECTION WHERE CIC_NO='"+cic_no_or_crno+"'  ";
			else
				query="SELECT ENTRY_DATE_TIME from NG_FLEET_SIMAH_RP_BASIC_DETAILS WHERE CR_NO='"+cic_no_or_crno+"'  ";
			List<List<String>> entry_date=iformObj.getDataFromDB(query);
			if(entry_date.size()>0)
			{
				if(entry_date.get(0).size()>0)
				{
					String checked_date=entry_date.get(0).get(0);
					LocalDateTime checked_date_obj = LocalDateTime.parse(checked_date,DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss"));
					LocalDateTime date_after_30_days=checked_date_obj.plusDays(30);
					
					if(today_date.compareTo(date_after_30_days)>0)
					{
						logger.info("In checkSIMAHValidity coming here because today's date is greater than 30 days, hence new SIMAH data need to be fetched");
						return true;
					}
					else
					{
						logger.info("In checkSIMAHValidity coming here because today's date is less than 30 days, hence old data need to be shown");
						return false;
					}
				}
				else
				{
					logger.info("In checkSIMAHValidity coming here because no record is present for this cic in database , hence new SIMAH data need to be fetched");
					return true;
				}
			}
			else
			{
				logger.info("In checkSIMAHValidity coming here because no record is present for this cic in database , hence new SIMAH data need to be fetched");
				return true;
			}
		}
		catch(Exception e)
		{
			logger.info("Exception Occurred: checkSIMAHValidity and exception is "+e);
			logger.info("Just because of this exception we are returning true");
			return true;
		}
		
	}
	
	private String RelatedPartyfillSIMAHDataCommercial(IFormReference iformObj, String stringdata)
	{
		//stringdata_split[0] CIC_NUMBER
		//stringdata_split[1] ROW NUMBER
		//stringdata_split[2] CR_NUMBER
		String[] stringdata_split=stringdata.split("#");
		
		boolean SIMAH_Required_or_not=checkSIMAHValidity(iformObj,stringdata_split[2],"Company");
		if(SIMAH_Required_or_not==false)
		{
			return "Success~Record Already present";
		}
		
		int row_index=0;
		if(stringdata_split[1]!="")
			row_index=Integer.parseInt(stringdata_split[1]);
		String callname="SIMAH_Commercial_RP";
		//createRequestXML customized to handle cic/cr no
		try
		{
			logger.info("Inside createRequestXML Function and callName is " + callname);
			String tagName = "_TagName";
			
			String request_prefix=GetXML.getProp().getProperty(callname+"_RequestPrefix");
			if(request_prefix.equals(null))
			{
				request_prefix="";
			}
			logger.info("Request prefix is "+request_prefix+"please check");
			
			String header_tags=GetXML.getProp().getProperty(callname+"_Header");
			String []header_tags_arry=header_tags.split(",");
			
			logger.info("Header tags are "+header_tags);
			JSONObject jsonobj_header=new JSONObject();
			for(String temp:header_tags_arry)
			{
				String[] hash_split=temp.split("#");
				jsonobj_header.put(hash_split[0],hash_split[1]);
			}
			
			logger.info("JSOn object is "+jsonobj_header);
		
			String tagNames = GetXML.getProp().getProperty(callname + tagName);
			logger.info(tagNames);
			String[] tags = tagNames.split(",");
	
			String requestXML = readDummyRequest(callname);
	
			XMLParser parser = new XMLParser(requestXML);
			
	
			for (String tag : tags) 
			{
				String tagValue = parser.getValueOf(request_prefix+tag);
				logger.info("tag values are"+tagValue);
				if(tagValue.contains("header~"))
				{
					try {
						
					if(tagValue.split("~")[1].equalsIgnoreCase("UUID"))
					{
						parser.changeValue(request_prefix+tag, java.util.UUID.randomUUID().toString());
					}
					else
					{
					String value=(String) jsonobj_header.get(tagValue.split("~")[1]);
					logger.info("Value to be replaced by jsonobj_header is "+value);
					parser.changeValue(request_prefix+tag, value);
					}
					}
					catch(Exception e)
					{
						logger.info("Exception is "+e);
					}
				}
				if (tagValue.startsWith("formid~")) 
				{
					String value = (String) iformObj.getValue(tagValue.split("~")[1]);
					parser.changeValue(request_prefix+tag, value);
				}
				
			}
			
			String timestamp=new Timestamp(System.currentTimeMillis()).toString();
			logger.info("Setting Enquiy Reference for simah call "+timestamp);
		
			parser.changeValue(request_prefix+"com:ENQUIRY_REFERENCE", timestamp);
			logger.info("CreateRequestXML :Handling Language in Request ");
			logger.info("Language tag for "+callname+" present in proerty file or not ??? "+GetXML.getProp().containsKey(callname+"_LanguageTag"));
			if(GetXML.getProp().containsKey(callname+"_LanguageTag"))
			{
				logger.info("CreateRequestXML : Language tag is present in property file");
				String language_tag=GetXML.getProp().getProperty(callname+"_LanguageTag");
				logger.info("CreateRequestXML : Language tag value in property file is "+language_tag);
				String session_lang=(String) iformObj.getValue("SESSION_LANG");
				logger.info("CreateRequestXML : Session Language is "+session_lang);
				parser.changeValue(request_prefix+language_tag, session_lang);
				logger.info(request_prefix+language_tag+" got value "+session_lang);
			}
			
			logger.info("Request prefix is "+request_prefix+"please check");
			parser.changeValue(request_prefix+"alr:CICNum", stringdata_split[0]);
			parser.changeValue(request_prefix+"com:CIDN", stringdata_split[3]);
			System.out.println("RequestXML is :\n" + parser.toString());
			logger.info("RequestXML is :\n" + parser.toString());
			String responseXML = new SocketConnector().getSocketXMLResponse(parser.toString(), callname,iformObj);
			
		String restricted_tags=GetXML.getProp().getProperty(callname+"_RestrictedTags");
		String []restricted_values=restricted_tags.split(",");
		for(String temp:restricted_values)
			responseXML=responseXML.replace(temp,"");
		
		
		tagName = "_TagNameResponse";
		tagNames = GetXML.getProp().getProperty(callname + tagName);
		logger.info(tagNames);
		tags = tagNames.split(",");
 
		String date = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss").format(new Date());
		
		String cic_number=stringdata_split[0];
		String cr_number=stringdata_split[2];
		
		logger.info("CIC Number is "+cic_number+" and CR Number is "+cr_number+" and  rowindex is "+stringdata_split[1]+" ");
		
		parser = new XMLParser(responseXML);
		String values="( '"+cic_number+"','"+cr_number+"',";
		String query="";
		String columnames="CIC_NO,CR_NO,";
		String insertinto="INSERT INTO ";
		String tablename=GetXML.getProp().getProperty(callname+"_Table");
		
		String delete_query="DELETE FROM "+tablename+" where CIC_NO= '"+cic_number+"' ";
		iformObj.saveDataInDB(delete_query);
		logger.info("With this query table is emptied :: "+delete_query);
		
		String statuscode=GetXML.getProp().getProperty(callname+"_StatusCode");
		String []status_code_split=statuscode.split("~");
		String status_code_in_response=parser.getValueOf(status_code_split[0]);
		if(status_code_in_response.equalsIgnoreCase(status_code_split[1]))
		{
			String tagValue;
			for (String tag : tags) 
			{
				logger.info("Tag =" + tag);
				String[] key = tag.split("~");
				logger.info("Key is "+key[0]);
				if(key[0].contains("#"))
				{
					if(!key[0].contains("@"))
		    		{
						String []parent_child_tags=key[0].split("#");
				    	logger.info("Length of hash String is "+parent_child_tags.length);
				    	String result=responseXML;
				    	for(int i=0;i<parent_child_tags.length;i++)
				    	{
				    		XMLParser internal_parser=new XMLParser(result);
				    		result=internal_parser.getValueOf(parent_child_tags[i]);
				    		result=result.replace("'","''");
				    	}
				    	tagValue=result;
		    		}
					else
					{
						String[] inputTagswithoutRateSign = key[0].split("@");
				    	String []parent_child_tags=inputTagswithoutRateSign[0].split("#");
				    	logger.info("Length of hash String is "+parent_child_tags.length);
				    		String result=responseXML;
				    		for(int i=0;i<parent_child_tags.length;i++)
				    		{
				    			XMLParser internal_parser=new XMLParser(result);
				    			result=internal_parser.getValueOf(parent_child_tags[i]);
				    			logger.info("For "+parent_child_tags[i]+" result is "+result);
				    		}
				    	String internal_query="";
				    	internal_query="(SELECT PARAM_VALUE FROM NG_MAST_POS_TAG_KEY_VALUE_CONFIG WHERE PARAM_KEY='"+result+"' AND TAG_IDENT='"+inputTagswithoutRateSign[1]+"' AND ISACTIVE='Y' )";
					    logger.info("Query to replace key with value is"+internal_query);
				    	tagValue=internal_query;
					}
				}
				else
				{
					if(!key[0].contains("@"))
					{
						tagValue = parser.getValueOf(key[0]);
					}
					else
					{
						String []inputTagswithoutRateSign=key[0].split("@");
						String result = parser.getValueOf(inputTagswithoutRateSign[0]);
		    			String internal_query="";
		    			
		    			internal_query="(SELECT PARAM_VALUE FROM NG_MAST_POS_TAG_KEY_VALUE_CONFIG WHERE PARAM_KEY='"+result+"' AND TAG_IDENT='"+inputTagswithoutRateSign[1]+"' AND ISACTIVE='Y' )" ;
			    		logger.info("Query to replace key with value is"+internal_query);
						tagValue=internal_query;
					}
					
				}
				
				logger.info("Tag Value Derived from ResponseXML is " + tagValue);
				logger.info("Key 2 =" + key[1]);
				tagValue=tagValue.replace("'","''");

				if(tagValue.contains("SELECT PARAM_VALUE"))
				{
					values=values+tagValue+",";
				}
				else
				{
					if(key[1].contains("$"))
						values=values+"'"+tagValue+"',";
					else
						values=values+"N'"+tagValue+"',";
				}
				
				columnames=columnames+key[1].replace("$","")+",";
			}
			
			columnames=columnames+"ENTRY_DATE_TIME";
			values=values+"'"+date+"')";

			query=insertinto+tablename+" ( "+ columnames +" ) VALUES "+values;
			logger.info("SIMAH Comm Related Party: Query for "+callname+" setting response in tables is"+query);
			iformObj.saveDataInDB(query);	

		}
		else
		{
			logger.info("For "+callname+" Status code returned from response is not success ");
			return "Error~In "+callname+" error received from backend ";
		}
		
		
		//Hello
	    String[] callNamesGrid = { "SIMAH_Commercial_RP_AddressDetails","SIMAH_Commercial_RP_CONTACTS","SIMAH_Commercial_RP_PreviousEnquiry","SIMAH_Commercial_RP_As_Narrative","SIMAH_Commercial_RP_Bounced_Cheques","SIMAH_Commercial_RP_Defaults","SIMAH_Commercial_RP_Guaran_Key_Stakeholders","SIMAH_Commercial_RP_Judgement","SIMAH_Commercial_RP_Key_Stakeholder","SIMAH_Commercial_RP_L1_C1_Summary","SIMAH_Commercial_RP_L2_C1_Summary","SIMAH_Commercial_RP_Rating"}; //For cortex, bankdetails and loan details
		//String[] callNamesGrid = { "MSBAcctsDataInq_SearchScreen", "MSBFacilitiesDataInq_SearchScreen"}; //For cortex and bankdetails
		for (String callNames : callNamesGrid) 
			{
				
				//logger.info("Response XML received by setResponseDataGrid is"+responseXML);
				tagName = "_TagNameResponseGrid";
				tagNames = GetXML.getProp().getProperty(callNames + tagName);
				
				logger.info(tagNames);
				String[] tagValue = tagNames.split(",");
				
				date = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss").format(new Date());
				
				
				values=" ";
				query="";
				//columnames="CIC_NO,CR_NO";
				insertinto="INSERT INTO ";
				tablename=GetXML.getProp().getProperty(callNames+"_Table_Grid");
				
				delete_query="DELETE FROM "+tablename+" where CIC_NO= '"+cic_number+"' ";
				iformObj.saveDataInDB(delete_query);
				logger.info("With this query table is emptied :: "+delete_query);
				
				statuscode=GetXML.getProp().getProperty(callNames+"_StatusCode");
				status_code_split=statuscode.split("~");
				
				
				for(String tag: tagValue)
				{
					tags=tag.split("~");
					WFXmlResponse objWFxmlResponse = new WFXmlResponse(responseXML);
					//logger.info("objWFxmlResponse value is "+objWFxmlResponse);
					
					columnames="CIC_NO,CR_NO,";
					values=" ";
					for(int j=2;j<tags.length;++j)
					{
						String tag_split_values=tags[j];
						logger.info("Tag values split to set column names"+tag_split_values);
						String []hash_split_values=tag_split_values.split("#");
						columnames=columnames+hash_split_values[0].replace("$","")+",";
					}
					
					columnames=columnames+"ENTRY_DATE_TIME";
					logger.info("column names are"+columnames);
					
					if (objWFxmlResponse.getVal(status_code_split[0]).equals(status_code_split[1])) 
					{
					logger.info("Tags[0] is "+tags[0]);
					logger.info("Tags[1] is "+tags[1]);
					WFXmlList WFXmlList = objWFxmlResponse.createList(tags[0],tags[1]);
					logger.info("Wfmxmlsit is --------------"+WFXmlList);
					logger.info("Size of Wfmxmlsit is "+WFXmlList.hasMoreElements());
					for (int i = 0; WFXmlList.hasMoreElements(true); WFXmlList.skip(true), i++) 
					{
					
						values=values+"( '"+cic_number+"', '"+cr_number+"',";
						
						for(int j=2;j<tags.length;++j)
						{
							String tag_split_values=tags[j];
							if((!tag_split_values.contains("@")))
							{
								String []hash_split_values=tag_split_values.split("#");
								String result_from_response=WFXmlList.getVal(hash_split_values[1]);
								result_from_response=result_from_response.replace("'","''");
								if(result_from_response== null || result_from_response=="")
								{
									result_from_response=" ";
								}
								
								if(hash_split_values[0].contains("$"))
									values=values+"'"+result_from_response+"',";
								else
									values=values+"N'"+result_from_response+"',";
							}
							else
							{
								String []inputTagswithoutRateSign=tag_split_values.split("@");
								String []hash_split_values=inputTagswithoutRateSign[0].split("#");
								String result_from_response=WFXmlList.getVal(hash_split_values[1]);
								if(result_from_response.equals(null) || result_from_response.equals(""))
								{
									result_from_response=" ";
								}
								String internal_query="";
								internal_query="( SELECT PARAM_VALUE FROM NG_MAST_POS_TAG_KEY_VALUE_CONFIG WHERE PARAM_KEY='"+result_from_response+"' AND TAG_IDENT='"+inputTagswithoutRateSign[1]+"' AND ISACTIVE='Y' )" ;
								values=values+internal_query+",";
							}
							
							
						}
						values=values+"'"+date+"'),";
					}
					
					if (values.endsWith(",")) {
						values = values.substring(0, values.length() - 1);
					}
					
					logger.info("Final column variables are"+columnames);
					logger.info("values are"+values);
					
					query=insertinto+tablename+" ( "+ columnames +" ) VALUES "+values;
					logger.info("Query for setting response in search screen tables is"+query);
					iformObj.saveDataInDB(query);	
					
					}
					else
					{
						logger.info("For "+callname+" Status code returned from response is not success ");
						return "Error~In "+callname+" error received from beacked";
					}
					
				}
			}
		}catch(Exception e)
		{
			logger.info("Excpetion Occurred::RelatedPartyfillSIMAHDataCommercial and exception is "+e);
			return "Error~Error in RelatedPartyfillSIMAHDataCommercial";
		}
		
		return "Success~RelatedPartyfillSIMAHDataCommercial";
	}

	private String fillSIMAHDataIndividual(IFormReference iformObj, String stringdata) 
	{	
		logger.info("Inside handling of fillSIMAHDataIndividual");
		String[] stringdata_split=stringdata.split("#");
		boolean SIMAH_Required_or_not=checkSIMAHValidity(iformObj,stringdata_split[0],"Individual");
		if(SIMAH_Required_or_not==false)
		{
			return "Success~Record Already present";
		}
		int row_index=0;
		if(stringdata_split[1]!="")
			row_index=Integer.parseInt(stringdata_split[1]);
		
		JSONArray jsonarr=iformObj.getDataFromGrid("NG_POS_ROLE_GRID");
		JSONObject jsonobj=(JSONObject) jsonarr.get(row_index);
		logger.info("Inside fillSIMAHDataIndividual, row number is "+row_index+" and jsonobject is "+jsonobj);
		String callName = "SIMAH_Individual"; //For SIMAH Individual
		String jsonResponse="";
		try
		{
			logger.info("Inside createRequestXML Function and callName is " + callName);
			String tagName = "_TagName";
			
			String request_prefix=GetXML.getProp().getProperty(callName+"_RequestPrefix");
			if(request_prefix.equals(null))
			{
				request_prefix="";
			}
			logger.info("Request prefix is "+request_prefix+"please check");
			
			String header_tags=GetXML.getProp().getProperty(callName+"_Header");
			String []header_tags_arry=header_tags.split(",");
			
			logger.info("Header tags are "+header_tags);
			JSONObject jsonobj_header=new JSONObject();
			for(String temp:header_tags_arry)
			{
				String[] hash_split=temp.split("#");
				jsonobj_header.put(hash_split[0],hash_split[1]);
			}
			
			logger.info("JSOn object is "+jsonobj_header);
		
			String tagNames = GetXML.getProp().getProperty(callName + tagName);
			logger.info(tagNames);
			String[] tags = tagNames.split(",");
	
			String requestXML = readDummyRequest(callName);
	
			XMLParser parser = new XMLParser(requestXML);
			
	
			for (String tag : tags) 
			{
				String tagValue = parser.getValueOf(request_prefix+tag);
				logger.info("tag values are"+tagValue);
				if(tagValue.contains("header~"))
				{
					try 
					{
						if(tagValue.split("~")[1].equalsIgnoreCase("UUID"))
						{
							parser.changeValue(request_prefix+tag, java.util.UUID.randomUUID().toString());
						}
						else
						{
							String value=(String) jsonobj_header.get(tagValue.split("~")[1]);
							logger.info("Value to be replaced by jsonobj_header is "+value);
							parser.changeValue(request_prefix+tag, value);
						}
					}
					catch(Exception e)
					{
						logger.info("Exception is "+e);
					}
				}
				else if (tagValue.startsWith("formid~")) 
				{
					if(tagValue.split("~")[1].equalsIgnoreCase("AMOUNT"))
					{
						logger.info("Value of requested amount is "+iformObj.getValue("Q_NG_POS_APPLICATION_DATA_REQ_AMNT_SAR"));
						parser.changeValue(request_prefix+tag,(String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_REQ_AMNT_SAR") );
					}
					else if(tagValue.split("~")[1].equalsIgnoreCase("CID2"))
					{
						parser.changeValue(request_prefix+tag,(String) jsonobj.get("ID Number") );
					}
					else if(tagValue.split("~")[1].equalsIgnoreCase("CGND"))
					{
						String gender=(String) jsonobj.get("Gender");
						if(gender.equalsIgnoreCase("Male"))
							parser.changeValue(request_prefix+tag,"M" );
						else 
							parser.changeValue(request_prefix+tag,"F" );
					}
					else if(tagValue.split("~")[1].equalsIgnoreCase("CMAR"))
					{
						String marital_status=(String) jsonobj.get("Marital Status");
						if(marital_status.equalsIgnoreCase("Married"))
							parser.changeValue(request_prefix+tag,"M" );
						else
							parser.changeValue(request_prefix+tag,"S" );
					}
					else if(tagValue.split("~")[1].equalsIgnoreCase("CNAT"))
					{
						String nationality=(String) jsonobj.get("Nationality Description");
						if(nationality.trim().equals("Saudi"))
							parser.changeValue(request_prefix+tag,"SAU");
						else
							parser.changeValue(request_prefix+tag,"Non-SAU");
					}
					else if(tagValue.split("~")[1].equalsIgnoreCase("CAD6"))
					{
						parser.changeValue(request_prefix+tag,(String) jsonobj.get("Postal Code") );
					}
					else if(tagValue.split("~")[1].equalsIgnoreCase("CAD7"))
					{
						String addition_no=(String) jsonobj.get("Additional Number");
						if(addition_no.trim().equals(""))
							addition_no="1234";
						parser.changeValue(request_prefix+tag,addition_no );
					}
					else if(tagValue.split("~")[1].equalsIgnoreCase("CAD9"))
					{
						String nationality=(String) jsonobj.get("Nationality Description");
						if(nationality.trim().equals("Saudi"))
							parser.changeValue(request_prefix+tag,"SAU");
						else
							parser.changeValue(request_prefix+tag,"Non-SAU");
					}
					else if(tagValue.split("~")[1].equalsIgnoreCase("RUN_NO"))
					{
						String run_no="";
						String query="SELECT NEXT VALUE FOR SEQ_SIMAH_IND_RUN_NO AS RUN_NO";
						List<List<String>> result=iformObj.getDataFromDB(query);
						if(result.size()>0)
						{
							if(result.get(0).size()>0)
							{
								run_no=result.get(0).get(0);
							}
						}
						
						logger.info("Query is "+query+" and its result is "+result+" and run_no is "+run_no+" and its length is "+run_no.length()+"");
						int run_no_size=run_no.length();
						for(int i=0;i<8-run_no_size;i++)
							run_no="0"+run_no;
						logger.info("RUN_NO used in request is "+run_no);
						parser.changeValue(request_prefix+tag,run_no);
					}
					else if(tagValue.split("~")[1].equalsIgnoreCase("ENQUIRY_REFERENCE"))
					{
						String run_no="";
						String query="SELECT NEXT VALUE FOR SEQ_SIMAH_IND_ENQUIRY_REF AS ENQUIRY_REF";
						List<List<String>> result=iformObj.getDataFromDB(query);
						if(result.size()>0)
						{
							if(result.get(0).size()>0)
							{
								run_no=result.get(0).get(0);
							}
						}
						logger.info("Query is "+query+" and its result is "+result+" and run_no is "+run_no+" and its length is "+run_no.length()+"");
						int run_no_size=run_no.length();
						for(int i=0;i<10-run_no_size;i++)
							run_no="0"+run_no;
						logger.info("ENQUIRY_REFERENCE used in request is "+run_no);
						parser.changeValue(request_prefix+tag,run_no);
					}
				}
				else if(tagValue.contains("CID3D"))
				{
					String expiry_date=(String) jsonobj.get("ID Expiry Date");
					if(expiry_date.contains("/"))
					{
						logger.info("Expiry date case 1");
						parser.changeValue(request_prefix+"CID3D",expiry_date.split("/")[0] );
						parser.changeValue(request_prefix+"CID3M",expiry_date.split("/")[1] );
						parser.changeValue(request_prefix+"CID3Y",expiry_date.split("/")[2] );
					}
					else if(expiry_date.contains("-"))
					{
						parser.changeValue(request_prefix+"CID3D",expiry_date.split("-")[0] );
						parser.changeValue(request_prefix+"CID3M",expiry_date.split("-")[1] );
						parser.changeValue(request_prefix+"CID3Y",expiry_date.split("-")[2] );
					}
					else
					{
						parser.changeValue(request_prefix+"CID3D",expiry_date.substring(0,2));
						parser.changeValue(request_prefix+"CID3M,",expiry_date.substring(2,4));
						parser.changeValue(request_prefix+"CID3Y",expiry_date.substring(4,8));
					}
				}
				else if(tagValue.contains("CDBD"))
				{
					String expiry_date=(String) jsonobj.get("Birth Date");
					if(expiry_date.contains("/"))
					{
						parser.changeValue(request_prefix+"CDBD",expiry_date.split("/")[0] );
						parser.changeValue(request_prefix+"CDBM",expiry_date.split("/")[1] );
						parser.changeValue(request_prefix+"CDBY",expiry_date.split("/")[2] );
					}
					else if(expiry_date.contains("-"))
					{
						parser.changeValue(request_prefix+"CDBD",expiry_date.split("-")[0] );
						parser.changeValue(request_prefix+"CDBM",expiry_date.split("-")[1] );
						parser.changeValue(request_prefix+"CDBY",expiry_date.split("-")[2] );
					}
					else
					{
						parser.changeValue(request_prefix+"CDBD",expiry_date.substring(0,2));
						parser.changeValue(request_prefix+"CDBM",expiry_date.substring(2,4));
						parser.changeValue(request_prefix+"CDBY",expiry_date.substring(4,8));
					}
				}
			}
			
			
			System.out.println("RequestXML is :\n" + parser.toString());
			logger.info("RequestXML is :\n" + parser.toString());
			//String responseXML = new SocketConnector().getSocketXMLResponse(parser.toString(), callName,iformObj);
		
			//org.json.JSONObject jb = XML.toJSONObject(parser.toString());
			//logger.info("~~~~~~~~~~Sending JSON Request m@au~~~~~>>>>>>" + jb);
			//String Url="http://10.11.201.33:7804/enquiry/inthttpset.pgm";
			//String Url="https://consumerdev.simah.com/enquiry/inthttp.pgm";
			
			jsonResponse = executePOSTRequestSIMAHIndividual(parser.toString(), callName);
			if(jsonResponse.equalsIgnoreCase("Error~Exception in Request,Please Check"))
			{
				logger.info("Error~Unable to connect to proxy, please check credentials");
				return "Error~Unable to connect to proxy, please check credentials";
			}
			logger.info("~~~~~~~~~~Getting JSON Response m@au~~~~~>>>>>>" + jsonResponse);
			
			String callNameLog = "Simah Individual";
			String Callreq = parser.toString();
		    String wi_name = getWorkitemName(iformObj);
		    String activityName = getActivityName(iformObj);
		    String usrNAme = getUserName(iformObj);
			String colNames = "CALL_NAME,REQUEST,REQUEST_SENT,RESPONSE,RESPONSE_RECEIVED,EXCEPTION_OCCURED,STATUS,WI_NAME,ACTIVITY_NAME,USERNAME";
			String colValues = "'"+callNameLog+"','"+Callreq+"','"+new Timestamp(System.currentTimeMillis()).toString()+"','"+jsonResponse.toString().replace("'", "''")+"','"+new Timestamp(System.currentTimeMillis()).toString()+"','','','"+wi_name+"','"+activityName+"','"+usrNAme+"'";
			String logQury = "INSERT INTO NG_ARB_API_LOGS (CALL_NAME, REQUEST, REQUEST_SENT, RESPONSE, RESPONSE_RECEIVED, EXCEPTION_OCCURED, STATUS, WI_NAME, ACTIVITY_NAME, USERNAME)VALUES ("+colValues+")";
			logger.info("\n\n ------------------------ Query for API Logs"+logQury+"\n--------------------------------------------");	
		    saveDataInDB(iformObj, logQury);
		    logger.info("~~~~~~~~~~API Logs Saved... m@au~~~~~>>>>>>"+jsonResponse);
	
		
		} 
		catch (Exception e) 
		{
			// TODO Auto-generated catch block
			logger.info("Exception occurred: Simah Individual: and exception is "+e);
			e.printStackTrace();
		}

		String responseXML = jsonResponse;	
		//setResponseDataSearchScreen(iformObj, callName, responseXML);
		
		//Hello
		String restricted_tags=GetXML.getProp().getProperty(callName+"_RestrictedTags");
		String []restricted_values=restricted_tags.split(",");
		for(String temp:restricted_values)
			responseXML=responseXML.replace(temp,"");
		
		
		String tagName = "_TagNameResponse";
		String tagNames = GetXML.getProp().getProperty(callName + tagName);
		logger.info(tagNames);
		String[] tags = tagNames.split(",");
 
		String date = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss").format(new Date());
		
		String cic_number=stringdata_split[0];
		
		XMLParser parser = new XMLParser(responseXML);
		String values="( '"+cic_number+"',";
		String query="";
		String columnames="CIC_NO,";
		String insertinto="INSERT INTO ";
		String tablename=GetXML.getProp().getProperty(callName+"_Table");
		
		String delete_query="DELETE FROM "+tablename+" where CIC_NO= '"+cic_number+"' ";
		iformObj.saveDataInDB(delete_query);
		logger.info("With this query table is emptied :: "+delete_query);
		
		String statuscode=GetXML.getProp().getProperty(callName+"_StatusCode");
		String []status_code_split=statuscode.split("~");
		String status_code_in_response=parser.getValueOf(status_code_split[0]);
		if(status_code_in_response.equalsIgnoreCase(status_code_split[1]))
		{
			String tagValue;
			for (String tag : tags) {
				logger.info("Tag =" + tag);
				String[] key = tag.split("~");
				logger.info("Key is "+key[0]);
				if(key[0].contains("#"))
				{
					if(!key[0].contains("@"))
		    		{
						String []parent_child_tags=key[0].split("#");
				    	logger.info("Length of hash String is "+parent_child_tags.length);
				    	String result=responseXML;
				    	for(int i=0;i<parent_child_tags.length;i++)
				    	{
				    		XMLParser internal_parser=new XMLParser(result);
				    		result=internal_parser.getValueOf(parent_child_tags[i]);
				    		result=result.replace("'","''");
				    	}
				    	tagValue=result;
		    		}
					else
					{
						String[] inputTagswithoutRateSign = key[0].split("@");
				    	String []parent_child_tags=inputTagswithoutRateSign[0].split("#");
				    	logger.info("Length of hash String is "+parent_child_tags.length);
				    		String result=responseXML;
				    		for(int i=0;i<parent_child_tags.length;i++)
				    		{
				    			XMLParser internal_parser=new XMLParser(result);
				    			result=internal_parser.getValueOf(parent_child_tags[i]);
				    			logger.info("For "+parent_child_tags[i]+" result is "+result);
				    		}
				    	String internal_query="";
				    	internal_query="(SELECT PARAM_VALUE FROM NG_MAST_POS_TAG_KEY_VALUE_CONFIG WHERE PARAM_KEY='"+result+"' AND TAG_IDENT='"+inputTagswithoutRateSign[1]+"' AND ISACTIVE='Y' )";
					    logger.info("Query to replace key with value is"+internal_query);
				    	tagValue=internal_query;
					}
				}
				else
				{
					if(!key[0].contains("@"))
					{
						tagValue = parser.getValueOf(key[0]);
					}
					else
					{
						String []inputTagswithoutRateSign=key[0].split("@");
						String result = parser.getValueOf(inputTagswithoutRateSign[0]);
		    			String internal_query="";
		    			
		    			internal_query="(SELECT PARAM_VALUE FROM NG_MAST_POS_TAG_KEY_VALUE_CONFIG WHERE PARAM_KEY='"+result+"' AND TAG_IDENT='"+inputTagswithoutRateSign[1]+"' AND ISACTIVE='Y' )" ;
			    		logger.info("Query to replace key with value is"+internal_query);
						tagValue=internal_query;
					}
					
				}
				
				logger.info("Tag Value Derived from ResponseXML is " + tagValue);
				logger.info("Key 2 =" + key[1]);
				tagValue=tagValue.replace("'","''");
				
				
				if(tagValue.contains("SELECT PARAM_VALUE"))
				{
					values=values+tagValue+",";
				}
				else
				{
					if(key[1].contains("$"))
						values=values+"'"+tagValue+"',";
					else
						values=values+"N'"+tagValue+"',";
				}
				
				columnames=columnames+key[1].replace("$","")+",";
			}
			
			columnames=columnames+"ENTRY_DATE_TIME";
			values=values+"'"+date+"')";

			query=insertinto+tablename+" ( "+ columnames +" ) VALUES "+values;
			logger.info("Query for "+callName+" setting response in search screen tables is"+query);
			iformObj.saveDataInDB(query);	

		}
		else
		{
			logger.info("For "+callName+" Status code returned from response is not success ");
			String error_description="Error in fetching SIMAH, please check if data is correct";
			logger.info("For "+callName+" Status code returned from response is not success ");
			return "Error~In "+callName+" error received with error code "+status_code_in_response+"-"+error_description;
		}
		
		
		//Hello
	    String[] callNamesGrid = { "SIMAH_Individual_PreviousEnquiry", "SIMAH_Individual_CI_DETAILS","SIMAH_Individual_ADDRESS","SIMAH_Individual_CONTACTS","SIMAH_Individual_EMPLOYERS","SIMAH_Individual_Narrative","SIMAH_Individual_Public_Notices","SIMAH_Individual_Judgement","SIMAH_Individual_DEFAULT"}; //For SIMAH Individual Grid Details
		//String[] callNamesGrid = { "MSBAcctsDataInq_SearchScreen", "MSBFacilitiesDataInq_SearchScreen"}; //For cortex and bankdetails
		for (String callNames : callNamesGrid) 
			{
				
				logger.info("Response XML received by setResponseDataGrid is"+responseXML);
				tagName = "_TagNameResponseGrid";
				tagNames = GetXML.getProp().getProperty(callNames + tagName);
				
				logger.info(tagNames);
				String[] tagValue = tagNames.split(",");
				
				date = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss").format(new Date());
				
				
				values=" ";
				query="";
				columnames="CIC_NO,";
				insertinto="INSERT INTO ";
				tablename=GetXML.getProp().getProperty(callNames+"_Table_Grid");
				
				delete_query="DELETE FROM "+tablename+" where CIC_NO= '"+cic_number+"' ";
				iformObj.saveDataInDB(delete_query);
				logger.info("With this query table is emptied :: "+delete_query);
				
				statuscode=GetXML.getProp().getProperty(callNames+"_StatusCode");
				status_code_split=statuscode.split("~");
				
				
				for(String tag: tagValue)
				{
					tags=tag.split("~");
					WFXmlResponse objWFxmlResponse = new WFXmlResponse(responseXML);
					logger.info("objWFxmlResponse value is "+objWFxmlResponse);
					
					columnames="CIC_NO,";
					values=" ";
					for(int j=2;j<tags.length;++j)
					{
						String tag_split_values=tags[j];
						logger.info("Tag values split to set column names"+tag_split_values);
						String []hash_split_values=tag_split_values.split("#");
						columnames=columnames+hash_split_values[0].replace("$","")+",";
					}
					
					columnames=columnames+"ENTRY_DATE_TIME";
					logger.info("column names are"+columnames);
					
					if (objWFxmlResponse.getVal(status_code_split[0]).equals(status_code_split[1])) {
					WFXmlList WFXmlList = objWFxmlResponse.createList(tags[0],tags[1]);
					logger.info("Wfmxmlsit is --------------"+WFXmlList);
					for (int i = 0; WFXmlList.hasMoreElements(true); WFXmlList.skip(true), i++) 
					{
					
						values=values+"( '"+cic_number+"',";
						
						for(int j=2;j<tags.length;++j)
						{
							String tag_split_values=tags[j];
							if((!tag_split_values.contains("@")))
							{
								String []hash_split_values=tag_split_values.split("#");
								String result_from_response=WFXmlList.getVal(hash_split_values[1]);
								result_from_response=result_from_response.replace("'","''");
								if(result_from_response== null || result_from_response=="")
								{
									result_from_response=" ";
								}
								
								if(hash_split_values[0].contains("$"))
									values=values+"'"+result_from_response+"',";
								else
									values=values+"N'"+result_from_response+"',";
							}
							else
							{
								String []inputTagswithoutRateSign=tag_split_values.split("@");
								String []hash_split_values=inputTagswithoutRateSign[0].split("#");
								String result_from_response=WFXmlList.getVal(hash_split_values[1]);
								if(result_from_response.equals(null) || result_from_response.equals(""))
								{
									result_from_response=" ";
								}
								String internal_query="";
								internal_query="( SELECT PARAM_VALUE FROM NG_MAST_POS_TAG_KEY_VALUE_CONFIG WHERE PARAM_KEY='"+result_from_response+"' AND TAG_IDENT='"+inputTagswithoutRateSign[1]+"' AND ISACTIVE='Y' )" ;
								values=values+internal_query+",";
							}
							
							
						}
						values=values+"'"+date+"'),";
					}
					
					if (values.endsWith(",")) {
						values = values.substring(0, values.length() - 1);
					}
					
					logger.info("Final column variables are"+columnames);
					logger.info("values are"+values);
					
					query=insertinto+tablename+" ( "+ columnames +" ) VALUES "+values;
					logger.info("Query for setting response in search screen tables is"+query);
					iformObj.saveDataInDB(query);	
					
					}
					else
					{
					//	String error_description="Error in fetching SIMAH, please check if data is correct";
						logger.info("For "+callName+" Status code returned from response is not success ");
						return "Error~In "+callName+" Error receieved";
					}
					
				}
			}
	
		
		
		return "Success~fillSIMAHDataIndividual";
	}



	private String calculateFixedFeeAmount(IFormReference iformObj, String stringdata) 
	{
		logger.info("Inside calculateFixedFeeAmount function");
		String product_category=(String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_PRODUCT_CATEGORY");
		String request_type=(String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_REQUEST_TYPE");
		String cutomer_category=(String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_CUSTOMER_CATEGORY");
		String fixedamount = "0";
		
		try
		{
			String query="SELECT Fixed FROM NG_MAST_POS_PRODUCT A,NG_MAST_POS_FEE B WHERE A.FeeID=B.Fees_ID AND a.CustCategoryID=b.Scheme_ID AND A.Product=(SELECT CODE FROM NG_MAST_PRODUCT WHERE PRODUCT_CATEGORY = '"+product_category+"') AND a.custcategoryID=(SELECT CODE FROM NG_MAST_CUSTOMER WHERE customer_CATEGORY = '"+cutomer_category+"') AND a.request_type='"+request_type+"'";
			logger.info("To calculateFixedFeeAmount query is "+query);
			List<List<String>> result = iformObj.getDataFromDB(query);
			if(result.size()>0)
			{
				fixedamount = (String) result.get(0).get(0);
			}
		}
		catch(Exception e) 
		{
			logger.info("Exception occurred: calculateFixedFeeAmount "+e);
		}
		logger.info("Fixed amount String ============> "+fixedamount);
		
		return fixedamount;
	}



	private String BuyAndContractOnLoad(IFormReference iformObj, String stringdata)
	{
		logger.info("Inside BuyAndContractOnLoad function ");
		try
		{
			String query="SELECT PARAM_VALUE from NG_FLEET_PARAM_CONFIG WHERE PARAM_KEY in ('COMM_MEASUREMENT','PURCHASE_CHARGES') AND ISACTIVE='Y' ";
			List<List<String>> buy_and_contract_onload_values = iformObj.getDataFromDB(query);
			logger.info("BuyAndContractOnLoad Query and result are "+query+" and "+buy_and_contract_onload_values);
			if(buy_and_contract_onload_values.size()==2)
				{
					iformObj.setValue("Q_NG_DIS_COMMODITY_PURCHASE_MEASUREMENT",buy_and_contract_onload_values.get(0).get(0));
					iformObj.setValue("Q_NG_DIS_COMMODITY_PURCHASE_PURCHASE_CHRGS",buy_and_contract_onload_values.get(1).get(0));
					logger.info("Setting values "+buy_and_contract_onload_values.get(0)+" and "+buy_and_contract_onload_values.get(1));
				}
		}
		catch(Exception e)
		{
			logger.info("Exception Occurred: BuyAndContractOnLoad "+e);
		}
		
		return "BuyAndContractOnLoad Executed Successfully";
	}



	private String LoanDisbursement(IFormReference iformObj, String stringdata) {
		String callName="MSBCommodityMng_LoanDisbursement";
		String responseXML = createRequestXML(iformObj, callName);
		JSONObject jobj2 = setResponseData_2(iformObj, callName, responseXML);
		logger.info("Inside LoanDisbursement call "+jobj2);
		String return_string="Success~LoanDisbursement executed";

		for(Iterator iterator = jobj2.keySet().iterator(); iterator.hasNext();)
		{
			String key = (String) iterator.next();
			if(key.equalsIgnoreCase("Error"))
			{
				return_string="Error~"+jobj2.get(key).toString();
			}
			else
			{
				logger.info("Values set for"+key+" are "+jobj2.get(key).toString());
				setControlValue(iformObj, key, jobj2.get(key).toString());
			}
		}
		
		return return_string;
	}



	private String TMSblockUnblockGrid(IFormReference iformObj, String stringdata) {

		logger.info("\n\n\n==== Get Call TMS  ============================================");
		org.json.simple.JSONArray arr = new org.json.simple.JSONArray();
		String wi_name = getWorkitemName(iformObj);
		String query = "SELECT MERCHANT_NAME from NG_FLEET_STMTDATA_CORTEX_DETAIL WHERE WI_NAME='" + wi_name + "'"; //Dependent on Cortex
		try {
			List<List<String>> marchant_id = getDataFromDB(iformObj, query);
			logger.info("\n\n ========================\n result of query " + marchant_id.size());
			for (List<String> value : marchant_id) {
				String result = value.get(0);
				logger.info("\nmarchant Id's form query are" + result);
				// execute api
				org.json.JSONObject jsonGETResponse = executeGETurl(result);
				logger.info("\nresponse of marchantID is ====> " + jsonGETResponse.toString(4));
				String status = jsonGETResponse.getString("success");
				String merchantID = jsonGETResponse.getJSONObject("data").getString("merchantID");
				logger.info("\n value form response is " + status + " and id..is " + merchantID);
				org.json.JSONObject json = new org.json.JSONObject();
				json.put("TMS Status", status);
				json.put("Merchant ID", merchantID);
				arr.add(json);
				logger.info("Inside TMSblockUnblockGrid array is " + arr);
			}
			iformObj.addDataToGrid("TMS_GRID", arr);
		} catch (Exception e) {
			logger.info("Exception occurred: TMS GRID " + e);
		}
		return "Data set to be TMS Grid Successfully";
	}
	
	private String ExecuteAutoSell(IFormReference iformObj, String stringdata) {
		logger.info("Inside ExecuteAutoSell call first call");
		String callName = "DDCAP_Cancel"; //For DealKey details
		String responseXML = createRequestXML(iformObj, callName);
		JSONObject jobj = setResponseData(iformObj, callName, responseXML);
		for (Iterator iterator = jobj.keySet().iterator(); iterator.hasNext();) 
		{
			String key = (String) iterator.next();
			logger.info("Values set for" + key + " are " + jobj.get(key).toString());
			setControlValue(iformObj, key, jobj.get(key).toString());
		}
		
		callName = "MSBCommodityMng_AutoSell"; //For DealKey details
		responseXML = createRequestXML(iformObj, callName);
		JSONObject jobj2 = setResponseData_2(iformObj, callName, responseXML);
		logger.info("Inside ExecuteAutoSell call second call"+jobj2);
		String return_string="Success~ExecuteAutoSell executed";

		for(Iterator iterator = jobj2.keySet().iterator(); iterator.hasNext();)
		{
			String key = (String) iterator.next();
			if(key.equalsIgnoreCase("Error"))
			{
				return_string="Error~"+jobj2.get(key).toString();
			}
			else
			{
				logger.info("Values set for"+key+" are "+jobj2.get(key).toString());
				setControlValue(iformObj, key, jobj2.get(key).toString());
			}
		}
		
		return return_string;
	}
	
	private String ConfirmSell(IFormReference iformObj, String stringdata) {
		logger.info("Inside ConfirmSale call ==>");
		String callName = "confirmsale"; //For DealKey details
		String responseXML = createRequestXML(iformObj, callName);
		JSONObject jobj = setResponseData(iformObj, callName, responseXML);

		for(Iterator iterator = jobj.keySet().iterator(); iterator.hasNext();)
		{
		String key = (String) iterator.next();
		logger.info("Values set for"+key+" are "+jobj.get(key).toString());
		setControlValue(iformObj, key, jobj.get(key).toString());
		}
		
		logger.info("Inside ConfirmSale call ==>");
		callName = "MSBCommodityMng_sale"; //For DealKey details
		responseXML = createRequestXML(iformObj, callName);
		/*
		JSONObject jobj2 = setResponseData(iformObj, callName, responseXML);

		for(Iterator iterator = jobj2.keySet().iterator(); iterator.hasNext();)
		{
		String key = (String) iterator.next();
		logger.info("Values set for"+key+" are "+jobj2.get(key).toString());
		setControlValue(iformObj, key, jobj2.get(key).toString());
		}
		*/
		JSONObject jobj2 = setResponseData_2(iformObj, callName, responseXML);
		logger.info("For T24 ConfirmSell call object is :"+jobj2);
		String return_string="Success~ConfirmSell executed";

		for(Iterator iterator = jobj2.keySet().iterator(); iterator.hasNext();)
		{
			String key = (String) iterator.next();
			if(key.equalsIgnoreCase("Error"))
			{
				return_string="Error~"+jobj2.get(key).toString();
			}
			else
			{
				logger.info("Values set for"+key+" are "+jobj2.get(key).toString());
				setControlValue(iformObj, key, jobj2.get(key).toString());
			}
		}
		
		return return_string;
	}

	
	
	private String CommoditySell(IFormReference iformObj, String stringdata)
	{
		logger.info("Inside CommoditySell");

		String callName = "sale"; // For DDPPurchase details
		String responseXML = DDPRequestXML(iformObj, callName);

		logger.info("GOT response msg in CommoditySell " + responseXML);

		/*
		JSONObject jobj = setResponseData(iformObj, callName, responseXML);
		for (Iterator iterator = jobj.keySet().iterator(); iterator.hasNext();) {
			String key = (String) iterator.next();
			logger.info("Values set for" + key + " are " + jobj.get(key).toString());
			setControlValue(iformObj, key, jobj.get(key).toString());
		}
		*/
		JSONObject jobj2= setResponseData_2(iformObj, callName, responseXML);
		logger.info("For Broker CommoditySell call object is :"+jobj2);
		String return_string="Success~CommoditySell executed";
		for(Iterator iterator = jobj2.keySet().iterator(); iterator.hasNext();)
		{
			String key = (String) iterator.next();
			if(key.equalsIgnoreCase("Error"))
			{
				return_string="Error~"+jobj2.get(key).toString();
			}
			else
			{
				logger.info("Values set for"+key+" are "+jobj2.get(key).toString());
				setControlValue(iformObj, key, jobj2.get(key).toString());
			}
		}
		
		return return_string;
	}
	
private String ConfirmPurchase(IFormReference iformObj, String stringdata) 
{
	logger.info("Inside ConfirmSale call ==>");
	
	String confirm_status=getControlValue(iformObj, "BUY_COMM_CONFIRM_STATUS");
	String commodity_purchase_transaction_ref=getControlValue(iformObj, "Q_NG_DIS_COMMODITY_PURCHASE_TRANSACT_REFERENCE");
	String return_string="";
	
	if(confirm_status.length()==0)
	{
		String callName = "confirmpurchase"; //For DealKey details
		String responseXML = createRequestXML(iformObj, callName);
		JSONObject jobj_2 = setResponseData(iformObj, callName, responseXML);
		logger.info("For Broker CommoditySell call object is :"+jobj_2);
		
		return_string="Success~CommodityPurchase executed";
		
		for(Iterator iterator = jobj_2.keySet().iterator(); iterator.hasNext();)
		{
			String key = (String) iterator.next();
			if(key.equalsIgnoreCase("Error"))
			{
				return_string="Error~"+jobj_2.get(key).toString();
			
				return 	return_string;
			}
			else
			{
				logger.info("Values set for"+key+" are "+jobj_2.get(key).toString());
				setControlValue(iformObj, key, jobj_2.get(key).toString());
			}
		}
	}
	
	confirm_status=getControlValue(iformObj, "BUY_COMM_CONFIRM_STATUS"); //Don't remove its required.
	logger.info("Confirm status calculated again is "+confirm_status);
	
	if(confirm_status.length()>0 && commodity_purchase_transaction_ref.length()==0)
	{
		String callName = "MSBCommodityMng"; // For T24 Reference details
		String responseXML = createRequestXML(iformObj, callName);
		
	
		JSONObject jobj2 = setResponseData_2(iformObj, callName, responseXML);
		logger.info("For T24 CommodityPurchase call object is :"+jobj2);
		
	
		for(Iterator iterator = jobj2.keySet().iterator(); iterator.hasNext();)
		{
			String key = (String) iterator.next();
			if(key.equalsIgnoreCase("Error"))
			{
				return_string="Error~"+jobj2.get(key).toString();
			}
			else
			{
				logger.info("Values set for"+key+" are "+jobj2.get(key).toString());
				setControlValue(iformObj, key, jobj2.get(key).toString());
			}
		}
	}
		// post hit here....... mohit's code 05/12/2021
		
		
		logger.info("\n\nhit json API now ++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\n");
		String callName="TMSBlock/Unblock";
		String Url=GetXML.getProp().getProperty(callName+"_Endpoint_URL");
		//String Url = "http://10.98.118.47:4001/tmsrpa";
		//TMSBlock/Unblock_Endpoint_URL=http://10.98.118.47:4001/tmsrpa
		logger.info("For TMS blocking url is "+Url);
		//String merchantIDs = "";
		String contractExpiryDate = "";
		String govtLicenseNumber = "";
	
		String cic_no = getControlValue(iformObj, "Q_NG_POS_COMPANY_DATA_CIC");
		String qury = "SELECT CR_NO from NG_FLEET_CIC_DETAILS_GRID WHERE CIC_NO = '" + cic_no + "'";
		try 
		{
			logger.info("Query to replace key with value is" + qury);
			List<List<String>> code_values = iformObj.getDataFromDB(qury);
			if (code_values.size() > 0) 
			{
				govtLicenseNumber = code_values.get(0).get(0);
			}
		} catch (Exception e) 
		{
			logger.info(
					"Exception occurred: during MkQQQQ Query	d: Database Query " + qury + " and stack trace is\n\n" + e);
		}
	
		/*
		String qury2 = "SELECT MERCHANT_NAME from NG_FLEET_SEARCH_POS_THROUGPUT_DATA_ALL_MACHINES WHERE CIC_NO= '" + cic_no+ "'";	
		try 
		{
			logger.info("Query to replace key with value is" + qury2);
			List<List<String>> marchantID = iformObj.getDataFromDB(qury2);
			if (marchantID.size() > 0)
			{
				merchantIDs = marchantID.get(0).get(0);
			}
		} catch (Exception e) 
		{
			logger.info(
					"Exception occurred: during MkQQQQ Query d: Database Query " + qury + " and stack trace is\n\n" + e);
		}
		*/
	
		String contractdt = (String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_CONTRACT_DATE");
		int tanure = Integer.parseInt((String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_TENURE"));
		logger.info("contractdt =: " + contractdt + "tanure =: " + tanure);
	
		SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
		ZoneId defaultZoneId = ZoneId.systemDefault();
		if (!(contractdt.contains("-")))
		{
			contractdt = contractdt.replace("/", "-");
		} else 
		{
			logger.info("Not Contains -: ");
		}
		LocalDate dater = LocalDate.parse(contractdt);
		logger.info("\n\nDate : " + contractdt);
		LocalDate newDate = dater.plusMonths(tanure);
		logger.info("\n\nNew Date : " + newDate);
		Date date = Date.from(newDate.atStartOfDay(defaultZoneId).toInstant());
		logger.info("\n\nNew Date ===: " + sdf.format(date));
		String serDate = sdf.format(date);
		
		String wi_name=getWorkitemName(iformObj);
		
		String qury2 = "SELECT MERCHANT_NUMBER from NG_FLEET_MERCHANT_DETAILS_GRID WHERE WI_NAME='"+wi_name+"' ";	
		try 
		{
			List<List<String>> marchantID = iformObj.getDataFromDB(qury2);
			logger.info("Query to fetch merchant number is" + qury2+" and its result is "+marchantID);
			if (marchantID.size() > 0)
			{
				for(String merchantIDs:marchantID.get(0))
				{
					org.json.JSONObject jb = new org.json.JSONObject();
					jb.put("merchantID", merchantIDs);
					jb.put("contractExpiryDate", serDate);
					jb.put("govtLicenseNumber", govtLicenseNumber);
					org.json.JSONObject jsonResponse = executePOSTRequest(jb, Url);
					logger.info("~~~~~~~~~~Getting JSON Response m@au~~~~~>>>>>>" + jsonResponse);
					
					String callNameLog = "TMSBlock/Unblock";
					String Callreq = jb.toString();
				    String activityName = getActivityName(iformObj);
				    String usrNAme = getUserName(iformObj);
					String colNames = "CALL_NAME,REQUEST,REQUEST_SENT,RESPONSE,RESPONSE_RECEIVED,EXCEPTION_OCCURED,STATUS,WI_NAME,ACTIVITY_NAME,USERNAME";
					logger.info("All Ok till now");
					String colValues = "'"+callNameLog+"','"+Callreq+"','"+getCurrentTimeStamp()+"','"+jsonResponse.toString()+"','"+getCurrentTimeStamp()+"','','','"+wi_name+"','"+activityName+"','"+usrNAme+"'";
					String logQury = "INSERT INTO NG_ARB_API_LOGS (CALL_NAME, REQUEST, REQUEST_SENT, RESPONSE, RESPONSE_RECEIVED, EXCEPTION_OCCURED, STATUS, WI_NAME, ACTIVITY_NAME, USERNAME)VALUES ("+colValues+")";
					logger.info("\n\n ------------------------ Query for API Logs"+logQury+"\n--------------------------------------------");	
				    saveDataInDB(iformObj, logQury);
				    logger.info("~~~~~~~~~~API Logs Saved... m@au~~~~~>>>>>>"+jsonResponse);
				}
			}
		} 
		catch (JSONException e) 
		{
			// TODO Auto-generated catch block
			logger.info("Exception occurred: ConfirmPurchase: TMS Blocking and exception is "+e);
			e.printStackTrace();
		}
		
	//}
	
	return return_string;
}

public String getCurrentTimeStamp()
/*      */   {
/*      */     try {
/*  337 */       return new Timestamp(System.currentTimeMillis()).toString();
/*      */     } catch (Exception e) {
/*  339 */     System.out.println(e);
/*  340 */     }return "";
/*      */   }

private String cancel(IFormReference iformObj, String stringdata) 
{
	
	return "";
}
private String CallCommodityPurchase(IFormReference iformObj, String stringdata) 
{
	logger.info("Inside DDP call ++++++++");
    
	String callName = "purchase"; // For DDPPurchase details
	String responseXML = DDPRequestXML(iformObj, callName);

	logger.info("GOT response msg --------" + responseXML);
	JSONObject jobj_2 = setResponseData_2(iformObj, callName, responseXML);
	logger.info("For DDCAP Commodity Purchase object is :"+jobj_2);
	String return_string="Success~Broker Purchase Executed Successfully";

	for(Iterator iterator = jobj_2.keySet().iterator(); iterator.hasNext();)
	{
		String key = (String) iterator.next();
		if(key.equalsIgnoreCase("Error"))
		{
			return_string="Error~"+jobj_2.get(key).toString();
		}
		else
		{
			logger.info("Values set for"+key+" are "+jobj_2.get(key).toString());
			setControlValue(iformObj, key, jobj_2.get(key).toString());
		}
	}		

return return_string;
	
}

	
	private String return_max_min_amount(IFormReference iformObj, String stringdata) {
		logger.info("+++++++++++++ we are inside max and min function ++++++++++++++");
		String product_category=(String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_PRODUCT_CATEGORY");
		String request_type=(String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_REQUEST_TYPE");
		String cutomer_category=(String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_CUSTOMER_CATEGORY");
		String maxamt = "";
		String minamt = "";
		try {
			String query = "SELECT max(Max_Amount), min(Min_Amount) FROM NG_MAST_POS_PRODUCT A,NG_MAST_POS_FEE B WHERE A.FeeID=B.Fees_ID AND a.CustCategoryID=b.Scheme_ID AND A.Product=(SELECT CODE FROM NG_MAST_PRODUCT WHERE PRODUCT_CATEGORY = '"+product_category+"') AND a.custcategoryID=(SELECT CODE FROM NG_MAST_CUSTOMER WHERE customer_CATEGORY = '"+cutomer_category+"') AND a.request_type='"+request_type+"' ";
			logger.info("To select min and max value query is "+query);
			List<List<String>> result = iformObj.getDataFromDB(query);
			if(result.size()>0)
			{
				maxamt = (String) result.get(0).get(0);
				minamt = (String) result.get(0).get(1);
			}
			
		}
		catch(Exception e) {
			logger.info("Exception occurred: retrurnMax_and_Min "+e);
		}
		String minMaxData = maxamt+"@"+minamt;
		logger.info("min max data String ============> "+minMaxData);

		return minMaxData;
	}
	
	private String return_max_min_FEE_amount(IFormReference iformObj, String stringdata) {
		logger.info("+++++++++++++ we are inside max and min function ++++++++++++++");
		String product_category=(String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_PRODUCT_CATEGORY");
		String request_type=(String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_REQUEST_TYPE");
		String cutomer_category=(String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_CUSTOMER_CATEGORY");
		String maxamt = "";
		String minamt = "";
		try {
			String query = "SELECT  max(Max_Fees_Amount), min(Min_Fees_Amount) FROM NG_MAST_POS_PRODUCT A,NG_MAST_POS_FEE B WHERE A.FeeID=B.Fees_ID AND a.CustCategoryID=b.Scheme_ID AND A.Product=(SELECT CODE FROM NG_MAST_PRODUCT WHERE PRODUCT_CATEGORY = '"+product_category+"') AND a.custcategoryID=(SELECT CODE FROM NG_MAST_CUSTOMER WHERE customer_CATEGORY = '"+cutomer_category+"') AND a.request_type='"+request_type+"' ";
			logger.info("To select min and max value query is "+query);
			List<List<String>> result = iformObj.getDataFromDB(query);
			if(result.size()>0)
			{
				maxamt = (String) result.get(0).get(0);
				minamt = (String) result.get(0).get(1);
			}
		}
		catch(Exception e) {
			logger.info("Exception occurred: retrurnMax_and_Min "+e);
		}
		String minMaxData = maxamt+"@"+minamt;
		logger.info("min max data String ============> "+minMaxData);

		return minMaxData;
	}
	
	private String calculateLosAppNum(IFormReference iformObj, String stringdata) 
	{
		String query="SELECT NEXT VALUE FOR SEQ_LOS_APPLICATION_NUMBER AS LOSAPPLICATIONNUMBER";
		List<List<String>> los_app_num_list = iformObj.getDataFromDB(query);
		String los_app_num="";
		if(los_app_num_list.size()>0)
		{
			los_app_num=los_app_num_list.get(0).get(0);
		}
		int no_of_zeroes=10-los_app_num.length();
	    for(int i=0;i<no_of_zeroes;i++)
		{
	    	los_app_num='0'+los_app_num;
	    }
		setControlValue(iformObj,"LOS_APP_NUM",los_app_num);
		//dbquery="UPDATE NG_FLEET_EXTTABLE SET LOS_APP_NUM='"+los_app_num+"' WHERE WI_NAME='"+processInstanceID+"'";
		//logger.info("Query to update disbursal bank name from search screen is "+dbquery);
		//saveDataInDB(iformObj, dbquery);
		logger.info("Setting los application number as "+los_app_num);
		return los_app_num;
	}
	private String fillNoOfExceptionAndAlerts(IFormReference iformObj, String stringdata) {
		try
		{
			String wi_name=getWorkitemName(iformObj);
			String query="SELECT COUNT(PQ_CATEGORY) from NG_FLEET_PQLIST_STATUS_GRID WHERE PQ_CATEGORY='Alert' AND WI_NAME='"+wi_name+"' AND PQ_STATUS='Fail'  ";
			List<List<String>> alert_exception_count = iformObj.getDataFromDB(query);
			String no_of_exceptions="0",no_of_alerts="0";
			if(alert_exception_count.size()>0)
			{
				no_of_alerts=alert_exception_count.get(0).get(0);
			}
			setControlValue(iformObj,"Q_NG_POS_DECISION_TOTAL_ALERTS", no_of_alerts);
			
			query="SELECT COUNT(PQ_CATEGORY) from NG_FLEET_PQLIST_STATUS_GRID WHERE PQ_CATEGORY='Exception' AND WI_NAME='"+wi_name+"' AND PQ_STATUS='Fail'  ";
			alert_exception_count = iformObj.getDataFromDB(query);
			if(alert_exception_count.size()>0)
			{
				no_of_exceptions=alert_exception_count.get(0).get(0);
			}
			setControlValue(iformObj,"NO_OF_EXCEPTION", no_of_exceptions);
			
			logger.info("Inside ");
			
		}
		catch (Exception e)
		{
			logger.info("Exception occurred: fillNoOfExceptionAndAlerts ");
		}
		return "fillNoOfExceptionAndAlerts executed successfully";
	}

	private String CallShortCICMng(IFormReference iformObj, String stringdata) {
		// TODO Auto-generated method stub
		logger.info("coming call name  " +stringdata);
		if(stringdata.equalsIgnoreCase("Company")) //Company
		{
			String callName = "ShortCICMng_Corporate";
			logger.info("inside company det" +callName +"stringdata" +stringdata);
			String responseXML = createRequestXML_2(iformObj, callName);
			logger.info("response xml" +responseXML );
			
			JSONObject jobj = setResponseData(iformObj, callName, responseXML);
			logger.info("For corporate short cic object is "+jobj);
			for(Iterator iterator = jobj.keySet().iterator(); iterator.hasNext();)
				{
					String key = (String) iterator.next();
					logger.info("Values set for"+key+" are "+jobj.get(key).toString());
					setControlValue(iformObj, key, jobj.get(key).toString());
				}
						
		}
		else if(stringdata.equalsIgnoreCase("Individual")) //Individual
		{
			String callName = "ShortCICMng_Person";
			String responseXML = createRequestXML_2(iformObj, callName);
			JSONObject jobj = setResponseData(iformObj, callName, responseXML);
			logger.info("inside indivi details");
			logger.info("For individual short cic object is "+jobj);
			for(Iterator iterator = jobj.keySet().iterator(); iterator.hasNext();)
				{
					String key = (String) iterator.next();
					logger.info("Values set for"+key+" are "+jobj.get(key).toString());
					setControlValue(iformObj, key, jobj.get(key).toString());
				}
			logger.info("For individual short cic object is "+jobj);
		}
		return "calling short CIC";
	}


	
	private String return_max_min_rate(IFormReference iformObj, String stringdata) {
		String minMaxData=null;
		try {
		logger.info("+++++++++++++ we are inside max and min function ++++++++++++++");
		// max percantage
		String product_category=(String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_PRODUCT_CATEGORY");
		String customer_category=(String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_CUSTOMER_CATEGORY");
		String request_type=(String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_REQUEST_TYPE");
		String campaign=(String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_CAMPAIGN");
		String tenure=(String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_TENURE");
		String requested_amt=(String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_REQ_AMNT_SAR");
		
		if(requested_amt==null || requested_amt=="")
		{
			requested_amt="0";
		}
		
		String query="SELECT Max_Rate,Min_Rate FROM NG_MAST_POS_PRODUCT A,NG_MAST_POS_FEE B WHERE A.FeeID=B.Fees_ID AND a.CustCategoryID=b.Scheme_ID AND A.Product=(SELECT CODE FROM NG_MAST_PRODUCT WHERE PRODUCT_CATEGORY = '"+product_category+"') AND a.custcategoryID=(SELECT CODE FROM NG_MAST_CUSTOMER WHERE customer_CATEGORY = '"+customer_category+"') AND a.request_type='"+request_type+"' AND a.campaign='"+campaign+"' AND a.max_tenure>='"+tenure+"' AND a.max_amount>="+requested_amt+" AND a.min_amount<="+requested_amt+" ";
		
		logger.info("+++++++++++++ we are inside max and min function ++++++++++++++");
		String maxamt = "0";
		String minamt = "0";
		
		try {
			List<List<String>> result = iformObj.getDataFromDB(query);
				if(result.size()>0)
				{
					maxamt = (String) result.get(0).get(0);
					minamt = (String) result.get(0).get(1);
				}	
			}
			
		catch(Exception e) {
			logger.info("Exception occurred: retrurnMax_and_Min "+e);
		}
		minMaxData = maxamt+"@"+minamt;
		logger.info("min max data String ============> "+minMaxData);
		}catch(Exception e) {
			logger.info("Exception occurred: retrurnMax_and_Min "+e);
		}
		return minMaxData;
	}
	
	private String return_max_min_FEE_rate(IFormReference iformObj, String stringdata) {
		logger.info("+++++++++++++ we are inside return_max_min_FEE_rate function ++++++++++++++");
		// max percantage
		String product_category=(String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_PRODUCT_CATEGORY");
		String customer_category=(String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_CUSTOMER_CATEGORY");
		String request_type=(String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_REQUEST_TYPE");
		String campaign=(String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_CAMPAIGN");
		String tenure=(String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_TENURE");
		String requested_amt=(String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_REQ_AMNT_SAR");
		
		if(requested_amt==null || requested_amt=="")
		{
			requested_amt="0";
		}
		
		String query="SELECT FEE_Max_Rate,Fee_Min_Rate  FROM NG_MAST_POS_PRODUCT A,NG_MAST_POS_FEE B WHERE A.FeeID=B.Fees_ID AND a.CustCategoryID=b.Scheme_ID AND A.Product=(SELECT CODE FROM NG_MAST_PRODUCT WHERE PRODUCT_CATEGORY = '"+product_category+"') AND a.custcategoryID=(SELECT CODE FROM NG_MAST_CUSTOMER WHERE customer_CATEGORY = '"+customer_category+"') AND a.request_type='"+request_type+"' AND a.campaign='"+campaign+"' AND a.max_tenure>='"+tenure+"' AND a.max_amount>="+requested_amt+" AND a.min_amount<="+requested_amt+" ";
		
		logger.info("+++++++++++++ we are inside max and min function ++++++++++++++");
		String maxamt = "0";
		String minamt = "0";
		
		try {
			List<List<String>> result = iformObj.getDataFromDB(query);
				if(result.size()>0)
				{
					maxamt = (String) result.get(0).get(0);
					minamt = (String) result.get(0).get(1);
				}	
			}
			
		catch(Exception e) {
			logger.info("Exception occurred: retrurnMax_and_Min "+e);
		}
		String minMaxData = maxamt+"@"+minamt;
		logger.info("min max data String ============> "+minMaxData);
		
		return minMaxData;
	}
	
	/*Sahdev kansal
	private String return_max_min_rate(IFormReference iformObj, String stringdata) {
		logger.info("+++++++++++++ we are inside max and min function ++++++++++++++");
		// max percantage
		String product_category=(String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_PRODUCT_CATEGORY");
		String customer_category=(String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_CUSTOMER_CATEGORY");
		String request_type=(String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_REQUEST_TYPE");
		String campaign=(String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_CAMPAIGN");
		String tenure=(String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_TENURE");
		String requested_amt=(String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_REQ_AMNT_SAR");
		
		if(requested_amt==null || requested_amt=="")
		{
			requested_amt="0";
		}
		
		String query="SELECT Max_Rate,Min_Rate FROM NG_MAST_POS_PRODUCT A,NG_MAST_POS_FEE B WHERE A.FeeID=B.Fees_ID AND a.CustCategoryID=b.Scheme_ID AND A.Product=(SELECT CODE FROM NG_MAST_PRODUCT WHERE PRODUCT_CATEGORY = '"+product_category+"') AND a.custcategoryID=(SELECT CODE FROM NG_MAST_CUSTOMER WHERE customer_CATEGORY = '"+customer_category+"') AND a.request_type='"+request_type+"' AND a.campaign='"+campaign+"' AND a.max_tenure>='"+tenure+"' AND a.max_amount>="+requested_amt+" AND a.min_amount<="+requested_amt+" ";
		
		logger.info("+++++++++++++ we are inside max and min function ++++++++++++++");
		String maxamt = "0";
		String minamt = "0";
		
		try {
			List<List<String>> result = iformObj.getDataFromDB(query);
				if(result.size()>0)
				{
					maxamt = (String) result.get(0).get(0);
					minamt = (String) result.get(0).get(1);
				}	
			}
			
		catch(Exception e) {
			logger.info("Exception occurred: retrurnMax_and_Min "+e);
		}
		String minMaxData = maxamt+"@"+minamt;
		logger.info("min max data String ============> "+minMaxData);
		
		return minMaxData;
	}
	*/
	private String fetchBankAccount(IFormReference iformObj, String stringdata) {
		try
		{
		iformObj.clearTable("BANK_ACCNT_DET_GRID");
		String workitem=getWorkitemName(iformObj);
		//String query="SELECT DISTINCT(ACC_NO),BANK_NAME,ACC_STATUS from NG_FLEET_STMTDATA_ACCMOVMNT_GRID WHERE WI_NAME='"+workitem+"' ";
		String query="SELECT WI_NAME from NG_FLEET_CLOSING_BALANCE_GRID WHERE WI_NAME = '"+workitem+"' ";
        List<List<String>> result = iformObj.getDataFromDB(query);
        List<List<String>> bank_details = null;
        if(result.size()>0)
		{
			if(result.get(0).size()>0)
			{
				query="select ACC_NO,BANK_NAME,ACC_STATUS,CLOSING_BALANCE,ACCOUNT_OPEN_DATE  from NG_FLEET_STMTDATA_ACCMOVMNT_GRID A,NG_FLEET_CLOSING_BALANCE_GRID B where A.WI_NAME=B.WI_NAME AND A.wi_name = '"+workitem+"' EXCEPT select ACC_NO,BANK_NAME,ACC_STATUS,CLOSING_BALANCE,ACCOUNT_OPEN_DATE  from NG_FLEET_STMTDATA_ACCMOVMNT_GRID A, NG_FLEET_CLOSING_BALANCE_GRID B where A.WI_NAME=B.WI_NAME AND  A.wi_name = '"+workitem+"' and ACC_STATUS =''";
				bank_details = iformObj.getDataFromDB(query);
				logger.info("Query to fetch bank account details is"+query+"and its result is "+bank_details);
			}
			else
			{
				query="select ACC_NO,BANK_NAME,ACC_STATUS,'',''  from NG_FLEET_STMTDATA_ACCMOVMNT_GRID A where A.wi_name = '"+workitem+"' EXCEPT select ACC_NO,BANK_NAME,ACC_STATUS,'',''  from NG_FLEET_STMTDATA_ACCMOVMNT_GRID A where A.wi_name = '"+workitem+"' and ACC_STATUS =''";
				bank_details = iformObj.getDataFromDB(query);
				logger.info("Query to fetch bank account details is"+query+"and its result is "+bank_details);
				
			}
		}
		else
		{
			query="select ACC_NO,BANK_NAME,ACC_STATUS,'',''  from NG_FLEET_STMTDATA_ACCMOVMNT_GRID A where A.wi_name = '"+workitem+"' EXCEPT select ACC_NO,BANK_NAME,ACC_STATUS,'',''  from NG_FLEET_STMTDATA_ACCMOVMNT_GRID A where A.wi_name = '"+workitem+"' and ACC_STATUS =''";
			bank_details = iformObj.getDataFromDB(query);
			logger.info("Query to fetch bank account details is"+query+"and its result is "+bank_details);
		}
		
		JSONArray jsonArray =new JSONArray();
		JSONObject jsonobject;
		for(List<String> temp:bank_details)
		{
			if(temp.size()==5)
			{
				jsonobject=new JSONObject();
				jsonobject.put("Bank Name",temp.get(1));
				jsonobject.put("Account Number",temp.get(0));
				jsonobject.put("Closing Balance",temp.get(3));
				jsonobject.put("Status ",temp.get(2));
				jsonobject.put("Relationship Since",temp.get(4));
				jsonArray.add(jsonobject);
			}
		}
		
		iformObj.addDataToGrid("BANK_ACCNT_DET_GRID",jsonArray);
		
		}
		catch (Exception e)
		{
			logger.info("Exception occurred: fetchBankAccount"+e);
		}
		return "fetchBankAccount executed successfully";
	}
	private String test3check(IFormReference iformObj, String stringdata) {
	
		JSONArray jsonArray =new JSONArray();
		JSONObject parentObj;
		parentObj = new JSONObject();
		parentObj.put("qAdvancelist1807_text", "5000");
		JSONArray chilGridArray=new JSONArray();
		JSONObject childGridRowObject=new JSONObject();
		childGridRowObject.put("childtxt","childtext");
		childGridRowObject.put("insertionorderid","0");
		chilGridArray.add(childGridRowObject);
		parentObj.put("table3_table4",chilGridArray);
		parentObj.put("INSERTIONORDERID","0");
		jsonArray.add(parentObj);
		iformObj.addDataToGrid("table3", jsonArray);

		return "test3check success";
	}
	/*
	private String AdvanceListViewTest(IFormReference iformObj, String stringdata) {
		 logger.info("Inside AdvanceListViewTest");
		 JSONArray jsonArray=new JSONArray();
		 JSONObject obj=new JSONObject();
		 obj.put("Q_NG_POS_RELATED_PARTY_GRID_NG_POS_RELATED_PARTY_DETAILS_CIC", "112");
		 obj.put("Q_NG_POS_RELATED_PARTY_GRID_NG_POS_INDIVIDUAL_DETAILS_GENDER", "MAle");
		 //obj.put("FOUR", "2");
		 //obj.put("FIVE", "2");
		 jsonArray.add(obj);
		 iformObj.addDataToGrid("table85",jsonArray);
		 logger.info("Inside AdvanceListViewTest and jsonarray is "+jsonArray);
		return "AdvanceListViewTest returns sucess";
	}
	
	private String AdvanceListViewTest_2(IFormReference iformObj, String stringdata) {
		 logger.info("Inside AdvanceListViewTest");
		 JSONArray jsonArray=new JSONArray();
		 JSONObject obj=new JSONObject();
		 obj.put("THREE", "112");
		 obj.put("FIVE", "1212");
		 //obj.put("FOUR", "2");
		 //obj.put("FIVE", "2");
		 jsonArray.add(obj);
		 iformObj.addDataToGrid("table10049",jsonArray);
		 logger.info("Inside AdvanceListViewTest and jsonarray is "+jsonArray);
		return "AdvanceListViewTest returns sucess";
	}
	*/
	private String relatedpartyfetchCIC(IFormReference iformObj, String stringdata) 
	{
		try
		{
		String callName = "MSBEntityDataInq"; //For CRS details
		JSONObject jsonobj = new JSONObject();

			logger.info("Inside createRequestXML Function and callName is " + callName);
			String tagName = "_TagName";
			
			String request_prefix=GetXML.getProp().getProperty(callName+"_RequestPrefix");
			if(request_prefix.equals(null))
			{
				request_prefix="";
			}
			logger.info("Request prefix is "+request_prefix+"please check");
			
			String header_tags=GetXML.getProp().getProperty(callName+"_Header");
			String []header_tags_arry=header_tags.split(",");
			
			logger.info("Header tags are "+header_tags);
			JSONObject jsonobj_header=new JSONObject();
			for(String temp:header_tags_arry)
			{
				String[] hash_split=temp.split("#");
				jsonobj_header.put(hash_split[0],hash_split[1]);
			}
			
			logger.info("JSOn object is "+jsonobj_header);
		
			String tagNames = GetXML.getProp().getProperty(callName + tagName);
			logger.info(tagNames);
			String[] tags = tagNames.split(",");
	
			String requestXML = readDummyRequest(callName);
	
			XMLParser parser = new XMLParser(requestXML);
			
	
			for (String tag : tags) 
			{
				String tagValue = parser.getValueOf(request_prefix+tag);
				logger.info("tag values are"+tagValue);
				if(tagValue.contains("header~"))
				{
					try {
						
					if(tagValue.split("~")[1].equalsIgnoreCase("UUID"))
					{
						parser.changeValue(request_prefix+tag, java.util.UUID.randomUUID().toString());
					}
					else
					{
					String value=(String) jsonobj_header.get(tagValue.split("~")[1]);
					logger.info("Value to be replaced by jsonobj_header is "+value);
					parser.changeValue(request_prefix+tag, value);
					}
					}
					catch(Exception e)
					{
						logger.info("Exception is "+e);
					}
				}
				if (tagValue.startsWith("formid~")) {
					String value = (String) iformObj.getValue(tagValue.split("~")[1]);
					parser.changeValue(request_prefix+tag, value);
				}
				
			}
			
			String padded_cic_no= getControlValue(iformObj, "table10599_CHILD_CIC");
			parser.changeValue(request_prefix+"CICNum",padded_cic_no);
			String language_tag=GetXML.getProp().getProperty(callName+"_LanguageTag");
			String session_lang=(String) iformObj.getValue("SESSION_LANG");
			parser.changeValue(request_prefix+language_tag, session_lang);
			System.out.println("RequestXML is :\n" + parser.toString());
			logger.info("RequestXML is :\n" + parser.toString());
			String ResponseXML = new SocketConnector().getSocketXMLResponse(parser.toString(), callName,iformObj);
	
		
	
		String restricted_tags=GetXML.getProp().getProperty(callName+"_RestrictedTags");
		String []restricted_values=restricted_tags.split(",");
		for(String temp:restricted_values)
			ResponseXML=ResponseXML.replace(temp,"");
	
		
		tagName = "_TagNameResponseFetchCIC";	
		String statuscode=GetXML.getProp().getProperty(callName+"_StatusCode");
		String []status_code_split=statuscode.split("~");
		

		tagNames = GetXML.getProp().getProperty(callName + tagName);
		
		logger.info(tagNames);
		tags = tagNames.split(",");
		
		parser = new XMLParser(ResponseXML);
		
		String status_code_in_response=parser.getValueOf(status_code_split[0]);
		if(status_code_in_response.equalsIgnoreCase(status_code_split[1]))
		{
			for (String tag : tags) {
				//logger.info("Tag =" + tag);
				String[] key = tag.split("~");
				
				if(key[0].contains("#"))
				{
			    		if(!key[0].contains("@"))
			    		{
					    	String []parent_child_tags=key[0].split("#");
					    	logger.info("Length of hash String is "+parent_child_tags.length);
					    		String result=ResponseXML;
					    		for(int i=0;i<parent_child_tags.length;i++)
					    		{
					    			XMLParser internal_parser=new XMLParser(result);
					    			result=internal_parser.getValueOf(parent_child_tags[i]);
					    			logger.info("For "+parent_child_tags[i]+" result is "+result);
					    		}
					    		logger.info("Result returned by fillCRSData is"+result);
					    		jsonobj.put(key[1],result);
			    		}
			    		else
			    		{
			    			String[] inputTagswithoutRateSign = key[0].split("@");
					    	String []parent_child_tags=inputTagswithoutRateSign[0].split("#");
					    	logger.info("Length of hash String is "+parent_child_tags.length);
					    		String result=ResponseXML;
					    		for(int i=0;i<parent_child_tags.length;i++)
					    		{
					    			XMLParser internal_parser=new XMLParser(result);
					    			result=internal_parser.getValueOf(parent_child_tags[i]);
					    			logger.info("For "+parent_child_tags[i]+" result is "+result);
					    		}
					    	logger.info("Result returned by fillCRSData with @ is"+result);
					    	String returned_value="",query="";
					    	try {
			    				query="SELECT PARAM_VALUE FROM NG_MAST_POS_TAG_KEY_VALUE_CONFIG WHERE PARAM_KEY='"+result+"' AND TAG_IDENT='"+inputTagswithoutRateSign[1]+"' AND ISACTIVE='Y'" ;
						    	logger.info("Query to replace key with value is"+query);
				    			List<List<String>> code_values = iformObj.getDataFromDB(query);
				    			
					    			if(code_values.size()>0)
					    			{
					    				returned_value=code_values.get(0).get(0);
					    			}
			    			}
			    			catch(Exception e)
			    			{
			    				logger.info("Exception occurred: setResponseData: Database Query "+query+" and stack trace is"+e);
			    				
			    			}
					    	
			    			jsonobj.put(key[1], returned_value);
			    		}
				}
				else
				{	
					if(!key[0].contains("@"))
					{
						String tagValue = parser.getValueOf(key[0]);
						jsonobj.put(key[1], tagValue);
					}
					else
					{
						String []inputTagswithoutRateSign=key[0].split("@");
						String tagValue = parser.getValueOf(inputTagswithoutRateSign[0]);
		    			String returned_value="",query="";
		    			try {
			    			query="SELECT PARAM_VALUE FROM NG_MAST_POS_TAG_KEY_VALUE_CONFIG WHERE PARAM_KEY='"+tagValue+"' AND TAG_IDENT='"+inputTagswithoutRateSign[1]+"' AND ISACTIVE='Y'" ;
			    			logger.info("Query to replace key with value is"+query);
			    			List<List<String>> code_values = iformObj.getDataFromDB(query);
			    			
			    			if(code_values.size()>0)
				    			{
				    				returned_value=code_values.get(0).get(0);
				    			}
		    			}
		    			catch(Exception e)
		    			{
		    				logger.info("Exception occurred: setResponseData: Database Query "+query+" and stack trace is"+e);
		    				
		    			}
		    			//returned_value = returned_value.substring(1, returned_value.length() - 1);
		    			jsonobj.put(key[1], returned_value);
					}
				}
				
			}
		}
		else
		{
			logger.info("For "+callName+" Status code returned from response is not success ");
		}	
		
		String country_code=(String) jsonobj.get("table10599_COUNTRY_CODE");
		try
		{
			String query="SELECT COUNTRY FROM NG_MAST_Country_Main WHERE COUNTRY_CODE ='"+country_code+"'  ";
			List<List> result=iformObj.getDataFromDB(query);
			if(result.size()>0)
			{
				if(result.get(0).size()>0)
				{
					jsonobj.put("table10599_COUNTRY_CODE",result.get(0).get(0));
				}
			}
			
		}
		catch(Exception e)
		{
			logger.info("Exception Occurred: relatedpartyfetchCIC in country code query"+e);
			jsonobj.put("table10599_COUNTRY_CODE","");
		}
		
		//Handling date formats in related Party
		String register_date=(String) jsonobj.get("table10599_REGISTER_DATE");
		String new_date="";
		if(register_date.contains("/"))
		{
			new_date=register_date.split("/")[2]+"/"+register_date.split("/")[1]+"/"+register_date.split("/")[0];
		}
		else if(register_date.contains("-"))
		{
			new_date=register_date.split("-")[2]+"-"+register_date.split("-")[1]+"-"+register_date.split("-")[0];
		}
		jsonobj.put("table10599_REGISTER_DATE",new_date);
		
		new_date="";
		String establish_date=(String) jsonobj.get("table10599_ESTABLISHMENT");
		if(establish_date.contains("/"))
		{
			new_date=establish_date.split("/")[2]+"/"+establish_date.split("/")[1]+"/"+establish_date.split("/")[0];
		}
		else if(establish_date.contains("-"))
		{
			new_date=establish_date.split("-")[2]+"-"+establish_date.split("-")[1]+"-"+establish_date.split("-")[0];
		}
		jsonobj.put("table10599_ESTABLISHMENT",new_date);
		
		logger.info("In fetch CIC final JSon arrays is "+jsonobj);
		
		for(Iterator iterator = jsonobj.keySet().iterator(); iterator.hasNext();) 
		{
		    String key = (String) iterator.next();
		    logger.info("Values set for"+key+" are "+jsonobj.get(key).toString());
		    setControlValue(iformObj, key, jsonobj.get(key).toString());
		}
	
		
		JSONObject return_obj=new JSONObject();
		
		//logger.info("Response XML received by setResponseDataGrid is"+ResponseXML);
		tagName = "_TagNameResponseFetchCIC_AddressList";
		tagNames = GetXML.getProp().getProperty(callName + tagName);
		logger.info(tagNames);
		
		String[] tagValue = tagNames.split(",");
		for(String tag: tagValue)
		{
			tags=tag.split("~");
			WFXmlResponse objWFxmlResponse = new WFXmlResponse(ResponseXML);
			logger.info("objWFxmlResponse value is "+objWFxmlResponse);

			JSONArray jsonarr=new JSONArray();
			
			logger.info("Status codes are"+status_code_split[0]+"and"+status_code_split[1]);
			
			logger.info("Value of status tag in response is"+objWFxmlResponse.getVal(status_code_split[0]));
			
			if (objWFxmlResponse.getVal(status_code_split[0]).equals(status_code_split[1])) {
			WFXmlList WFXmlList = objWFxmlResponse.createList(tags[0],tags[1]);
			//logger.info("Wfmxmlsit is --------------"+WFXmlList);
			for (int i = 0; WFXmlList.hasMoreElements(true); WFXmlList.skip(true), i++) {
			
				jsonobj = new JSONObject();
				for(int j=2;j<tags.length;++j)
				{
				
					String tag_split_values=tags[j];
					if((!tag_split_values.contains("@")))
					{
						String []hash_split_values=tag_split_values.split("#");
						String result_from_response=WFXmlList.getVal(hash_split_values[1]);
						
						if(result_from_response.equals(null) || result_from_response.equals(""))
						{
							result_from_response="";
						}
						jsonobj.put(hash_split_values[0],result_from_response.trim());
					}
					else
					{
						String []inputTagswithoutRateSign=tag_split_values.split("@");
						
						String []hash_split_values=inputTagswithoutRateSign[0].split("#");
						String result_from_response=WFXmlList.getVal(hash_split_values[1]);
						if(result_from_response.equals(null) || result_from_response.equals(""))
						{
							result_from_response=" ";
						}
						String returned_value="",query="";
		    			try
		    			{
			    			query="SELECT PARAM_VALUE FROM NG_MAST_POS_TAG_KEY_VALUE_CONFIG WHERE PARAM_KEY='"+result_from_response+"' AND TAG_IDENT='"+inputTagswithoutRateSign[1]+"' AND ISACTIVE='Y'" ;
			    			logger.info("Query to replace key with value is"+query);
			    			List<List<String>> code_values = iformObj.getDataFromDB(query);
			    			
				    			if(code_values.size()>0)
				    			{	
				    				returned_value=code_values.get(0).get(0);
				    			}
		    			}catch(Exception e)
		    			{
		    				logger.info("Exception occurred: setResponseDataGrid: Database Query "+query+" and stack trace is"+e);
		    			}
		    			
		    			jsonobj.put(hash_split_values[0],returned_value.trim());
		    			
					}
				}
				
				jsonarr.add(jsonobj);
				
			}
			logger.info("fetchCIC addreesstype array is"+jsonarr);
			JSONObject finaljsonobj=null;
			String address_type="";
			for(int i=0;i<jsonarr.size();i++)
			{
				jsonobj=(JSONObject) jsonarr.get(i);
				address_type=(String) jsonobj.get("table10599_AddressType");
				if(address_type.equalsIgnoreCase("02"))
				{
					finaljsonobj=jsonobj;
				}
			}
			
			if(finaljsonobj!=null)
			{
				finaljsonobj.remove("table10599_AddressType");
			}
			
			logger.info("fetchCIC addreesstype finalobject is"+finaljsonobj);
			
			for(Iterator iterator = finaljsonobj.keySet().iterator(); iterator.hasNext();) 
			{
				 String key = (String) iterator.next();
				 logger.info("Values set for"+key+" are "+finaljsonobj.get(key).toString());
				 setControlValue(iformObj, key, finaljsonobj.get(key).toString());
			}
			
			}
			else
			{
				logger.info("For "+callName+" Status code returned from response is not success ");
			}
			
		}
			logger.info("Returning object is"+return_obj);
	
		}
		catch(Exception e)
		{
			logger.info("Exception Occurred: relatedpartyfetchCIC"+e);
		}
		
		return "relatedpartyfetchCIC called Successfully";
	}

	
	private String fillMoveAccGrid(IFormReference iformObj, String stringdata) {
		logger.info("String data to fill fillMoveAccGrid is" + stringdata);
		String[] value_split = stringdata.split("#");
		String acc_id = getControlValue(iformObj, value_split[0]);
		iformObj.clearTable(value_split[1]);
		if (acc_id.equalsIgnoreCase("All")) {
			logger.info("TerminalID to fillMoveAccGrid is " + acc_id + "and table id is is" + value_split[1]);
			String wi_name = getWorkitemName(iformObj);
			JSONArray jsonarr = new JSONArray();
			JSONObject jsonobj = null;

			String query = "SELECT FROM_DATE,TO_DATE,BANK_NAME,ACC_NO,DEPOSIT,WITHDRAWAL,AVG_BAL,NEG_BAL,ACC_MONTH,THROUGHPUT from NG_FLEET_STMTDATA_ACCMOVMNT_GRID WHERE WI_NAME='"
					+ wi_name + "' ";
			List<List<String>> stmt_data = iformObj.getDataFromDB(query);
			for (List<String> value : stmt_data) {
				jsonobj = new JSONObject();
				jsonobj.put("From Date", value.get(0));
				jsonobj.put("To Date", value.get(1));
				jsonobj.put("Bank Name", value.get(2));
				jsonobj.put("Account Number", value.get(3));
				jsonobj.put("Deposit", value.get(4));
				jsonobj.put("Withdrawal", value.get(5));
				jsonobj.put("Average Balance", value.get(6));
				jsonobj.put("Negative Balance", value.get(7));
				jsonobj.put("Month", value.get(8));
				jsonobj.put("Throughput", value.get(9));
				jsonarr.add(jsonobj);
			}

			logger.info("JSON Array to fill stmt details is" + jsonobj);
			iformObj.addDataToGrid(value_split[1], jsonarr);
		} else {
			logger.info("TerminalID to fillMoveAccGrid is " + acc_id + "and table id is is" + value_split[1]);
			String wi_name = getWorkitemName(iformObj);
			JSONArray jsonarr = new JSONArray();
			JSONObject jsonobj = null;

			String query = "SELECT FROM_DATE,TO_DATE,BANK_NAME,ACC_NO,DEPOSIT,WITHDRAWAL,AVG_BAL,NEG_BAL,ACC_MONTH,THROUGHPUT from NG_FLEET_STMTDATA_ACCMOVMNT_GRID WHERE ACC_NO='"
					+ acc_id + "' AND WI_NAME='" + wi_name + "' ";
			List<List<String>> stmt_data = iformObj.getDataFromDB(query);
			for (List<String> value : stmt_data) {
				jsonobj = new JSONObject();
				jsonobj.put("From Date", value.get(0));
				jsonobj.put("To Date", value.get(1));
				jsonobj.put("Bank Name", value.get(2));
				jsonobj.put("Account Number", value.get(3));
				jsonobj.put("Deposit", value.get(4));
				jsonobj.put("Withdrawal", value.get(5));
				jsonobj.put("Average Balance", value.get(6));
				jsonobj.put("Negative Balance", value.get(7));
				jsonobj.put("Month", value.get(8));
				jsonobj.put("Throughput", value.get(9));
				jsonarr.add(jsonobj);
			}

			logger.info("JSON Array to fill stmt details is" + jsonobj);
			iformObj.addDataToGrid(value_split[1], jsonarr);
		}
		return "Successfully loaded fillMoveAccGrid";
	}


	/*
	//By Mohit Kumar
	private String CallCommodityPurchase(IFormReference iformObj, String stringdata) {

		String callName = "MSBCommodityMng"; //For ammortization details
		String responseXML = createRequestXML(iformObj, callName);
		JSONObject jobj = setResponseData(iformObj, callName, responseXML);

		for(Iterator iterator = jobj.keySet().iterator(); iterator.hasNext();)
			{
				String key = (String) iterator.next();
				logger.info("Values set for"+key+" are "+jobj.get(key).toString());
				setControlValue(iformObj, key, jobj.get(key).toString());
			}
		
		return "Call COmmodity Purchse Call Successfully";
	}
	*/
	
	private String CallMSBLimitMng(IFormReference iformObj, String stringdata) {
		// TODO Auto-generated method stub
		// ======= MSB Limit Mng call starts
		// ======= MSB Limit Mng call starts
		logger.info("MSB Limit Mng call starts, starts create");
		String callName = "MSBLimitMng_Create"; //For ammortization details
		logger.info("Callname:::::::"+callName);
		String responseXML = createRequestXML(iformObj, callName);
		JSONObject MSBLimitMng_obj = setResponseData(iformObj, callName, responseXML);
		
		for(Iterator iterator = MSBLimitMng_obj.keySet().iterator(); iterator.hasNext();)
		{
		String key = (String) iterator.next();
		logger.info("Values set for"+key+" are "+MSBLimitMng_obj.get(key).toString());
		setControlValue(iformObj, key, MSBLimitMng_obj.get(key).toString());
		}
		String T24LimitRef= (String) iformObj.getValue("T24_LIMIT_REF");
		logger.info("T24 limit ref no is "+T24LimitRef);
		callName = "MSBLimitMng_Enable"; //For ammortization details
		//responseXML = createRequestXML(iformObj, callName);
		
			logger.info("Inside createRequestXML Function and callName is " + callName);
			String tagName = "_TagName";
			
			String request_prefix=GetXML.getProp().getProperty(callName+"_RequestPrefix");
			if(request_prefix.equals(null))
			{
				request_prefix="";
			}
			logger.info("Request prefix is "+request_prefix+"please check");
			
			String header_tags=GetXML.getProp().getProperty(callName+"_Header");
			String []header_tags_arry=header_tags.split(",");
			
			logger.info("Header tags are "+header_tags);
			JSONObject jsonobj_header=new JSONObject();
			for(String temp:header_tags_arry)
			{
				String[] hash_split=temp.split("#");
				jsonobj_header.put(hash_split[0],hash_split[1]);
			}
			
			logger.info("JSOn object is "+jsonobj_header);
		
			String tagNames = GetXML.getProp().getProperty(callName + tagName);
			logger.info(tagNames);
			String[] tags = tagNames.split(",");
	
			String requestXML = readDummyRequest(callName);
	
			XMLParser parser = new XMLParser(requestXML);
			
	
			for (String tag : tags) 
			{
				String tagValue = parser.getValueOf(request_prefix+tag);
				logger.info("tag values are"+tagValue);
				if(tagValue.contains("header~"))
				{
					try {
						
					if(tagValue.split("~")[1].equalsIgnoreCase("UUID"))
					{
						parser.changeValue(request_prefix+tag, java.util.UUID.randomUUID().toString());
					}
					else
					{
					String value=(String) jsonobj_header.get(tagValue.split("~")[1]);
					logger.info("Value to be replaced by jsonobj_header is "+value);
					parser.changeValue(request_prefix+tag, value);
					}
					}
					catch(Exception e)
					{
						logger.info("Exception is "+e);
					}
				}
				if (tagValue.startsWith("formid~")) 
				{
					String tagValue_in_request=tagValue.split("~")[1];
					String value ="";
					if(tagValue_in_request.equalsIgnoreCase("EXPIRY_DATE"))
					{
						logger.info("Inside Expiry date handling ");
						try
						{
							String contract_date=(String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_CONTRACT_DATE");
							String expriy_limit=(String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_LIMIT_VALIDITY");
							String query="select dateadd(DD,"+expriy_limit+",cast('"+contract_date+"' as date))";
							logger.info("Query for enable limit and create limit is "+query);
							
							List<List<String>> expriy_Date= iformObj.getDataFromDB(query);	
							logger.info("Result of Query for enable limit and create limit is "+expriy_Date);
							if(expriy_Date.size()>0)
							{
								value=expriy_Date.get(0).get(0);
							}
							
							
						}
						catch(Exception e)
						{
							logger.info("Exception Occurred CallMSBLimitMng ");
						}
					}
					else
					{
						value = (String) iformObj.getValue(tagValue.split("~")[1]);
					}
					parser.changeValue(request_prefix+tag, value);
				}
				
			}
			
			parser.changeValue(request_prefix+"T24LimitRef", T24LimitRef);
			System.out.println("RequestXML is :\n" + parser.toString());
			logger.info("RequestXML for enable limtit after appending T24refno is :\n" + parser.toString());
			responseXML = new SocketConnector().getSocketXMLResponse(parser.toString(), callName,iformObj);
		
			/*
		JSONObject MSBLimitMngEnable_obj = setResponseData(iformObj, callName, responseXML);
		for(Iterator iterator = MSBLimitMngEnable_obj.keySet().iterator(); iterator.hasNext();)
		{
		String key = (String) iterator.next();
		logger.info("Values set for"+key+" are "+MSBLimitMngEnable_obj.get(key).toString());
		setControlValue(iformObj, key, MSBLimitMngEnable_obj.get(key).toString());
		}
		*/
			
			JSONObject MSBLimitMngEnable_obj = setResponseData_2(iformObj, callName, responseXML);
			logger.info("For Enable limit object is :"+MSBLimitMngEnable_obj);
			String return_string="Success~Contract Simulation executed";

			for(Iterator iterator = MSBLimitMngEnable_obj.keySet().iterator(); iterator.hasNext();)
			{
				String key = (String) iterator.next();
				if(key.equalsIgnoreCase("Error"))
				{
					return_string="Error~"+MSBLimitMngEnable_obj.get(key).toString();
				}
				else
				{
					logger.info("Values set for"+key+" are "+MSBLimitMngEnable_obj.get(key).toString());
					setControlValue(iformObj, key, MSBLimitMngEnable_obj.get(key).toString());
				}
			}		

		
		
		return return_string;
		
	}
	
	
	private String CallMSBCustMngRq(IFormReference iformObj, String stringdata) {
		String callName = "MSBCustMng"; //For Prospect Customer
		logger.info("MSBCustMngRq@@@@ " + callName);
		String responseXML = createRequestXML(iformObj, callName);
		logger.info("CallMSBCustMngRq@@@@response " +responseXML);
		JSONObject CallMSBCustMngRq_obj = setResponseData(iformObj, callName, responseXML);
		for(Iterator iterator = CallMSBCustMngRq_obj.keySet().iterator(); iterator.hasNext();)
		{
		String key = (String) iterator.next();
		logger.info("Values set for"+key+" are "+CallMSBCustMngRq_obj.get(key).toString());
		setControlValue(iformObj, key, CallMSBCustMngRq_obj.get(key).toString());
		}
		return "CallMSBCustMngRq Called";
		}
	
	private String MSBContractMngRq(IFormReference iformObj, String stringdata) {
		String callName = "MSBContractMng"; //For master stipulation at approved sales stage.
		String responseXML = "";
		try
		{
			logger.info("Inside createRequestXML Function and callName is " + callName);
			String tagName = "_TagName";
			
			String request_prefix=GetXML.getProp().getProperty(callName+"_RequestPrefix");
			if(request_prefix.equals(null))
			{
				request_prefix="";
			}
			logger.info("Request prefix is "+request_prefix+"please check");
			
			String header_tags=GetXML.getProp().getProperty(callName+"_Header");
			String []header_tags_arry=header_tags.split(",");
			
			logger.info("Header tags are "+header_tags);
			JSONObject jsonobj_header=new JSONObject();
			for(String temp:header_tags_arry)
			{
				String[] hash_split=temp.split("#");
				jsonobj_header.put(hash_split[0],hash_split[1]);
			}
			
			logger.info("JSOn object is "+jsonobj_header);
		
			String tagNames = GetXML.getProp().getProperty(callName + tagName);
			logger.info(tagNames);
			String[] tags = tagNames.split(",");
	
			String requestXML = readDummyRequest(callName);
	
			XMLParser parser = new XMLParser(requestXML);
			
	
			for (String tag : tags) {
				String tagValue = parser.getValueOf(request_prefix+tag);
				logger.info("tag values are"+tagValue);
				if(tagValue.contains("header~"))
				{
					try {
						
					if(tagValue.split("~")[1].equalsIgnoreCase("UUID"))
					{
						parser.changeValue(request_prefix+tag, java.util.UUID.randomUUID().toString());
					}
					else
					{
					String value=(String) jsonobj_header.get(tagValue.split("~")[1]);
					logger.info("Value to be replaced by jsonobj_header is "+value);
					parser.changeValue(request_prefix+tag, value);
					}
					}
					catch(Exception e)
					{
						logger.info("Exception is "+e);
					}
				}
				if (tagValue.startsWith("formid~")) {
					String value = (String) iformObj.getValue(tagValue.split("~")[1]);
					parser.changeValue(request_prefix+tag, value);
				}
				
			}
			//logger.info("Handling special cases");
			String padded_cic_no=(String) iformObj.getValue("PADDED_CIC_NO");
			logger.info("CIC_No after appending zeroes are "+padded_cic_no);
			parser.changeValue(request_prefix+"alr1:CICNum",padded_cic_no);
			parser.changeValue(request_prefix+"CICNum",padded_cic_no);
			
			String customer_type=parser.getValueOf(request_prefix+"CustType");
			if(customer_type.equalsIgnoreCase("ARB POS Customer"))
				parser.changeValue(request_prefix+"CustType", "1");
			else if(customer_type.equalsIgnoreCase("Non-ARB POS Customer"))
				parser.changeValue(request_prefix+"CustType", "2");
			else if (customer_type.equalsIgnoreCase("ARB Non POS"))
				parser.changeValue(request_prefix+"CustType", "3");
			
			String frequency=getControlValue(iformObj, "Q_NG_POS_APPLICATION_DATA_FREQUENCY");
			//String no_of_installments=(String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_NO_OF_INSTALLMENT");
			String frequency_value="";
			//parser.changeValue(request_prefix+"InstallmentFrequency","e"+no_of_installments+"M");
			logger.info("InstallmentFrequency before change is "+frequency);
			if(frequency.equalsIgnoreCase("Monthly"))
			{
				frequency_value="e1m";
			}else if(frequency.equalsIgnoreCase("Quarterly"))
			{
				frequency_value="e3m";
			}else if(frequency.equalsIgnoreCase("Half-Yearly"))
			{
				frequency_value="e6m";
			}else if(frequency.equalsIgnoreCase("Annually"))
			{
				frequency_value="e12m";
			}
			frequency_value="e0Y "+frequency_value+" e0W e0D e0F";
			parser.changeValue(request_prefix+"InstallmentFrequency",frequency_value);	
			logger.info("InstallmentFrequency after change is "+frequency_value);
			//String date = new SimpleDateFormat("yyyy-MM-dd").format(new Date());
			//logger.info("Date after change is "+date);
			//parser.changeValue(request_prefix+"ContractDate",date);	
			//logger.info("In contract date we have set value as "+date);
			String grace_in_month=parser.getValueOf(request_prefix+"GraceInMonth");
			String tag_grace_in_month;
			if(!grace_in_month.equalsIgnoreCase(""))
			{
				//logger.info("Grace period is not empty");
			    Integer month=Integer.parseInt(grace_in_month)+1;
				//logger.info("Month is : "+month);
				tag_grace_in_month="R_START + "+month.toString()+"M";
				parser.changeValue(request_prefix+"GraceInMonth", tag_grace_in_month);
				//logger.info("Grace period in month is : "+tag_grace_in_month);
			}
				
			
			/*if(!grace_period_captialization.equalsIgnoreCase("")) // Uncomment for grace_period_captialization handling
			{
				parser.changeValue(request_prefix+"GracePeriodCapitalization","R_MATURITY +"+grace_period_captialization);
			}*/
			
			String tenure=parser.getValueOf(request_prefix+"FinanceTenure");
			parser.changeValue(request_prefix+"FinanceTenure",tenure+"M");
			
			System.out.println("RequestXML for MSBContractMngRq is :\n" + parser.toString());
			logger.info("RequestXML is :\n" + parser.toString());
			responseXML = new SocketConnector().getSocketXMLResponse(parser.toString(), callName,iformObj);
	
			System.out.println("Response XML is: \n" + responseXML);
			}
			catch(Exception e)
			{
				
				logger.info("Exception occurred: createRequestXMLfor MSBContractMngRq "+e.getStackTrace().toString());
				return "";
			}
		
		/*JSONObject MSBContractMngRq_obj = setResponseData(iformObj, callName, responseXML);
		for(Iterator iterator = MSBContractMngRq_obj.keySet().iterator(); iterator.hasNext();)
		{
			String key = (String) iterator.next();
			logger.info("Values set for"+key+" are "+MSBContractMngRq_obj.get(key).toString());
			setControlValue(iformObj, key, MSBContractMngRq_obj.get(key).toString());
		}*/
		
		JSONObject MSBContractMngRq_obj = setResponseData_2(iformObj, callName, responseXML);
		logger.info("For contract stimulation object is :"+MSBContractMngRq_obj);
		String return_string="Success~Contract Simulation executed";

		for(Iterator iterator = MSBContractMngRq_obj.keySet().iterator(); iterator.hasNext();)
		{
			String key = (String) iterator.next();
			if(key.equalsIgnoreCase("Error"))
			{
				return_string="Error~"+MSBContractMngRq_obj.get(key).toString();
			}
			else
			{
				logger.info("Values set for"+key+" are "+MSBContractMngRq_obj.get(key).toString());
				setControlValue(iformObj, key, MSBContractMngRq_obj.get(key).toString());
			}
		}		
		return return_string;
	}
	
	private String MSBContractMngRqChild(IFormReference iformObj, String stringdata) {
		String callName = "MSBContractMngChild"; //For master stipulation of child at sell and stipulate stage.
		String responseXML = "";
		try
		{
			logger.info("Inside createRequestXML Function and callName is " + callName);
			String tagName = "_TagName";
			
			String request_prefix=GetXML.getProp().getProperty(callName+"_RequestPrefix");
			if(request_prefix.equals(null))
			{
				request_prefix="";
			}
			logger.info("Request prefix is "+request_prefix+"please check");
			
			String header_tags=GetXML.getProp().getProperty(callName+"_Header");
			String []header_tags_arry=header_tags.split(",");
			
			logger.info("Header tags are "+header_tags);
			JSONObject jsonobj_header=new JSONObject();
			for(String temp:header_tags_arry)
			{
				String[] hash_split=temp.split("#");
				jsonobj_header.put(hash_split[0],hash_split[1]);
			}
			
			logger.info("JSOn object is "+jsonobj_header);
		
			String tagNames = GetXML.getProp().getProperty(callName + tagName);
			logger.info(tagNames);
			String[] tags = tagNames.split(",");
	
			String requestXML = readDummyRequest(callName);
	
			XMLParser parser = new XMLParser(requestXML);
			
	
			for (String tag : tags) {
				String tagValue = parser.getValueOf(request_prefix+tag);
				logger.info("tag values are"+tagValue);
				if(tagValue.contains("header~"))
				{
					try {
						
					if(tagValue.split("~")[1].equalsIgnoreCase("UUID"))
					{
						parser.changeValue(request_prefix+tag, java.util.UUID.randomUUID().toString());
					}
					else
					{
					String value=(String) jsonobj_header.get(tagValue.split("~")[1]);
					logger.info("Value to be replaced by jsonobj_header is "+value);
					parser.changeValue(request_prefix+tag, value);
					}
					}
					catch(Exception e)
					{
						logger.info("Exception is "+e);
					}
				}
				if (tagValue.startsWith("formid~")) {
					String value = (String) iformObj.getValue(tagValue.split("~")[1]);
					parser.changeValue(request_prefix+tag, value);
				}
				
			}
			//logger.info("Handling special cases");
			String los_app_num = (String) iformObj.getValue("LOS_APP_NUM");
			logger.info("los_app_num =="+los_app_num);
			parser.changeValue(request_prefix+"LOSAppNum",los_app_num.concat("-001"));
			//logger.info("After format los_app_num =="+parser.getValueOf("request_prefix"+LOSAppNum);
			String padded_cic_no=(String) iformObj.getValue("PADDED_CIC_NO");
			logger.info("CIC_No after appending zeroes are "+padded_cic_no);
			parser.changeValue(request_prefix+"alr1:CICNum",padded_cic_no);
			parser.changeValue(request_prefix+"CICNum",padded_cic_no);
			
			String customer_type=parser.getValueOf(request_prefix+"CustType");
			if(customer_type.equalsIgnoreCase("ARB POS Customer"))
				parser.changeValue(request_prefix+"CustType", "1");
			else if(customer_type.equalsIgnoreCase("Non-ARB POS Customer"))
				parser.changeValue(request_prefix+"CustType", "2");
			else if (customer_type.equalsIgnoreCase("ARB Non POS"))
				parser.changeValue(request_prefix+"CustType", "3");
			
			String frequency=getControlValue(iformObj, "Q_NG_POS_APPLICATION_DATA_FREQUENCY");
			//String no_of_installments=(String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_NO_OF_INSTALLMENT");
			String frequency_value="";
			//parser.changeValue(request_prefix+"InstallmentFrequency","e"+no_of_installments+"M");
			logger.info("InstallmentFrequency before change is "+frequency);
			if(frequency.equalsIgnoreCase("Monthly"))
			{
				frequency_value="e1M";
			}else if(frequency.equalsIgnoreCase("Quarterly"))
			{
				frequency_value="e3M";
			}else if(frequency.equalsIgnoreCase("Half-Yearly"))
			{
				frequency_value="e6M";
			}else if(frequency.equalsIgnoreCase("Annually"))
			{
				frequency_value="e12M";
			}
			frequency_value="e0Y "+frequency_value+" e0W e0D e0F";
			parser.changeValue(request_prefix+"InstallmentFrequency",frequency_value);	
			logger.info("InstallmentFrequency after change is "+frequency_value);
			
			String grace_in_month=parser.getValueOf(request_prefix+"GraceInMonth");
			String tag_grace_in_month;
			if(!grace_in_month.equalsIgnoreCase(""))
			{
				//logger.info("Grace period is not empty");
			    Integer month=Integer.parseInt(grace_in_month)+1;
				//logger.info("Month is : "+month);
				tag_grace_in_month="R_START + "+month.toString()+"M";
				parser.changeValue(request_prefix+"GraceInMonth", tag_grace_in_month);
				//logger.info("Grace period in month is : "+tag_grace_in_month);
			}
				
			
			/*if(!grace_period_captialization.equalsIgnoreCase("")) // Uncomment for grace_period_captialization handling
			{
				parser.changeValue(request_prefix+"GracePeriodCapitalization","R_MATURITY +"+grace_period_captialization);
			}*/
			
			String tenure=parser.getValueOf(request_prefix+"FinanceTenure");
			parser.changeValue(request_prefix+"FinanceTenure",tenure+"M");
			
			System.out.println("RequestXML for MSBContractMngRq is :\n" + parser.toString());
			logger.info("RequestXML is :\n" + parser.toString());
			responseXML = new SocketConnector().getSocketXMLResponse(parser.toString(), callName,iformObj);
	
			System.out.println("Response XML is: \n" + responseXML);
			}
			catch(Exception e)
			{
				
				logger.info("Exception occurred: createRequestXMLfor MSBContractMngRqChild "+e.getStackTrace().toString());
				return "";
			}
		
		/*JSONObject MSBContractMngRq_obj = setResponseData(iformObj, callName, responseXML);
		for(Iterator iterator = MSBContractMngRq_obj.keySet().iterator(); iterator.hasNext();)
		{
			String key = (String) iterator.next();
			logger.info("Values set for"+key+" are "+MSBContractMngRq_obj.get(key).toString());
			setControlValue(iformObj, key, MSBContractMngRq_obj.get(key).toString());
		}*/
		
		JSONObject MSBContractMngRq_obj = setResponseData_2(iformObj, callName, responseXML);
		logger.info("For contract stimulation of child object is :"+MSBContractMngRq_obj);
		String return_string="Success~Contract Stimulation of child executed";

		for(Iterator iterator = MSBContractMngRq_obj.keySet().iterator(); iterator.hasNext();)
		{
			String key = (String) iterator.next();
			if(key.equalsIgnoreCase("Error"))
			{
				return_string="Error~"+MSBContractMngRq_obj.get(key).toString();
			}
			else
			{
				logger.info("Values set for"+key+" are "+MSBContractMngRq_obj.get(key).toString());
				setControlValue(iformObj, key, MSBContractMngRq_obj.get(key).toString());
			}
		}		
		return return_string;
	}

	
	private String CallContractSimulation(IFormReference iformObj, String stringdata) {
		//String prospect_customer_result=CallMSBCustMngRq(iformObj, stringdata); //For Prospect Customer
		//logger.info("Prospect Customer Response is "+prospect_customer_result);	
		// ============= Contract Simulation Mng =============
		String callName = "ContractSimulationMng"; //For contract sulation in application data
		String responseXML = "";// 
		try
		{
			logger.info("Inside createRequestXML Function and callName is " + callName);
			String tagName = "_TagName";
			
			String request_prefix=GetXML.getProp().getProperty(callName+"_RequestPrefix");
			if(request_prefix.equals(null))
			{
				request_prefix="";
			}
			logger.info("Request prefix is "+request_prefix+"please check");
			
			String header_tags=GetXML.getProp().getProperty(callName+"_Header");
			String []header_tags_arry=header_tags.split(",");
			
			logger.info("Header tags are "+header_tags);
			JSONObject jsonobj_header=new JSONObject();
			for(String temp:header_tags_arry)
			{
				String[] hash_split=temp.split("#");
				jsonobj_header.put(hash_split[0],hash_split[1]);
			}
			
			logger.info("JSOn object is "+jsonobj_header);
		
			String tagNames = GetXML.getProp().getProperty(callName + tagName);
			logger.info(tagNames);
			String[] tags = tagNames.split(",");
	
			String requestXML = readDummyRequest(callName);
	
			XMLParser parser = new XMLParser(requestXML);
			
	
			for (String tag : tags) {
				String tagValue = parser.getValueOf(request_prefix+tag);
				logger.info("tag values are"+tagValue);
				if(tagValue.contains("header~"))
				{
					try {
						
					if(tagValue.split("~")[1].equalsIgnoreCase("UUID"))
					{
						parser.changeValue(request_prefix+tag, java.util.UUID.randomUUID().toString());
					}
					else
					{
					String value=(String) jsonobj_header.get(tagValue.split("~")[1]);
					logger.info("Value to be replaced by jsonobj_header is "+value);
					parser.changeValue(request_prefix+tag, value);
					}
					}
					catch(Exception e)
					{
						logger.info("Exception is "+e);
					}
				}
				if (tagValue.startsWith("formid~")) {
					String value = (String) iformObj.getValue(tagValue.split("~")[1]);
					parser.changeValue(request_prefix+tag, value);
				}
				
			}
			//logger.info("Handling special cases");
			String cic_no=parser.getValueOf(request_prefix+"alr1:CICNum");
			int no_of_zeroes=16-cic_no.length();
			for(int i=0;i<no_of_zeroes;i++)
			{
				cic_no='0'+cic_no;
			}
			
			logger.info("CIC_No after appending zeroes are "+cic_no);
			parser.changeValue(request_prefix+"alr1:CICNum",cic_no);
			parser.changeValue(request_prefix+"CICNum",cic_no);

			String customer_type=parser.getValueOf(request_prefix+"CustType");
			if(customer_type.equalsIgnoreCase("ARB POS Customer"))
				parser.changeValue(request_prefix+"CustType", "1");
			else if(customer_type.equalsIgnoreCase("Non-ARB POS Customer"))
				parser.changeValue(request_prefix+"CustType", "2");
			else if (customer_type.equalsIgnoreCase("ARB Non POS"))
				parser.changeValue(request_prefix+"CustType", "3");
			
			String frequency=getControlValue(iformObj, "Q_NG_POS_APPLICATION_DATA_FREQUENCY");
			//String no_of_installments=(String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_NO_OF_INSTALLMENT");
			String frequency_value="";
			//parser.changeValue(request_prefix+"InstallmentFrequency","e"+no_of_installments+"M");
			logger.info("InstallmentFrequency before change is "+frequency);
			if(frequency.equalsIgnoreCase("Monthly"))
			{
				frequency_value="e1m";
			}else if(frequency.equalsIgnoreCase("Quarterly"))
			{
				frequency_value="e3m";
			}else if(frequency.equalsIgnoreCase("Half-Yearly"))
			{
				frequency_value="e6m";
			}else if(frequency.equalsIgnoreCase("Annually"))
			{
				frequency_value="e12m";
			}
			frequency_value="e0Y "+frequency_value+" e0W e0D e0F";
			parser.changeValue(request_prefix+"InstallmentFrequency",frequency_value);	
			logger.info("InstallmentFrequency after change is "+frequency_value);
			
			String grace_in_month=parser.getValueOf(request_prefix+"GraceInMonth");
			if(!grace_in_month.equalsIgnoreCase(""))
			{
				//logger.info("Grace period is not empty");
			    Integer month=Integer.parseInt(grace_in_month)+1;
				//logger.info("Month is : "+month);
				String tag_grace_in_month="R_START + "+month.toString()+"M";
				parser.changeValue(request_prefix+"GraceInMonth", tag_grace_in_month);
				//logger.info("Grace period in month is : "+tag_grace_in_month);
			}
			
			/*if(!grace_period_captialization.equalsIgnoreCase(""))
			{
				parser.changeValue(request_prefix+"GracePeriodCapitalization","R_MATURITY +"+grace_period_captialization);
			}*/
			
			String tenure=parser.getValueOf(request_prefix+"FinanceTenure");
			parser.changeValue(request_prefix+"FinanceTenure",tenure+"M");
			
			System.out.println("RequestXML for ContractSimulationMng is :\n" + parser.toString());
			logger.info("RequestXML is :\n" + parser.toString());
			responseXML = new SocketConnector().getSocketXMLResponse(parser.toString(), callName,iformObj);
	
			System.out.println("Response XML is: \n" + responseXML);
			
		}catch(Exception e)
		{
			
			logger.info("Exception occurred: createRequestXMLfor ContractSimulationMng "+e.getStackTrace().toString());
			return "";
		}
	
		
		
		JSONObject ContractSimulation_obj = setResponseData_2(iformObj, callName, responseXML);
		logger.info("For contract stimulation object is :"+ContractSimulation_obj);
		String return_string="Success~Contract Simulation executed";

		for(Iterator iterator = ContractSimulation_obj.keySet().iterator(); iterator.hasNext();)
		{
			String key = (String) iterator.next();
			if(key.equalsIgnoreCase("Error"))
			{
				return_string="Error~"+ContractSimulation_obj.get(key).toString();
			}
			else
			{
				logger.info("Values set for"+key+" are "+ContractSimulation_obj.get(key).toString());
				setControlValue(iformObj, key, ContractSimulation_obj.get(key).toString());
			}
		}
		return return_string ;
	}

	private String CallContractSimulationChild(IFormReference iformObj, String stringdata) {
		//String prospect_customer_result=CallMSBCustMngRq(iformObj, stringdata); //For Prospect Customer
		//logger.info("Prospect Customer Response is "+prospect_customer_result);	
		// ============= Contract Simulation Mng =============
		String callName = "ContractSimulationMngChild"; //For contract sulation in application data
		String responseXML = "";// 
		try
		{
			logger.info("Inside createRequestXML Function and callName is " + callName);
			String tagName = "_TagName";
			
			String request_prefix=GetXML.getProp().getProperty(callName+"_RequestPrefix");
			if(request_prefix.equals(null))
			{
				request_prefix="";
			}
			logger.info("Request prefix is "+request_prefix+"please check");
			
			String header_tags=GetXML.getProp().getProperty(callName+"_Header");
			String []header_tags_arry=header_tags.split(",");
			
			logger.info("Header tags are "+header_tags);
			JSONObject jsonobj_header=new JSONObject();
			for(String temp:header_tags_arry)
			{
				String[] hash_split=temp.split("#");
				jsonobj_header.put(hash_split[0],hash_split[1]);
			}
			
			logger.info("JSOn object is "+jsonobj_header);
		
			String tagNames = GetXML.getProp().getProperty(callName + tagName);
			logger.info(tagNames);
			String[] tags = tagNames.split(",");
	
			String requestXML = readDummyRequest(callName);
	
			XMLParser parser = new XMLParser(requestXML);
			
	
			for (String tag : tags) {
				String tagValue = parser.getValueOf(request_prefix+tag);
				logger.info("tag values are"+tagValue);
				if(tagValue.contains("header~"))
				{
					try {
						
					if(tagValue.split("~")[1].equalsIgnoreCase("UUID"))
					{
						parser.changeValue(request_prefix+tag, java.util.UUID.randomUUID().toString());
					}
					else
					{
					String value=(String) jsonobj_header.get(tagValue.split("~")[1]);
					logger.info("Value to be replaced by jsonobj_header is "+value);
					parser.changeValue(request_prefix+tag, value);
					}
					}
					catch(Exception e)
					{
						logger.info("Exception is "+e);
					}
				}
				if (tagValue.startsWith("formid~")) {
					String value = (String) iformObj.getValue(tagValue.split("~")[1]);
					parser.changeValue(request_prefix+tag, value);
				}
				
			}
			//logger.info("Handling special cases");
			
			String los_app_num = (String) iformObj.getValue("LOS_APP_NUM");
			logger.info("los_app_num =="+los_app_num);
			parser.changeValue(request_prefix+"LOSAppNum",los_app_num.concat("-001"));
			
			String cic_no=parser.getValueOf(request_prefix+"alr1:CICNum");
			int no_of_zeroes=16-cic_no.length();
			for(int i=0;i<no_of_zeroes;i++)
			{
				cic_no='0'+cic_no;
			}
			
			
			
			logger.info("CIC_No after appending zeroes are "+cic_no);
			parser.changeValue(request_prefix+"alr1:CICNum",cic_no);
			parser.changeValue(request_prefix+"CICNum",cic_no);

			String customer_type=parser.getValueOf(request_prefix+"CustType");
			if(customer_type.equalsIgnoreCase("ARB POS Customer"))
				parser.changeValue(request_prefix+"CustType", "1");
			else if(customer_type.equalsIgnoreCase("Non-ARB POS Customer"))
				parser.changeValue(request_prefix+"CustType", "2");
			else if (customer_type.equalsIgnoreCase("ARB Non POS"))
				parser.changeValue(request_prefix+"CustType", "3");
			
			String frequency=getControlValue(iformObj, "Q_NG_POS_APPLICATION_DATA_FREQUENCY");
			//String no_of_installments=(String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_NO_OF_INSTALLMENT");
			String frequency_value="";
			//parser.changeValue(request_prefix+"InstallmentFrequency","e"+no_of_installments+"M");
			logger.info("InstallmentFrequency before change is "+frequency);
			if(frequency.equalsIgnoreCase("Monthly"))
			{
				frequency_value="e1m";
			}else if(frequency.equalsIgnoreCase("Quarterly"))
			{
				frequency_value="e3m";
			}else if(frequency.equalsIgnoreCase("Half-Yearly"))
			{
				frequency_value="e6m";
			}else if(frequency.equalsIgnoreCase("Annually"))
			{
				frequency_value="e12m";
			}
			frequency_value="e0Y "+frequency_value+" e0W e0D e0F";
			parser.changeValue(request_prefix+"InstallmentFrequency",frequency_value);	
			logger.info("InstallmentFrequency after change is "+frequency_value);
			
			String grace_in_month=parser.getValueOf(request_prefix+"GraceInMonth");
			if(!grace_in_month.equalsIgnoreCase(""))
			{
				//logger.info("Grace period is not empty");
			    Integer month=Integer.parseInt(grace_in_month)+1;
				//logger.info("Month is : "+month);
				String tag_grace_in_month="R_START + "+month.toString()+"M";
				parser.changeValue(request_prefix+"GraceInMonth", tag_grace_in_month);
				//logger.info("Grace period in month is : "+tag_grace_in_month);
			}
			
			/*if(!grace_period_captialization.equalsIgnoreCase(""))
			{
				parser.changeValue(request_prefix+"GracePeriodCapitalization","R_MATURITY +"+grace_period_captialization);
			}*/
			
			String tenure=parser.getValueOf(request_prefix+"FinanceTenure");
			parser.changeValue(request_prefix+"FinanceTenure",tenure+"M");
			
			System.out.println("RequestXML for ContractSimulationMng is :\n" + parser.toString());
			logger.info("RequestXML is :\n" + parser.toString());
			responseXML = new SocketConnector().getSocketXMLResponse(parser.toString(), callName,iformObj);
	
			System.out.println("Response XML is: \n" + responseXML);
			
		}catch(Exception e)
		{
			
			logger.info("Exception occurred: createRequestXMLfor ContractSimulationMng "+e.getStackTrace().toString());
			return "";
		}
	
		
		
		JSONObject ContractSimulation_obj = setResponseData_2(iformObj, callName, responseXML);
		logger.info("For contract stimulation object is :"+ContractSimulation_obj);
		String return_string="Success~Contract Simulation executed";

		for(Iterator iterator = ContractSimulation_obj.keySet().iterator(); iterator.hasNext();)
		{
			String key = (String) iterator.next();
			if(key.equalsIgnoreCase("Error"))
			{
				return_string="Error~"+ContractSimulation_obj.get(key).toString();
			}
			else
			{
				logger.info("Values set for"+key+" are "+ContractSimulation_obj.get(key).toString());
				setControlValue(iformObj, key, ContractSimulation_obj.get(key).toString());
			}
		}
		return return_string ;
	}

	
	private String CallRepaymntAccCreation(IFormReference iformObj, String stringdata) {
		// TODO Auto-generated method stub
		// ======= MSB Acc Mng call starts
		String callName = "MSBAcctMng"; //For ammortization details
		String responseXML = createRequestXML(iformObj, callName);
		
		/*JSONObject MSBAcctMng_obj = setResponseData(iformObj, callName, responseXML);
		for(Iterator iterator = MSBAcctMng_obj.keySet().iterator(); iterator.hasNext();)
		{
			String key = (String) iterator.next();
			logger.info("Values set for"+key+" are "+MSBAcctMng_obj.get(key).toString());
			setControlValue(iformObj, key, MSBAcctMng_obj.get(key).toString());
		}
		*/
		
		JSONObject MSBAcctMng_obj = setResponseData_2(iformObj, callName, responseXML);
		logger.info("For CallRepaymntAccCreation object is :"+MSBAcctMng_obj);
		String return_string="Success~MSBAcctMng_obj executed";

		for(Iterator iterator = MSBAcctMng_obj.keySet().iterator(); iterator.hasNext();)
		{
			String key = (String) iterator.next();
			if(key.equalsIgnoreCase("Error"))
			{
				return_string="Error~"+MSBAcctMng_obj.get(key).toString();
			}
			else
			{
				logger.info("Values set for"+key+" are "+MSBAcctMng_obj.get(key).toString());
				setControlValue(iformObj, key, MSBAcctMng_obj.get(key).toString());
			}
		}
		return return_string;
	}
	
	/*
	private String CallMSBLimitMng(IFormReference iformObj, String stringdata) {
		// TODO Auto-generated method stub
		// ======= MSB Limit Mng call starts
		// ======= MSB Limit Mng call starts
		String callName = "MSBLimitMng"; //For ammortization details
		String responseXML = createRequestXML_2(iformObj, callName);
		JSONObject MSBLimitMng_obj = setResponseData(iformObj, callName, responseXML);
		for(Iterator iterator = MSBLimitMng_obj.keySet().iterator(); iterator.hasNext();)
		{
			String key = (String) iterator.next();
			logger.info("Values set for"+key+" are "+MSBLimitMng_obj.get(key).toString());
			setControlValue(iformObj, key, MSBLimitMng_obj.get(key).toString());
		}
		return "Calling MSB Limit Mng";
	}
	
	
	
	private String CallMSBLimitInq(IFormReference iformObj, String stringdata) {
		// TODO Auto-generated method stub
		// ======= MSB Limit Inq call starts
		logger.info("Code for MSBLimitInq starts here");
		String callName = "MSBLimitInq";
		String responseXML = createRequestXML_2(iformObj, callName);
		JSONObject MSBLimit_obj = setResponseDataGrid(iformObj, callName, responseXML);
		List<String> cleared_list = new ArrayList<String>();
		for (Iterator iterator = MSBLimit_obj.keySet().iterator(); iterator.hasNext();) {
		String key = (String) iterator.next();
		logger.info("Key for CallMSBLimitInq table is " + key + "and value is" + MSBLimit_obj.get(key));
		if (!cleared_list.contains(key)) {
			iformObj.clearTable(key);
			cleared_list.add(key);
		}
		iformObj.addDataToGrid(key, (JSONArray) MSBLimit_obj.get(key));
		}
		return "Calling MSB Limit Inq";
	}
	*/
	private String generateAmmortization(IFormReference iformObj, String stringdata) {
				
		logger.info("Inside generateAmmortization function");
		String callName = "ContractAmortizationInq"; //For ammortization details
		String ResponseXML = createRequestXML(iformObj, callName);
		//JSONObject return_obj=new JSONObject();
		
		try
		{
		String restricted_tags=GetXML.getProp().getProperty(callName+"_RestrictedTags");
		String []restricted_values=restricted_tags.split(",");
		for(String temp:restricted_values)
			ResponseXML=ResponseXML.replace(temp,"");
	
		//logger.info("Response XML received by setResponseDataGrid is"+ResponseXML);
		String tagName = "_TagNameResponseGrid";
		String tagNames = GetXML.getProp().getProperty(callName + tagName);
		logger.info(tagNames);
		
		String statuscode=GetXML.getProp().getProperty(callName+"_StatusCode");
		String []status_code_split=statuscode.split("~");
		
		String[] tagValue = tagNames.split(",");
		for(String tag: tagValue)
		{
			String []tags=tag.split("~");
			iformObj.clearTable(tags[tags.length-1]);
			WFXmlResponse objWFxmlResponse = new WFXmlResponse(ResponseXML);
			logger.info("objWFxmlResponse value is "+objWFxmlResponse);

			JSONArray jsonarr=new JSONArray();
			
			logger.info("Status codes are"+status_code_split[0]+"and"+status_code_split[1]);
			String status_code_in_response=objWFxmlResponse.getVal(status_code_split[0]);
			String error_description=objWFxmlResponse.getVal("StatusDesc");
			logger.info("Value of status tag in response is"+status_code_in_response);
			
			if (objWFxmlResponse.getVal(status_code_split[0]).equals(status_code_split[1])) {
			WFXmlList WFXmlList = objWFxmlResponse.createList(tags[0],tags[1]);
			//logger.info("Wfmxmlsit is --------------"+WFXmlList);
			for (int i = 0; WFXmlList.hasMoreElements(true); WFXmlList.skip(true), i++) {
			
				JSONObject jsonobj = new JSONObject();
				for(int j=2;j<tags.length-1;++j)
				{
					
					String tag_split_values=tags[j];
					if((!tag_split_values.contains("@")))
					{
						String []hash_split_values=tag_split_values.split("#");
						String result_from_response=WFXmlList.getVal(hash_split_values[1]);
						if(hash_split_values[0].equalsIgnoreCase("Installment Date (DD-MM-YYYY)"))
						{
							SimpleDateFormat inputFormatter = new SimpleDateFormat("yyyy-MM-dd");
							SimpleDateFormat outputFormatter=new SimpleDateFormat("dd-MM-yyyy");
							try {
								Date installment_date_date = (Date)inputFormatter.parse(result_from_response);
								String result_installment_date=outputFormatter.format(installment_date_date);
								result_from_response=result_installment_date;
								} 
							catch (java.text.ParseException e) 
							{
								logger.info("Exception occurred: generateAmmortization ");
								result_from_response=WFXmlList.getVal(hash_split_values[1]);
								e.printStackTrace();
							}
						}
						else if(hash_split_values[0].equalsIgnoreCase("Outstanding Balance"))
						{
							result_from_response=WFXmlList.getVal(hash_split_values[1]).replaceAll("-","");
							String temp=result_from_response;
							try
							{
								result_from_response=String.format("%.2f", Double.parseDouble(result_from_response));
							}
							catch(Exception e)
							{
								result_from_response=temp;
							}
						}
						else if(hash_split_values[0].equalsIgnoreCase("Profit") || hash_split_values[0].equalsIgnoreCase("Installment Amount") || hash_split_values[0].equalsIgnoreCase("Principal"))
						{
							String temp=result_from_response;
							try
							{
								result_from_response=String.format("%.2f", Double.parseDouble(result_from_response));
							}
							catch(Exception e)
							{
								result_from_response=temp;
							}
						}
						else if(result_from_response.equals(null) || result_from_response.equals(""))
							{
								result_from_response=" ";
							}
						jsonobj.put(hash_split_values[0],result_from_response);
					}
					else
					{
						String []inputTagswithoutRateSign=tag_split_values.split("@");
						
						String []hash_split_values=inputTagswithoutRateSign[0].split("#");
						String result_from_response=WFXmlList.getVal(hash_split_values[1]);
						if(result_from_response.equals(null) || result_from_response.equals(""))
						{
							result_from_response=" ";
						}
						String returned_value="",query="";
		    			try
		    			{
			    			query="SELECT PARAM_VALUE FROM NG_MAST_POS_TAG_KEY_VALUE_CONFIG WHERE PARAM_KEY='"+result_from_response+"' AND TAG_IDENT='"+inputTagswithoutRateSign[1]+"' AND ISACTIVE='Y'" ;
			    			logger.info("Query to replace key with value is"+query);
			    			List<List<String>> code_values = iformObj.getDataFromDB(query);
			    			
				    			if(code_values.size()>0)
				    			{	
				    				returned_value=code_values.get(0).get(0);
				    			}
		    			}catch(Exception e)
		    			{
		    				logger.info("Exception occurred: setResponseDataGrid: Database Query "+query+" and stack trace is"+e);
		    			}
		    			
		    			jsonobj.put(hash_split_values[0],returned_value);
		    			
					}
				}
				logger.info(jsonobj);
				jsonarr.add(jsonobj);
			}
			logger.info("Final json array that we are setting in installment detail grid is "+jsonarr);
			iformObj.addDataToGrid(tags[tags.length-1], jsonarr);
			}
			else
			{
				logger.info("For "+callName+" Status code returned from response is not success ");
				return "Error~In "+callName+" error received with error code "+status_code_in_response+"-"+error_description;
			}
			
			}
		}
		catch(Exception e)
		{
			logger.info("Exception occurred: setResponseDataGrid "+e);
		}
		
		try {
			iformObj.clearTable("STANDING_INSTRUCT_GRID");
			String disbursal = (String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_DISBURSAL_ACC_NO");
			String amount = (String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_INSTALLMENT_AMNT");
			amount=String.format("%.2f", Double.parseDouble(amount));
			JSONArray jsonarr2 = iformObj.getDataFromGrid("Q_NG_POS_INSTALMENT_DETAILS_GRID");
			String strt_date="";
			String end_date="";
			if(jsonarr2.size() > 0) {
				JSONObject jsonobj2 = (JSONObject) jsonarr2.get(0);
				strt_date = (String) jsonobj2.get("Installment Date (DD-MM-YYYY)");
				logger.info("from_date: "+ strt_date);
				JSONObject jsonobj3 = (JSONObject) jsonarr2.get((jsonarr2.size()-1));
				end_date = (String) jsonobj3.get("Installment Date (DD-MM-YYYY)");
				logger.info("to_date: "+ end_date);
			}
			String[] from_date = strt_date.split("-");
			String[] to_date = end_date.split("-");
			strt_date = from_date[0]+"/"+from_date[1]+"/"+from_date[2];
			end_date = to_date[0]+"/"+to_date[1]+"/"+to_date[2];
			
				JSONArray jsonArr = new JSONArray();
				JSONObject jsonObj = new JSONObject();
				jsonObj.put("SSI Bank", "Al Rajhi Bank");
				jsonObj.put("Component", "EMI");
				jsonObj.put("Account Number", disbursal);
				jsonObj.put("From Date", strt_date);
				jsonObj.put("To Date", end_date);
				jsonObj.put("Amount", amount);

				logger.info("Json Array is" + jsonObj);
				jsonArr.add(jsonObj);
				
				iformObj.addDataToGrid("STANDING_INSTRUCT_GRID", jsonArr);
			}
			catch(Exception e)
			{
				logger.info("Exception occurred: standingInstrution "+e);
			}
			

		
		//iformObj.addDataToGrid(return_obj.g, evidence_code_obj_array);
		
		return "Success~Ammortization details generated successfully";
		
	}
	
	private String generateAmmortizationChild(IFormReference iformObj, String stringdata) {
		
		logger.info("Inside generateAmmortization function");
		String callName = "ContractAmortizationInqChild"; //For ammortization details
		String ResponseXML = createRequestXML(iformObj, callName);
		//JSONObject return_obj=new JSONObject();
		
		try
		{
		String restricted_tags=GetXML.getProp().getProperty(callName+"_RestrictedTags");
		String []restricted_values=restricted_tags.split(",");
		for(String temp:restricted_values)
			ResponseXML=ResponseXML.replace(temp,"");
	
		//logger.info("Response XML received by setResponseDataGrid is"+ResponseXML);
		String tagName = "_TagNameResponseGrid";
		String tagNames = GetXML.getProp().getProperty(callName + tagName);
		logger.info(tagNames);
		
		String statuscode=GetXML.getProp().getProperty(callName+"_StatusCode");
		String []status_code_split=statuscode.split("~");
		
		String[] tagValue = tagNames.split(",");
		for(String tag: tagValue)
		{
			String []tags=tag.split("~");
			iformObj.clearTable(tags[tags.length-1]);
			WFXmlResponse objWFxmlResponse = new WFXmlResponse(ResponseXML);
			logger.info("objWFxmlResponse value is "+objWFxmlResponse);

			JSONArray jsonarr=new JSONArray();
			
			logger.info("Status codes are"+status_code_split[0]+"and"+status_code_split[1]);
			String status_code_in_response=objWFxmlResponse.getVal(status_code_split[0]);
			String error_description=objWFxmlResponse.getVal("StatusDesc");
			logger.info("Value of status tag in response is"+status_code_in_response);
			
			if (objWFxmlResponse.getVal(status_code_split[0]).equals(status_code_split[1])) {
			WFXmlList WFXmlList = objWFxmlResponse.createList(tags[0],tags[1]);
			//logger.info("Wfmxmlsit is --------------"+WFXmlList);
			for (int i = 0; WFXmlList.hasMoreElements(true); WFXmlList.skip(true), i++) {
			
				JSONObject jsonobj = new JSONObject();
				for(int j=2;j<tags.length-1;++j)
				{
					
					String tag_split_values=tags[j];
					if((!tag_split_values.contains("@")))
					{
						String []hash_split_values=tag_split_values.split("#");
						String result_from_response=WFXmlList.getVal(hash_split_values[1]);
						if(hash_split_values[0].equalsIgnoreCase("Installment Date (DD-MM-YYYY)"))
						{
							SimpleDateFormat inputFormatter = new SimpleDateFormat("yyyy-MM-dd");
							SimpleDateFormat outputFormatter=new SimpleDateFormat("dd-MM-yyyy");
							try {
								Date installment_date_date = (Date)inputFormatter.parse(result_from_response);
								String result_installment_date=outputFormatter.format(installment_date_date);
								result_from_response=result_installment_date;
								} 
							catch (java.text.ParseException e) 
							{
								logger.info("Exception occurred: generateAmmortization ");
								result_from_response=WFXmlList.getVal(hash_split_values[1]);
								e.printStackTrace();
							}
						}
						else if(hash_split_values[0].equalsIgnoreCase("Outstanding Balance"))
						{
							result_from_response=WFXmlList.getVal(hash_split_values[1]).replaceAll("-","");
							String temp=result_from_response;
							try
							{
								result_from_response=String.format("%.2f", Double.parseDouble(result_from_response));
							}
							catch(Exception e)
							{
								result_from_response=temp;
							}
						}
						else if(hash_split_values[0].equalsIgnoreCase("Profit") || hash_split_values[0].equalsIgnoreCase("Installment Amount") || hash_split_values[0].equalsIgnoreCase("Principal"))
						{
							String temp=result_from_response;
							try
							{
								result_from_response=String.format("%.2f", Double.parseDouble(result_from_response));
							}
							catch(Exception e)
							{
								result_from_response=temp;
							}
						}
						else if(result_from_response.equals(null) || result_from_response.equals(""))
							{
								result_from_response=" ";
							}
						jsonobj.put(hash_split_values[0],result_from_response);
					}
					else
					{
						String []inputTagswithoutRateSign=tag_split_values.split("@");
						
						String []hash_split_values=inputTagswithoutRateSign[0].split("#");
						String result_from_response=WFXmlList.getVal(hash_split_values[1]);
						if(result_from_response.equals(null) || result_from_response.equals(""))
						{
							result_from_response=" ";
						}
						String returned_value="",query="";
		    			try
		    			{
			    			query="SELECT PARAM_VALUE FROM NG_MAST_POS_TAG_KEY_VALUE_CONFIG WHERE PARAM_KEY='"+result_from_response+"' AND TAG_IDENT='"+inputTagswithoutRateSign[1]+"' AND ISACTIVE='Y'" ;
			    			logger.info("Query to replace key with value is"+query);
			    			List<List<String>> code_values = iformObj.getDataFromDB(query);
			    			
				    			if(code_values.size()>0)
				    			{	
				    				returned_value=code_values.get(0).get(0);
				    			}
		    			}catch(Exception e)
		    			{
		    				logger.info("Exception occurred: setResponseDataGrid: Database Query "+query+" and stack trace is"+e);
		    			}
		    			
		    			jsonobj.put(hash_split_values[0],returned_value);
		    			
					}
				}
				logger.info(jsonarr);
				jsonarr.add(jsonobj);
			}
			logger.info("Final json array that we are setting in installment detail grid is "+jsonarr);
			iformObj.addDataToGrid(tags[tags.length-1], jsonarr);
			}
			else
			{
				logger.info("For "+callName+" Status code returned from response is not success ");
				return "Error~In "+callName+" error received with error code "+status_code_in_response+"-"+error_description;
			}
			
			}
		}
		catch(Exception e)
		{
			logger.info("Exception occurred: setResponseDataGrid "+e);
		}
		//iformObj.addDataToGrid(return_obj.g, evidence_code_obj_array);
		
		return "Success~Ammortization details generated successfully";
		
	}
	
	private String calculateProfitPercentage(IFormReference iformObj, String stringdata) {
		String result_string="";
		try
		{
			String product_category=(String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_PRODUCT_CATEGORY");
			String customer_category=(String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_CUSTOMER_CATEGORY");
			String request_type=(String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_REQUEST_TYPE");
			String campaign=(String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_CAMPAIGN");
			String tenure=(String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_TENURE");
			String requested_amt=(String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_REQ_AMNT_SAR");
			
			if(requested_amt==null || requested_amt=="")
			{
				requested_amt="0";
			}
			
			double admin_Fees_rate=0,admin_Fees_vat_per=0,admin_fees=0,vat,broker_fees_vat,total_admin_fees=0,total_broker_fees=0,max_fees_amount=0,broker_fees=0;
			String query="SELECT DEF_PROFIT_RATE,RATE,VAT_PER,MAX_FEES_AMOUNT,BROKER_FEE FROM NG_MAST_POS_PRODUCT A,NG_MAST_POS_FEE B WHERE A.FeeID=B.Fees_ID AND a.CustCategoryID=b.Scheme_ID AND A.Product=(SELECT CODE FROM NG_MAST_PRODUCT WHERE PRODUCT_CATEGORY = '"+product_category+"') AND a.custcategoryID=(SELECT CODE FROM NG_MAST_CUSTOMER WHERE customer_CATEGORY = '"+customer_category+"') AND a.request_type='"+request_type+"' AND a.campaign='"+campaign+"' AND a.max_tenure>='"+tenure+"' AND a.max_amount>="+requested_amt+" AND a.min_amount<="+requested_amt+" ";
			logger.info("Query to calculate profit percentage is "+query);
			List<List<String>> returned_result = iformObj.getDataFromDB(query);
			if(returned_result.size()>0 && returned_result.get(0).size()==5)
			{
				//setControlValue(iformObj,"Q_NG_POS_APPLICATION_DATA_PROFIT", returned_result.get(0).get(0));
				iformObj.setValue("Q_NG_POS_APPLICATION_DATA_PROFIT", returned_result.get(0).get(0));
				iformObj.setValue("Q_NG_POS_APPLICATION_DATA_PROPOSED_PROFIT", returned_result.get(0).get(0));
				admin_Fees_rate= Double.parseDouble(returned_result.get(0).get(1));
				admin_Fees_vat_per=Double.parseDouble(returned_result.get(0).get(2));
				max_fees_amount=Double.parseDouble(returned_result.get(0).get(3));
				broker_fees=Double.parseDouble(returned_result.get(0).get(4));
				logger.info("Setting Profit percentage, fees rate, fees vat and broker fees as :  "+returned_result.get(0).get(0)+", "+returned_result.get(0).get(1)+", "+returned_result.get(0).get(2)+","+returned_result.get(0).get(4));
				result_string= returned_result.get(0).get(0);
			}
			else
			{
				return "Error~No Scheme Available";
			}
		
			if(result_string.equalsIgnoreCase(""))
			{
				iformObj.setValue("Q_NG_POS_APPLICATION_DATA_PROFIT","0");
			}
			
			setControlValue(iformObj,"ADMIN_FEES_RATE", Double.toString(admin_Fees_rate));
			logger.info("Setting Profit ADMIN_FEES_RATE as "+Double.toString(admin_Fees_rate));
			setControlValue(iformObj,"ADMIN_FEES_VAT_PERC",	Double.toString(admin_Fees_vat_per) );
			logger.info("Setting Profit ADMIN_FEES_VAT_PERC as "+Double.toString(admin_Fees_vat_per));
			admin_fees=Double.parseDouble(requested_amt)*admin_Fees_rate/100;//75000
			if(admin_fees>=max_fees_amount)
				admin_fees=max_fees_amount;
			vat=admin_fees*admin_Fees_vat_per/100;
			total_admin_fees=admin_fees+vat;
			logger.info("Setting total admin fees as "+total_admin_fees);
			if(total_admin_fees!=0)
				setControlValue(iformObj,"ADMIN_FEES",String.format("%.2f",admin_fees) );
			else
				setControlValue(iformObj,"ADMIN_FEES","0" );
			
			if(broker_fees!=0)
				setControlValue(iformObj,"BROKER_FEES",String.format("%.2f",broker_fees) );
			else
				setControlValue(iformObj,"BROKER_FEES","0" );
			

			broker_fees_vat=broker_fees*15/100;
			total_broker_fees=broker_fees+broker_fees_vat;
			logger.info("Setting total broker fees as "+total_broker_fees);
			if(total_admin_fees!=0)
				setControlValue(iformObj,"ADMIN_FEES",String.format("%.2f",admin_fees) );
			else
				setControlValue(iformObj,"ADMIN_FEES","0" );
			
			iformObj.clearTable("FEES_CHRGD_GRID");
			JSONObject fees_grid_object=new JSONObject();
			JSONArray fees_grid_array=new JSONArray();
			fees_grid_object.put("Fees Name","Admin fees");
			fees_grid_object.put("Fees Method","With Disbursal");
			fees_grid_object.put("Fees Type ","Rate");
			fees_grid_object.put("Fees %",String.format("%.2f",admin_Fees_rate)); 
			fees_grid_object.put("Fees Amount",String.format("%.2f",admin_fees)); 
			fees_grid_object.put("VAT on Fees",String.format("%.2f",vat)); 
			fees_grid_object.put("Total Fees",String.format("%.2f",total_admin_fees)); 
			fees_grid_array.add(fees_grid_object);
			logger.info("Fee charged array is "+fees_grid_array);
			
			fees_grid_object=new JSONObject();
			fees_grid_object.put("Fees Name","Broker fees");
			fees_grid_object.put("Fees Method","With Disbursal");
			fees_grid_object.put("Fees Type ","Fixed"); 
			fees_grid_object.put("Fees %",""); 
			fees_grid_object.put("Fees Amount",String.format("%.2f",broker_fees)); 
			fees_grid_object.put("VAT on Fees",String.format("%.2f",broker_fees_vat));
			fees_grid_object.put("Total Fees",String.format("%.2f",total_broker_fees)); 
			fees_grid_array.add(fees_grid_object);
			
			iformObj.addDataToGrid("FEES_CHRGD_GRID", fees_grid_array);
			logger.info("Fee charged array is "+fees_grid_array);
			/*
			String los_app_num=getWorkitemName(iformObj);
		    los_app_num=los_app_num.substring(4,los_app_num.length() - 4);
		    los_app_num=los_app_num.replaceFirst("^0+(?!$)","");
		    int no_of_zeroes=10-los_app_num.length();
		    for(int i=0;i<no_of_zeroes;i++)
			{
		    	los_app_num='0'+los_app_num;
		    }
		    
		    logger.info("Setting LOS Application no as "+los_app_num);
			setControlValue(iformObj,"LOS_APPLICATION_NO",los_app_num);
			*/
		
		}
		catch(Exception e)
		{
			logger.info("Exception occurred: calculateProfitPercentage: with stack trace "+e);
		}
		try
		{
		String disbursal = (String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_DISBURSAL_ACC_NO");
		String amount = (String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_INSTALLMENT_AMNT");
		JSONArray jsonarr2 = iformObj.getDataFromGrid("Q_NG_POS_INSTALMENT_DETAILS_GRID");
		String strt_date="";
		String end_date="";
		if(jsonarr2.size() > 0) 
		{
			JSONObject jsonobj2 = (JSONObject) jsonarr2.get(0);
			strt_date = (String) jsonobj2.get("Installment Date");
			logger.info("from_date: "+ strt_date);
			JSONObject jsonobj3 = (JSONObject) jsonarr2.get((jsonarr2.size()-1));
			end_date = (String) jsonobj3.get("Installment Date");
			logger.info("to_date: "+ end_date);
		}
		String[] from_date = strt_date.split("-");
		String[] to_date = end_date.split("-");
		strt_date = from_date[2]+"/"+from_date[1]+"/"+from_date[0];
		end_date = to_date[2]+"/"+to_date[1]+"/"+to_date[0];
		
			JSONArray jsonArr = new JSONArray();
			JSONObject jsonObj = new JSONObject();
			jsonObj.put("SSI Bank", "Al Rajhi Bank");
			jsonObj.put("Component", "EMI");
			jsonObj.put("Account Number", disbursal);
			jsonObj.put("From Date", strt_date);
			jsonObj.put("To Date", end_date);
			jsonObj.put("Amount", amount);

			logger.info("Json Array is" + jsonObj);
			jsonArr.add(jsonObj);
			
			iformObj.addDataToGrid("table62", jsonArr);
		}
		catch(Exception e)
		{
			logger.info("Exception occurred: standingInstrution "+e);
		}
		
		return "Success~"+result_string;
	}
	
	private String calculateDisbursementAdminFee(IFormReference iformObj, String stringdata) {
		try
		{
			String product_category=(String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_PRODUCT_CATEGORY");
			String customer_category=(String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_CUSTOMER_CATEGORY");
			String request_type=(String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_REQUEST_TYPE");
			String campaign=(String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_CAMPAIGN");
			String tenure=(String) iformObj.getValue("Q_NG_POS_APPLICATION_DATA_TENURE");
			String requested_amt=(String) iformObj.getValue("Q_NG_POS_DISBURSAL_DATA_DISBURSAL_AMT");
			
			if(requested_amt==null || requested_amt=="")
			{
				requested_amt="0";
			}
			
			double admin_Fees_rate=0,admin_Fees_vat_per=0,admin_fees=0,vat,broker_fees_vat,total_admin_fees=0,total_broker_fees=0,max_fees_amount=0,broker_fees=0;
			String query="SELECT DEF_PROFIT_RATE,RATE,VAT_PER,MAX_FEES_AMOUNT,BROKER_FEE FROM NG_MAST_POS_PRODUCT A,NG_MAST_POS_FEE B WHERE A.FeeID=B.Fees_ID AND a.CustCategoryID=b.Scheme_ID AND A.Product=(SELECT CODE FROM NG_MAST_PRODUCT WHERE PRODUCT_CATEGORY = '"+product_category+"') AND a.custcategoryID=(SELECT CODE FROM NG_MAST_CUSTOMER WHERE customer_CATEGORY = '"+customer_category+"') AND a.request_type='"+request_type+"' AND a.campaign='"+campaign+"' AND a.max_tenure>='"+tenure+"' AND a.max_amount>="+requested_amt+" AND a.min_amount<="+requested_amt+" ";
			logger.info("Query to calculate fees details for disbusement is "+query);
			List<List<String>> returned_result = iformObj.getDataFromDB(query);
			if(returned_result.size()>0 && returned_result.get(0).size()==5)
			{
				admin_Fees_rate= Double.parseDouble(returned_result.get(0).get(1));
				admin_Fees_vat_per=Double.parseDouble(returned_result.get(0).get(2));
				max_fees_amount=Double.parseDouble(returned_result.get(0).get(3));
				broker_fees=Double.parseDouble(returned_result.get(0).get(4));
				logger.info("Setting Profit percentage, fees rate, fees vat and broker fees is  :  "+returned_result.get(0).get(0)+", "+returned_result.get(0).get(1)+", "+returned_result.get(0).get(2)+","+returned_result.get(0).get(4));
			}
		
			admin_fees=Double.parseDouble(requested_amt)*admin_Fees_rate/100;//75000
			if(admin_fees>=max_fees_amount)
				admin_fees=max_fees_amount;
			vat=admin_fees*admin_Fees_vat_per/100;
			total_admin_fees=admin_fees+vat;
			logger.info("Setting total admin fees as "+total_admin_fees);
			if(total_admin_fees!=0)
				setControlValue(iformObj,"ADMIN_FEES_DISB",String.format("%.2f",admin_fees) );
			else
				setControlValue(iformObj,"ADMIN_FEES_DISB","0" );
			
			if(broker_fees!=0)
				setControlValue(iformObj,"BROKER_FEES_DISB",String.format("%.2f",broker_fees) );
			else
				setControlValue(iformObj,"BROKER_FEES_DISB","0" );
			
			
			broker_fees_vat=broker_fees*15/100;
			total_broker_fees=broker_fees+broker_fees_vat;
			logger.info("Setting total broker fees as "+total_broker_fees);
			if(total_admin_fees!=0)
				setControlValue(iformObj,"ADMIN_FEES",String.format("%.2f",admin_fees) );
			else
				setControlValue(iformObj,"ADMIN_FEES","0" );
			
			iformObj.clearTable("FEES_CHRGD_GRID_DISB");
			JSONObject fees_grid_object=new JSONObject();
			JSONArray fees_grid_array=new JSONArray();
			fees_grid_object.put("Fees Name","Admin fees");
			fees_grid_object.put("Fees Method","With Disbursal");
			fees_grid_object.put("Fees Type ","Rate");
			fees_grid_object.put("Fees %",admin_Fees_rate);
			fees_grid_object.put("Fees Amount",admin_fees);
			fees_grid_object.put("VAT on Fees",vat);
			fees_grid_object.put("Total Fees",total_admin_fees);
			fees_grid_array.add(fees_grid_object);
			
			
			fees_grid_object=new JSONObject();
			fees_grid_object.put("Fees Name","Broker fees");
			fees_grid_object.put("Fees Method","With Disbursal");
			fees_grid_object.put("Fees Type ","Fixed"); 
			fees_grid_object.put("Fees %",""); 
			fees_grid_object.put("Fees Amount",String.format("%.2f",broker_fees)); 
			fees_grid_object.put("VAT on Fees",String.format("%.2f",broker_fees_vat));
			fees_grid_object.put("Total Fees",String.format("%.2f",total_broker_fees)); 
			fees_grid_array.add(fees_grid_object);
			
			//iformObj.addDataToGrid("FEES_CHRGD_GRID", fees_grid_array);
			//logger.info("Fee charged array is "+fees_grid_array);
			
			iformObj.addDataToGrid("FEES_CHRGD_GRID_DISB", fees_grid_array);
			logger.info("Fee charged array in FEES_CHRGD_GRID_DISB is "+fees_grid_array);
		}
		catch(Exception e)
		{
			logger.info("Exception occurred: calculateProfitPercentage: with stack trace "+e);
		}
		return "Fees details grid filled for disbursement successfully";
	}

	private String ConvertHijriDate(IFormReference iformObj, String stringdata) {
		logger.info("Inside covert hijri to Gr function with stringdata "+stringdata);
		String data_split[] = stringdata.split("#");
		String input_date = getControlValue(iformObj, data_split[0]);
		if( data_split[0].equalsIgnoreCase("table10599_BIRTH_DATE"))
		{
			logger.info("Inside if condition");
			String str = new String(input_date);
			String dateval = str.substring(6,8);
			String monthval = str.substring(4,6);
			String yearval = str.substring(0,4);
			input_date = dateval+monthval+yearval;
			logger.info(input_date);
		}
		String output_date="";
		logger.info("Input date without hash is "+input_date);
		if(input_date.length()>0)
		{
			if(input_date.length()==8)
				input_date = input_date.substring(0,2)+'/'+input_date.substring(2,4)+'/'+input_date.substring(4,8);
			//input_date=addHashtoDate(iformObj, input_date);
			logger.info("Input date with hash is "+input_date);
			Date input_formatted_date = null;
			try 
			{
				input_formatted_date = new SimpleDateFormat("dd/MM/yyyy").parse(input_date);
			}
			catch (java.text.ParseException e)
			{
				logger.info(" ConvertHijriDate Exception is" + e);
				e.printStackTrace();
			}
			output_date = convertHijriToGr(iformObj, input_formatted_date);
			logger.info("Output date with hash is "+output_date);
			setControlValue(iformObj, data_split[1], output_date);
		}
		
		return "Gr date set successfully and result is "+output_date;
	}

	private String fillSIMAHData(IFormReference iformObj, String stringdata) 
	{	
	 try
	 {
		logger.info("Inside fillSIMAHData function handling");
		String current_wi_name=getWorkitemName(iformObj);
		String padded_cic_no=(String) iformObj.getValue("PADDED_CIC_NO");
		logger.info("Current workstep name is "+current_wi_name+" and padded cic no is "+padded_cic_no);
		String query="SELECT WI_NAME,CHECKED_DATE from NG_FLEET_SIMAH_EXPIRY_CHECK WHERE CIC_NO='"+padded_cic_no+"' AND ISACTIVE='Y' ORDER BY CHECKED_DATE DESC ";
		List<List<String>> simah_details = iformObj.getDataFromDB(query);
		logger.info("Query to check SIMAH expiry is "+query+" and it's result is "+simah_details);
		// New Code for 60 days expiry check
		//LocalDateTime today_date=LocalDateTime.parse(new SimpleDateFormat().format(new Date()),DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss"));
		String date = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss").format(new Date());
		LocalDateTime today_date=LocalDateTime.parse(date,DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss"));
		logger.info("fillSIMAHData: Today's date is "+today_date);
		if(simah_details.size()>0)
		{	
			logger.info("In fillsimah data coming here because record is present in NG_FLEET_SIMAH_EXPIRY_CHECK");
			List<String> latest_cic_record=simah_details.get(0);
			String wi_name=latest_cic_record.get(0);
			String checked_date=latest_cic_record.get(1);
			
			LocalDateTime checked_date_obj = LocalDateTime.parse(checked_date,DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss"));
			LocalDateTime date_after_30_days=checked_date_obj.plusDays(30);
			logger.info("Inside fillSIMAHData: Last checked date for cic_no "+padded_cic_no+" is "+checked_date_obj+ ", its 30 days later date is "+date_after_30_days+" and todays date is "+today_date);
			logger.info("Comparison of today date with 30 days after is "+today_date.compareTo(date_after_30_days));
			logger.info("Comparison of today date with 30 days after is "+date_after_30_days.compareTo(today_date));
			
			if(today_date.compareTo(date_after_30_days)>0)
			{
				logger.info("In fillsimah data coming here because today's date is greater than 30 days, hence hitting url to fetch SIMAH data");
				if(!wi_name.equalsIgnoreCase(current_wi_name))
				{		
						logger.info("In fillsimah data coming here because current winame is not equal to winame fetched from DB");	
						String callName = "RetrieveCommercialSummaryReport";
						String responseXML = createRequestXML(iformObj, callName);
						String cic_no="";
						JSONObject jsonobj = setResponseData_2(iformObj, callName, responseXML);
	
						for (Iterator iterator = jsonobj.keySet().iterator(); iterator.hasNext();) 
						{
							String key = (String) iterator.next();
							if (!jsonobj.get(key).toString().contains("#")) 
							{
								setControlValue(iformObj, key, jsonobj.get(key).toString());
							}
						}
						JSONObject return_obj = setResponseDataGrid(iformObj, callName, responseXML);
						for (Iterator iterator = return_obj.keySet().iterator(); iterator.hasNext();) 
						{
							String key = (String) iterator.next();
							iformObj.addDataToGrid(key, (JSONArray) return_obj.get(key));
						}
						logger.info("In fillsimah data, we fetched fresh record");
						
						//String enquiry_no=(String) jsonobj.get("Q_NG_POS_SIMAH_BASIC_DETAILS_ENQUIRY_NO");
						String reference_no=(String) jsonobj.get("Q_NG_POS_SIMAH_BASIC_DETAILS_REFERENCE_NO");
						
						//if(enquiry_no.trim().equalsIgnoreCase("") && reference_no.trim().equalsIgnoreCase(""))
						if(reference_no.trim().equalsIgnoreCase(""))
						{
							logger.info("but as no result came we are not inserting INTO NG_FLEET_SIMAH_EXPIRY_CHECK");
						}
						else
						{
							query="UPDATE NG_FLEET_SIMAH_EXPIRY_CHECK SET ISACTIVE='N' WHERE WI_NAME='"+wi_name+"' ";
							iformObj.saveDataInDB(query);
							logger.info("In fillsimah data, query to update for old workitem INTO NG_FLEET_SIMAH_EXPIRY_CHECK is "+query);	
							
							query="INSERT INTO NG_FLEET_SIMAH_EXPIRY_CHECK (WI_NAME,CIC_NO,CHECKED_DATE) VALUES ('"+current_wi_name+"','"+padded_cic_no+"', getdate()  )";
							iformObj.saveDataInDB(query);
							logger.info("In fillsimah data, query to insert INTO NG_FLEET_SIMAH_EXPIRY_CHECK is "+query);	 
						}	
						
				}
				else
				{
					logger.info("Clearing tables to override data");
					
					iformObj.setValue("Q_NG_POS_SIMAH_BASIC_DETAILS_REFERENCE_NO", "");
					
					iformObj.clearTable("Q_NG_POS_SIMAH_ADDRESS_DETAILS_GRID");
					iformObj.clearTable("Q_NG_POS_SIMAH_CONTACT_DETAILS_GRID");
					iformObj.clearTable("Q_NG_POS_SIMAH_PREVIOUS_ENQUIRIES_GRID");
					iformObj.clearTable("Q_NG_POS_SIMAH_RATING_GRID");
					iformObj.clearTable("Q_NG_POS_SIMAH_L1_C1_SUMMARY_GRID");
					iformObj.clearTable("Q_NG_POS_SIMAH_L2_C1_SUMMARY_GRID");
					iformObj.clearTable("Q_NG_POS_SIMAH_DEFAULTS_GRID");
					iformObj.clearTable("Q_NG_POS_SIMAH_BOUNCED_CHEQUES_GRID");
					iformObj.clearTable("Q_NG_POS_SIMAH_KEY_STAKEHOLDER_GRID");
					iformObj.clearTable("Q_NG_POS_SIMAH_GUARAN_KEY_STAKEHOLDER_GRID");
					iformObj.clearTable("Q_NG_POS_SIMAH_KEY_STAKEHOLDER_GRID");
					iformObj.clearTable("Q_NG_POS_SIMAH_JUDGEMENT_GRID");
					iformObj.clearTable("Q_NG_POS_SIMAH_AS_NARRATIVE_GRID");
					iformObj.clearTable("Q_NG_POS_CREDITLINE_SIMAH_NONFUNDED_DET_GRID");
					iformObj.clearTable("Q_NG_POS_CREDITLINE_SIMAH_FUNDED_DET_GRID");

					
					String callName = "RetrieveCommercialSummaryReport";
					//LocalDateTime today_date=LocalDateTime.parse(new SimpleDateFormat().format(new Date()),DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss"));
					String responseXML = createRequestXML(iformObj, callName);
					String cic_no="";
					JSONObject jsonobj = setResponseData_2(iformObj, callName, responseXML);
	
					for (Iterator iterator = jsonobj.keySet().iterator(); iterator.hasNext();) 
					{
						String key = (String) iterator.next();
						if (!jsonobj.get(key).toString().contains("#")) 
						{
							setControlValue(iformObj, key, jsonobj.get(key).toString());
						}
					}
	
					JSONObject return_obj = setResponseDataGrid(iformObj, callName, responseXML);
					for (Iterator iterator = return_obj.keySet().iterator(); iterator.hasNext();) 
					{
						String key = (String) iterator.next();
						iformObj.addDataToGrid(key, (JSONArray) return_obj.get(key));
					}
			
					
					//String enquiry_no=(String) jsonobj.get("Q_NG_POS_SIMAH_BASIC_DETAILS_ENQUIRY_NO");
					String reference_no=(String) jsonobj.get("Q_NG_POS_SIMAH_BASIC_DETAILS_REFERENCE_NO");
					
					//if(enquiry_no.trim().equalsIgnoreCase("") && reference_no.trim().equalsIgnoreCase(""))
					if(reference_no.trim().equalsIgnoreCase(""))
					{
						logger.info("but as no result came we are not inserting INTO NG_FLEET_SIMAH_EXPIRY_CHECK");
					}
					else
					{
						query="UPDATE NG_FLEET_SIMAH_EXPIRY_CHECK SET CHECKED_DATE='"+today_date+"' WHERE WI_NAME='"+current_wi_name+"'  ";
						iformObj.saveDataInDB(query);
						logger.info("FillSimah update query in case of same wsname older than 30 days is "+query);
					}	
					
					//query="UPDATE NG_FLEET_SIMAH_EXPIRY_CHECK SET CHECKED_DATE='"+today_date+"' WHERE WI_NAME='"+current_wi_name+"'  ";
					//iformObj.saveDataInDB(query);
					//logger.info("FillSimah update query in case of same wsname older than 30 days is "+query);
				}
			}
			else
			{	
				if(!current_wi_name.equalsIgnoreCase(wi_name))
				{
					boolean record_already_present_flag=false;
					query="SELECT ENQUIRY_NO,SERVICE,REPORT_DATE_GR from NG_FLEET_SIMAH_BASIC_DETAILS WHERE WI_NAME='"+current_wi_name+"'   ";
					List<List> result=iformObj.getDataFromDB(query);
					logger.info("Query to check if records are present for this workitem no or not is "+query+" and its result is "+result);
					if(result.size()>0)
					{
						if(result.get(0).size()>0)
						{
							if(result.get(0).get(0)!=null ||result.get(0).get(0)!="")
								record_already_present_flag=true;
						}
					}
					logger.info("record_already_present_flag is "+record_already_present_flag);
					
					if(!record_already_present_flag)
					{
						logger.info("In fillsimah data coming here because today's date is less than 30 days, hence fetching record from DB");
						query="INSERT INTO NG_FLEET_SIMAH_ADDRESS_DETAILS_GRID (WI_NAME,ADDRESS_LINE_1_ENG,ADDRESS_LINE_2_ENG,ADDRESS_LINE_3_ENG,ADDRESS_LINE_4_ENG,ADDRESS_LINE_1_AR,ADDRESS_LINE_2_AR,ADDRESS_LINE_3_AR,ADDRESS_LINE_4_AR,PO_BOX,CITY,POSTAL_CODE,EXTRA_NUMBER,DATE_OF_UPLOAD) SELECT '"+current_wi_name+"',ADDRESS_LINE_1_ENG,ADDRESS_LINE_2_ENG,ADDRESS_LINE_3_ENG,ADDRESS_LINE_4_ENG,ADDRESS_LINE_1_AR,ADDRESS_LINE_2_AR,ADDRESS_LINE_3_AR,ADDRESS_LINE_4_AR,PO_BOX,CITY,POSTAL_CODE,EXTRA_NUMBER,DATE_OF_UPLOAD from NG_FLEET_SIMAH_ADDRESS_DETAILS_GRID WHERE WI_NAME='"+wi_name+"'";					
						logger.info("Query to fetch in fillSimah is "+query);
						iformObj.saveDataInDB(query);
						query="INSERT INTO NG_FLEET_SIMAH_ADDRESS_DETAILS_GRID (WI_NAME,ADDRESS_LINE_1_ENG,ADDRESS_LINE_2_ENG,ADDRESS_LINE_3_ENG,ADDRESS_LINE_4_ENG,ADDRESS_LINE_1_AR,ADDRESS_LINE_2_AR,ADDRESS_LINE_3_AR,ADDRESS_LINE_4_AR,PO_BOX,CITY,POSTAL_CODE,EXTRA_NUMBER,DATE_OF_UPLOAD) SELECT '"+current_wi_name+"',ADDRESS_LINE_1_ENG,ADDRESS_LINE_2_ENG,ADDRESS_LINE_3_ENG,ADDRESS_LINE_4_ENG,ADDRESS_LINE_1_AR,ADDRESS_LINE_2_AR,ADDRESS_LINE_3_AR,ADDRESS_LINE_4_AR,PO_BOX,CITY,POSTAL_CODE,EXTRA_NUMBER,DATE_OF_UPLOAD from NG_FLEET_SIMAH_ADDRESS_DETAILS_GRID WHERE WI_NAME='"+wi_name+"'  ";
						logger.info("Query to fetch in fillSimah is "+query);
						iformObj.saveDataInDB(query);
						query="INSERT INTO NG_FLEET_SIMAH_AS_NARRATIVE_GRID (WI_NAME,NARRATIVE_TYPE,DATE_LOADED,LOADED_BY,TEXT_ENG,TEXT_AR) SELECT '"+current_wi_name+"',NARRATIVE_TYPE,DATE_LOADED,LOADED_BY,TEXT_ENG,TEXT_AR from NG_FLEET_SIMAH_AS_NARRATIVE_GRID WHERE WI_NAME='"+wi_name+"'  ";
						logger.info("Query to fetch in fillSimah is "+query);
						iformObj.saveDataInDB(query);
						query="INSERT INTO NG_FLEET_SIMAH_BASIC_DETAILS (WI_NAME,SERVICE,ACTION,MEMBER_ID,USER_ID,RUN_NO,TOTAL_ITEMS,ERROR_ITEMS,REPORT_DATE_GR,REPORT_DATE_HJ,ENQUIRY_TYPE,ENQUIRY_NO,REFERENCE_NO,AMOUNT,GOVERNMENT_GUARANTEED,PRODUCT_TYPE,CREDIT_FACILITY) SELECT '"+current_wi_name+"',SERVICE,ACTION,MEMBER_ID,USER_ID,RUN_NO,TOTAL_ITEMS,ERROR_ITEMS,REPORT_DATE_GR,REPORT_DATE_HJ,ENQUIRY_TYPE,ENQUIRY_NO,REFERENCE_NO,AMOUNT,GOVERNMENT_GUARANTEED,PRODUCT_TYPE,CREDIT_FACILITY from NG_FLEET_SIMAH_BASIC_DETAILS WHERE WI_NAME='"+wi_name+"'  ";
						logger.info("Query to fetch in fillSimah is "+query);
						iformObj.saveDataInDB(query);
						query="INSERT INTO NG_FLEET_SIMAH_BOUNCED_CHEQUES_GRID (WI_NAME,REGISTRATION_DATE,REPORTING_BANK,LOAD_DATE,REFERENCE_NO,AMOUNT,DEFAULT_STATUS,SETTLEMENT_DATE,BCHQRSCD) SELECT '"+current_wi_name+"',REGISTRATION_DATE,REPORTING_BANK,LOAD_DATE,REFERENCE_NO,AMOUNT,DEFAULT_STATUS,SETTLEMENT_DATE,BCHQRSCD from NG_FLEET_SIMAH_BOUNCED_CHEQUES_GRID WHERE WI_NAME='"+wi_name+"'  ";
						logger.info("Query to fetch in fillSimah is "+query);
						iformObj.saveDataInDB(query);
						query="INSERT INTO NG_FLEET_SIMAH_CONSUMER_BUREAU_SUMMARY (WI_NAME,PREVIOUS_ENQUIRY_CNT,PREVIOUS_30_DAYS_DENQ_CNT,CI_COUNT,GUARANTEED_CI_COUNT,ISSUE_DATE,TOTAL_LIMITS,TOTAL_GUI_LIMITS,TOTAL_LIABILITIES,TOTAL_DEFAULTS,CURRENT_DEL_BAL) SELECT '"+current_wi_name+"',PREVIOUS_ENQUIRY_CNT,PREVIOUS_30_DAYS_DENQ_CNT,CI_COUNT,GUARANTEED_CI_COUNT,ISSUE_DATE,TOTAL_LIMITS,TOTAL_GUI_LIMITS,TOTAL_LIABILITIES,TOTAL_DEFAULTS,CURRENT_DEL_BAL from NG_FLEET_SIMAH_CONSUMER_BUREAU_SUMMARY WHERE WI_NAME='"+wi_name+"'  ";
						logger.info("Query to fetch in fillSimah is "+query);
						iformObj.saveDataInDB(query);
						query="INSERT INTO NG_FLEET_SIMAH_CONTACT_DETAILS_GRID (WI_NAME,PHONE_TYPE,COUNTRY,PREFIX,CONTACT_NUMBER,EXTENSION,UNFORMATED_CONTACT) SELECT '"+current_wi_name+"',PHONE_TYPE,COUNTRY,PREFIX,CONTACT_NUMBER,EXTENSION,UNFORMATED_CONTACT from NG_FLEET_SIMAH_CONTACT_DETAILS_GRID WHERE WI_NAME='"+wi_name+"'  ";
						logger.info("Query to fetch in fillSimah is "+query);
						iformObj.saveDataInDB(query);
						query="INSERT INTO NG_FLEET_SIMAH_DEFAULT_SUMMARY (WI_NAME,UNSETTLED_DEFAULT_COUNT,SETTLED_DEFAULT_COUNT,UNSETTLED_DEFAULTS_AMT,UNSETTLED_BC_COUNT,SETTLED_BC_COUNT,UNSETTLED_BC_AMOUNT) SELECT '"+current_wi_name+"',UNSETTLED_DEFAULT_COUNT,SETTLED_DEFAULT_COUNT,UNSETTLED_DEFAULTS_AMT,UNSETTLED_BC_COUNT,SETTLED_BC_COUNT,UNSETTLED_BC_AMOUNT from NG_FLEET_SIMAH_DEFAULT_SUMMARY WHERE WI_NAME='"+wi_name+"'  ";
						logger.info("Query to fetch in fillSimah is "+query);
						iformObj.saveDataInDB(query);
						query="INSERT INTO NG_FLEET_SIMAH_DEFAULTS_GRID (WI_NAME,PRODUCT_TYPE,CREDITOR,ACCOUNT_NO,DATE_LOADED,ORIGINAL_AMT,OS_BALANCE,DEFAULT_STATUS,SETTLEMENT_DATE) SELECT '"+current_wi_name+"',PRODUCT_TYPE,CREDITOR,ACCOUNT_NO,DATE_LOADED,ORIGINAL_AMT,OS_BALANCE,DEFAULT_STATUS,SETTLEMENT_DATE from NG_FLEET_SIMAH_DEFAULTS_GRID WHERE WI_NAME='"+wi_name+"'  ";
						logger.info("Query to fetch in fillSimah is "+query);
						iformObj.saveDataInDB(query);
						query="INSERT INTO NG_FLEET_SIMAH_DELIQUENCIES_SUMMARY (WI_NAME,O_30_OVER,O_60_OVER,O_90_OVER,O_120_OVER,O_150_OVER,O_180_OVER,TC_30_OVER,TC_60_OVER,TC_90_OVER,TC_120_OVER,TC_150_OVER,TC_180_OVER,PDB_30_OVER,PDB_60_OVER,PDB_90_OVER,PDB_120_OVER,PDB_150_OVER,PDB_180_OVER) SELECT '"+current_wi_name+"',O_30_OVER,O_60_OVER,O_90_OVER,O_120_OVER,O_150_OVER,O_180_OVER,TC_30_OVER,TC_60_OVER,TC_90_OVER,TC_120_OVER,TC_150_OVER,TC_180_OVER,PDB_30_OVER,PDB_60_OVER,PDB_90_OVER,PDB_120_OVER,PDB_150_OVER,PDB_180_OVER from NG_FLEET_SIMAH_DELIQUENCIES_SUMMARY WHERE WI_NAME='"+wi_name+"'  ";
						logger.info("Query to fetch in fillSimah is "+query);
						iformObj.saveDataInDB(query);
						query="INSERT INTO NG_FLEET_SIMAH_DISCLAIMER (WI_NAME,DISCLAIMER_ENG,DISCLAIMER_AR) SELECT '"+current_wi_name+"',DISCLAIMER_ENG,DISCLAIMER_AR from NG_FLEET_SIMAH_DISCLAIMER WHERE WI_NAME='"+wi_name+"'  ";
						logger.info("Query to fetch in fillSimah is "+query);
						iformObj.saveDataInDB(query);
						query="INSERT INTO NG_FLEET_SIMAH_GUARAN_KEY_STAKEHOLDER_GRID (WI_NAME,G_MEMBER,GUARANTOR_NAME_ENG,GUARANTOR_NAME_AR,ID_NUMBER,ID_ISSUER,ID_CITY,G_AMOUNT) SELECT '"+current_wi_name+"',G_MEMBER,GUARANTOR_NAME_ENG,GUARANTOR_NAME_AR,ID_NUMBER,ID_ISSUER,ID_CITY,G_AMOUNT from NG_FLEET_SIMAH_GUARAN_KEY_STAKEHOLDER_GRID WHERE WI_NAME='"+wi_name+"'  ";
						logger.info("Query to fetch in fillSimah is "+query);
						iformObj.saveDataInDB(query);
						query="INSERT INTO NG_FLEET_SIMAH_ID_DETAILS (WI_NAME,NAME,NAME_AR,C_DATE,PREVIOUS_NAME,PERVIOUS_NAME_AR,ISSUER,ISSUER_DESCRIPT,ISSUER_DESCRIPT_AR,IDCOD,ISSCIT,ISSCIT_DESCRIPT,ISSCIT_DESCRIPT_AR,EXPIRY_DATE,LEGAL_FORM,DATE_ESTABLISHED,BUSINESS_ACTIVITY,WEBSITE,NO_OF_STAFF,GENDER,DOB,NATIONALITY) SELECT '"+current_wi_name+"',NAME,NAME_AR,C_DATE,PREVIOUS_NAME,PERVIOUS_NAME_AR,ISSUER,ISSUER_DESCRIPT,ISSUER_DESCRIPT_AR,IDCOD,ISSCIT,ISSCIT_DESCRIPT,ISSCIT_DESCRIPT_AR,EXPIRY_DATE,LEGAL_FORM,DATE_ESTABLISHED,BUSINESS_ACTIVITY,WEBSITE,NO_OF_STAFF,GENDER,DOB,NATIONALITY from NG_FLEET_SIMAH_ID_DETAILS WHERE WI_NAME='"+wi_name+"'  ";
						logger.info("Query to fetch in fillSimah is "+query);
						iformObj.saveDataInDB(query);
						query="INSERT INTO NG_FLEET_SIMAH_JUDGEMENT_GRID (WI_NAME,ENFORCE_DATE,RES_NUMBER,COURT_DATE,CASE_NUMBER,DATE_LOADED,ORIGINAL_CLAIM_AMOUNT,JUDGEMENT_STATUS,SETTLEMENT_DATE) SELECT '"+current_wi_name+"',ENFORCE_DATE,RES_NUMBER,COURT_DATE,CASE_NUMBER,DATE_LOADED,ORIGINAL_CLAIM_AMOUNT,JUDGEMENT_STATUS,SETTLEMENT_DATE from NG_FLEET_SIMAH_JUDGEMENT_GRID WHERE WI_NAME='"+wi_name+"'  ";
						logger.info("Query to fetch in fillSimah is "+query);
						iformObj.saveDataInDB(query);
						query="INSERT INTO NG_FLEET_SIMAH_KEY_STAKEHOLDER_GRID (WI_NAME,NAME,NAME_U,NAME_ENG,NAME_AR,ID_NO,ID_ISSUER,CITY,RELATIONSHIP,RELATIONSHIP_AR,RELATIONSHIP_CODE,RELATIONSHIP_DESCRIPT,RELATIONSHIP_DESCRIPT_AR,PERCENTAGE_OWNED) SELECT '"+current_wi_name+"',NAME,NAME_U,NAME_ENG,NAME_AR,ID_NO,ID_ISSUER,CITY,RELATIONSHIP,RELATIONSHIP_AR,RELATIONSHIP_CODE,RELATIONSHIP_DESCRIPT,RELATIONSHIP_DESCRIPT_AR,PERCENTAGE_OWNED from NG_FLEET_SIMAH_KEY_STAKEHOLDER_GRID WHERE WI_NAME='"+wi_name+"'  ";
						logger.info("Query to fetch in fillSimah is "+query);
						iformObj.saveDataInDB(query);
						query="INSERT INTO NG_FLEET_SIMAH_L1_C1_SUMMARY_GRID (WI_NAME,CREDITOR,APPROVED_LIMIT,GLOBAL_LIMIT,UTILIZATION,UN_UTILIZED_BALANCE,MEMBER_STATUS,PAST_DUE,COLLATERAL,RELATIONSHIP_AGE,AS_OF_DATE,FUNDED_LIMIT,FUNDED_CAP,FUNDED_UTILIZATION,FUNDED_UTILIZATION_BALANCE,NON_FUNDED_LIMIT,NON_FUNDED_CAP,NON_FUNDED_UTILIZATION,NON_FUNDED_UN_UTILIZED_BALANCE,SHARED_LIMIT) SELECT '"+current_wi_name+"',CREDITOR,APPROVED_LIMIT,GLOBAL_LIMIT,UTILIZATION,UN_UTILIZED_BALANCE,MEMBER_STATUS,PAST_DUE,COLLATERAL,RELATIONSHIP_AGE,AS_OF_DATE,FUNDED_LIMIT,FUNDED_CAP,FUNDED_UTILIZATION,FUNDED_UTILIZATION_BALANCE,NON_FUNDED_LIMIT,NON_FUNDED_CAP,NON_FUNDED_UTILIZATION,NON_FUNDED_UN_UTILIZED_BALANCE,SHARED_LIMIT from NG_FLEET_SIMAH_L1_C1_SUMMARY_GRID WHERE WI_NAME='"+wi_name+"'  ";
						logger.info("Query to fetch in fillSimah is "+query);
						iformObj.saveDataInDB(query);
						query="INSERT INTO NG_FLEET_SIMAH_L2_C1_SUMMARY_GRID (WI_NAME,CREDITOR,APPROVED_LIMIT,GLOBAL_LIMIT,UTILIZATION,UN_UTILIZED_BALANCE,MEMBER_STATUS,PAST_DUE,COLLATERAL,RELATIONSHIP_AGE,AS_OF_DATE,FUNDED_LIMIT,FUNDED_CAP,FUNDED_UTILIZATION,FUNDED_UTILIZATION_BALANCE,NON_FUNDED_LIMIT,NON_FUNDED_CAP,NON_FUNDED_UTILIZATION,NON_FUNDED_UN_UTILIZED_BALANCE,SHARED_LIMIT) SELECT '"+current_wi_name+"',CREDITOR,APPROVED_LIMIT,GLOBAL_LIMIT,UTILIZATION,UN_UTILIZED_BALANCE,MEMBER_STATUS,PAST_DUE,COLLATERAL,RELATIONSHIP_AGE,AS_OF_DATE,FUNDED_LIMIT,FUNDED_CAP,FUNDED_UTILIZATION,FUNDED_UTILIZATION_BALANCE,NON_FUNDED_LIMIT,NON_FUNDED_CAP,NON_FUNDED_UTILIZATION,NON_FUNDED_UN_UTILIZED_BALANCE,SHARED_LIMIT from NG_FLEET_SIMAH_L2_C1_SUMMARY_GRID WHERE WI_NAME='"+wi_name+"'  ";
						logger.info("Query to fetch in fillSimah is "+query);
						iformObj.saveDataInDB(query);
						query="INSERT INTO NG_FLEET_SIMAH_PREVIOUS_ENQUIRIES_GRID (WI_NAME,ENQUIRY_DATE,ENQUIRER,ENQUIRY_TYPE,MEMBER_REFERENCE,PRODUCT_TYPE,AMOUNT,NAME) SELECT '"+current_wi_name+"',ENQUIRY_DATE,ENQUIRER,ENQUIRY_TYPE,MEMBER_REFERENCE,PRODUCT_TYPE,AMOUNT,NAME from NG_FLEET_SIMAH_PREVIOUS_ENQUIRIES_GRID WHERE WI_NAME='"+wi_name+"'  ";
						logger.info("Query to fetch in fillSimah is "+query);
						iformObj.saveDataInDB(query);
						query="INSERT INTO NG_FLEET_SIMAH_RATING_GRID (WI_NAME,RATING_DATE,BANK_NAME,UPDATED_DATE,RATING_CODE,RATING_DESCRIPT,RATING_DESCRIPT_AR) SELECT '"+current_wi_name+"',RATING_DATE,BANK_NAME,UPDATED_DATE,RATING_CODE,RATING_DESCRIPT,RATING_DESCRIPT_AR from NG_FLEET_SIMAH_RATING_GRID WHERE WI_NAME='"+wi_name+"'  ";
						logger.info("Query to fetch in fillSimah is "+query);
						iformObj.saveDataInDB(query);
						logger.info("In fillsimah data, query to insert int NG_FLEET_SIMAH_ADDRESS_DETAILS_GRID is "+query);
					
					}
					else
					{
						logger.info("Record was already present for this workitem and 30 days are not over so we are doing nothing");
					}
					//query="INSERT INTO NG_FLEET_SIMAH_EXPIRY_CHECK (WI_NAME,CIC_NO,CHECKED_DATE) VALUES ('"+current_wi_name+"','"+padded_cic_no+"', getdate()  )";
					//iformObj.saveDataInDB(query);
					//logger.info("In fillsimah data, query to insert int NG_POS_SIMAH_EXPIRY_CHECK is "+query);
				}
				else
				{
					logger.info("Not 30 days passed since last time SIMAH was checked for this particular workitem ");
					logger.info("Hence we are doing nothing ");
				}
			} 
		}
		else
		{
			logger.info("In fillsimah data coming there is not entry for '"+current_wi_name+"' in NG_FLEET_SIMAH_EXPIRY_CHECK");
			String callName = "RetrieveCommercialSummaryReport";
			//LocalDateTime today_date=LocalDateTime.parse(new SimpleDateFormat().format(new Date()),DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss"));
			
			String responseXML = createRequestXML(iformObj, callName);
			String cic_no="";
			JSONObject jsonobj = setResponseData_2(iformObj, callName, responseXML);

			for (Iterator iterator = jsonobj.keySet().iterator(); iterator.hasNext();) 
			{
				String key = (String) iterator.next();
				if (!jsonobj.get(key).toString().contains("#")) 
				{
					setControlValue(iformObj, key, jsonobj.get(key).toString());
				}
			}

			JSONObject return_obj = setResponseDataGrid(iformObj, callName, responseXML);
			for (Iterator iterator = return_obj.keySet().iterator(); iterator.hasNext();) {
				String key = (String) iterator.next();
				iformObj.addDataToGrid(key, (JSONArray) return_obj.get(key));
			}
			
			logger.info("In fillsimah data, we fetched fresh record");
			
			
			//String enquiry_no= (String) jsonobj.get("Q_NG_POS_SIMAH_BASIC_DETAILS_ENQUIRY_NO");
			String reference_no=(String) jsonobj.get("Q_NG_POS_SIMAH_BASIC_DETAILS_REFERENCE_NO");
			//logger.info("Enquiry no is "+enquiry_no+" and reference no is "+reference_no);
			logger.info("Reference no is "+reference_no);
			//if(enquiry_no==null || reference_no==null ||(enquiry_no.trim().equalsIgnoreCase("") && reference_no.trim().equalsIgnoreCase("")))
			if(reference_no==null || reference_no.trim().equalsIgnoreCase(""))
			{
				logger.info("but as no result came we are not inserting INTO NG_FLEET_SIMAH_EXPIRY_CHECK");
			}
			else
			{
				query="INSERT INTO NG_FLEET_SIMAH_EXPIRY_CHECK (WI_NAME,CIC_NO,CHECKED_DATE) VALUES ('"+current_wi_name+"','"+padded_cic_no+"', getdate()  )";
				iformObj.saveDataInDB(query);
				logger.info("In fillsimah data, query to insert INTO NG_FLEET_SIMAH_EXPIRY_CHECK is "+query);	 
			}	
		}
		
		// New Code for 60 days expiry check
		
		/* Old Working Code For Simah commercial without checking expiry
		String callName = "RetrieveCommercialSummaryReport";
		
		String responseXML = createRequestXML(iformObj, callName);
		String cic_no="";
		JSONObject jsonobj = setResponseData(iformObj, callName, responseXML);

		for (Iterator iterator = jsonobj.keySet().iterator(); iterator.hasNext();) {
			String key = (String) iterator.next();
			if (!jsonobj.get(key).toString().contains("#")) {
				setControlValue(iformObj, key, jsonobj.get(key).toString());
			}
		}

		JSONObject return_obj = setResponseDataGrid(iformObj, callName, responseXML);
		for (Iterator iterator = return_obj.keySet().iterator(); iterator.hasNext();) {
			String key = (String) iterator.next();
			iformObj.addDataToGrid(key, (JSONArray) return_obj.get(key));
		} 
		*/
	 }
	 catch(Exception e)
	 {
		 logger.info("Exception Occurred: fillSIMAHData "+e);
	 }
		return "SIMAH fetched sucessfully";
	}

	private String fillPOSdetails(IFormReference iformObj, String stringdata) 
	{
		logger.info("String data to fill posdetails is" + stringdata);
		String[] value_split = stringdata.split("#");
		String terminal_id = getControlValue(iformObj, value_split[0]);
		iformObj.clearTable(value_split[1]);
		logger.info("TerminalID to fillPOSdetails is " + terminal_id + "and table id is  is" + value_split[1]);
		
		String wi_name=getWorkitemName(iformObj);
		JSONArray jsonarr = new JSONArray();
		JSONObject jsonobj = null;
		
		if (terminal_id.equalsIgnoreCase("All")) 
		{
			String query = "SELECT CORTEX_MONTH,THROUGHPUT,CORTEX_TRANSACTION,AVG_TRANSACTN_AMT from NG_FLEET_STMTDATA_CORTEX_DETAIL_GRID_ALL_MACHINES WHERE WI_NAME='"+wi_name+"' " ;
			List<List<String>> pos_data = iformObj.getDataFromDB(query);
			for (List<String> value : pos_data) 
			{
				jsonobj = new JSONObject();
				jsonobj.put("Month", value.get(0));
				jsonobj.put("Throughput", value.get(1));
				jsonobj.put("Transaction", value.get(2));
				jsonobj.put("Average Transaction Amount", value.get(3));
				jsonarr.add(jsonobj);
			}
		}
		else
		{
			String query = "SELECT CORTEX_MONTH,THROUGHPUT,CORTEX_TRANSACTION,AVG_TRANSACTN_AMT from NG_FLEET_STMTDATA_CORTEX_DETAIL_GRID WHERE TERMINAL_ID='"
					+ terminal_id + "' AND WI_NAME='"+wi_name+"' " ;
			List<List<String>> pos_data = iformObj.getDataFromDB(query);
			for (List<String> value : pos_data) 
			{
				jsonobj = new JSONObject();
				jsonobj.put("Month", value.get(0));
				jsonobj.put("Throughput", value.get(1));
				jsonobj.put("Transaction", value.get(2));
				jsonobj.put("Average Transaction Amount", value.get(3));
				jsonarr.add(jsonobj);
			}
		}
		logger.info("JSON Array to fill pos details is" + jsonobj);
		iformObj.addDataToGrid(value_split[1], jsonarr);
		return "successfully filled POS Details";

	}

	private String SetPQList(IFormReference iformObj, String stringdata) {
		String wi_name=getActivityName(iformObj);
		logger.info("inside SetPQList function and wi_name is "+wi_name );
		String procedurename = "[NG_CHECK_FLEET_PQ_STATUS]";
		
		if(wi_name.equalsIgnoreCase("PQ1 without SIMAH"))	
		{
			String parameterlist = getWorkitemName(iformObj) + "~" + "PQ1";
			callProcedure(iformObj, procedurename, parameterlist);
		}
		else if(wi_name.equalsIgnoreCase("PQ2 with SIMAH") || wi_name.equalsIgnoreCase("Sales Rework") )
		{
			String parameterlist = getWorkitemName(iformObj) + "~" + "PQ2";
			callProcedure(iformObj, procedurename, parameterlist);
		}
		logger.info("Exit SetPQList function ");
		
		return "hello";
	}

	private String fillTerminalId(IFormReference iformObj, String stringdata) {

        String wi_name=getWorkitemName(iformObj);
        iformObj.addItemInCombo(stringdata, "All","All");
        String query = "SELECT DISTINCT TERMINAL_ID from NG_FLEET_STMTDATA_CORTEX_DETAIL_GRID WHERE WI_NAME='"+wi_name+"' ";
        try {
        List<List<String>> terminal_id = getDataFromDB(iformObj, query);
        for (List<String> value : terminal_id) {
               String result = value.get(0);
               logger.info("Terminal Id's set in dropdown are" + result);
               iformObj.addItemInCombo(stringdata, result, result);
        }
        }
        catch(Exception e)
        {
               logger.info("Exception occurred: fillTerminalId "+e);
        }
        //Start Edit By Deepak Goyal For Cortex Grid On Load
        try
        {
               JSONArray jsonarr = new JSONArray();
               JSONObject jsonobj = null;
               iformObj.clearTable("");
               query = "SELECT CORTEX_MONTH,THROUGHPUT,CORTEX_TRANSACTION,AVG_TRANSACTN_AMT from NG_FLEET_STMTDATA_CORTEX_DETAIL_GRID_ALL_MACHINES WHERE WI_NAME='"+wi_name+"' " ;
               List<List<String>> pos_data = iformObj.getDataFromDB(query);
               logger.info("query to fetch cortex data is "+query+"and it's result is "+pos_data);
        for (List<String> value : pos_data) 
        {
               jsonobj = new JSONObject();
               jsonobj.put("Month", value.get(0));
               jsonobj.put("Throughput", value.get(1));
               jsonobj.put("Transaction", value.get(2));
               jsonobj.put("Average Transaction Amount", value.get(3));
               jsonarr.add(jsonobj);
        }
        iformObj.clearTable("Q_NG_POS_STMTDATA_CORTEX_DETAIL_GRID");
        
        logger.info("$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ Cortex data is"+iformObj.getDataFromGrid("Q_NG_POS_STMTDATA_CORTEX_DETAIL_GRID"));
        iformObj.addDataToGrid("Q_NG_POS_STMTDATA_CORTEX_DETAIL_GRID", jsonarr);
        }
        catch(Exception e)
        {
        	logger.info("Exception occurred: fillTerminalId "+e);
        }
        //End Edit By Deepak Goyal For Cortex Grid On Load
        return "Terminal ID filled Successfully";
       
 }


	private String fillCTFMSBData(IFormReference iformObj, String stringdata) {

		String callName = "LoanDisburseDataInq";
		logger.info(stringdata);
		int rowindex = Integer.parseInt(stringdata);
		logger.info("Row index selected by user is" + rowindex);
		JSONArray jsonarr = iformObj.getDataFromGrid("Q_NG_POS_CREDITLINE_CTF_MSB_GRID");
		JSONObject jsonobj = (JSONObject) jsonarr.get(rowindex);
		String dossier_id = (String) jsonobj.get("Dossier No");
		logger.info("Dossier Id is" + dossier_id);
		
		try
		{
			logger.info("Inside createRequestXML Function and callName is " + callName);
			String tagName = "_TagName";
			
			String request_prefix=GetXML.getProp().getProperty(callName+"_RequestPrefix");
			if(request_prefix.equals(null))
			{
				request_prefix="";
			}
			logger.info("Request prefix is "+request_prefix+"please check");
			
			String header_tags=GetXML.getProp().getProperty(callName+"_Header");
			String []header_tags_arry=header_tags.split(",");
			
			logger.info("Header tags are "+header_tags);
			JSONObject jsonobj_header=new JSONObject();
			for(String temp:header_tags_arry)
			{
				String[] hash_split=temp.split("#");
				jsonobj_header.put(hash_split[0],hash_split[1]);
			}
			
			logger.info("JSOn object is "+jsonobj_header);
		
			String tagNames = GetXML.getProp().getProperty(callName + tagName);
			logger.info(tagNames);
			String[] tags = tagNames.split(",");
	
			String requestXML = readDummyRequest(callName);
	
			XMLParser parser = new XMLParser(requestXML);
			
	
			for (String tag : tags) {
				String tagValue = parser.getValueOf(request_prefix+tag);
				logger.info("tag values are"+tagValue);
				if(tagValue.contains("header~"))
				{
					try {
						
						if(tagValue.split("~")[1].equalsIgnoreCase("UUID"))
						{
							parser.changeValue(request_prefix+tag, java.util.UUID.randomUUID().toString());
						}
						else
						{
							String value=(String) jsonobj_header.get(tagValue.split("~")[1]);
							logger.info("Value to be replaced by jsonobj_header is "+value);
							parser.changeValue(request_prefix+tag, value);
						}
					}
					catch(Exception e)
					{
						logger.info("Exception is "+e);
					}
				}
				else if (tagValue.startsWith("formid~")) 
				{
					String value = (String) iformObj.getValue(tagValue.split("~")[1]);
					parser.changeValue(request_prefix+tag, value);
				}
			}
			
			parser.changeValue(request_prefix+"DossierID", dossier_id);
			System.out.println("RequestXML is :\n" + parser.toString());
			logger.info("RequestXML is :\n" + parser.toString());
			String responseXML = new SocketConnector().getSocketXMLResponse(parser.toString(), callName,iformObj);
	
			System.out.println("Response XML is: \n" + responseXML);
			//logger.info("Response XML is: \n" + responseXML);
		
		String restricted_tags=GetXML.getProp().getProperty(callName+"_RestrictedTags");
		String []restricted_values=restricted_tags.split(",");
		for(String temp:restricted_values)
			responseXML = responseXML.replace(temp, "");

		logger.info("Response XML received by setResponseDataGrid for CTF MSB is" + responseXML);
		tagName = "_TagNameResponseGrid";
		tagNames = GetXML.getProp().getProperty(callName + tagName);

		logger.info(tagNames);

		String statuscode = GetXML.getProp().getProperty(callName + "_StatusCode");
		String[] status_code_split = statuscode.split("~");

		String[] tagValue = tagNames.split(",");
		for (String tag : tagValue) {
			tags = tag.split("~");
			WFXmlResponse objWFxmlResponse = new WFXmlResponse(responseXML);
			logger.info("objWFxmlResponse value is " + objWFxmlResponse);
			jsonarr = new JSONArray();
			if (objWFxmlResponse.getVal(status_code_split[0]).equals(status_code_split[1])) {
				WFXmlList WFXmlList = objWFxmlResponse.createList(tags[0], tags[1]);
				logger.info("Wfmxmlsit is --------------" + WFXmlList);

				for (int i = 0; WFXmlList.hasMoreElements(true); WFXmlList.skip(true), i++) {

					jsonobj = new JSONObject();
					logger.info("iiiiiiiiii" + i);
					logger.info("Dossier id we want is" + dossier_id);
					logger.info("Dossier id avaiaalable is" + WFXmlList.getVal("DossierID"));
                    if (dossier_id.contains(WFXmlList.getVal("DossierID"))) { 
						for (int j = 2; j < tags.length - 1; ++j) {
							String one = tags[j];
							logger.info("333333333333333333" + one);
							String[] temp = one.split("#");
							logger.info("@@@" + temp[0] + "!!!!" + temp[1]);
							String xyz = WFXmlList.getVal(temp[1]);
							logger.info("xyz" + xyz);
							if (xyz == null || xyz == "") {
								xyz = " ";
							}
							jsonobj.put(temp[0], xyz);
						}
						jsonarr.add(jsonobj);
					}

				}
				logger.info(jsonarr);
				logger.info("ID of table is table90");
				iformObj.clearTable("table90");
				iformObj.addDataToGrid("table90", jsonarr);
			} else {
				logger.info("For " + callName + " Status code returned from response is not success ");
			}
		}
	}
	catch(Exception e)
	{
		logger.info("Exception in LoanDisburseDataInq calls is "+e);
	}
		return "All Good";
	
}	
	/*
	private String fillCTFMSBData(IFormReference iformObj, String stringdata) {

		String callName = "LoanDisburseDataInq";
		logger.info(stringdata);
		int rowindex = Integer.parseInt(stringdata);
		logger.info("Row index selected by user is" + rowindex);
		JSONArray jsonarr = iformObj.getDataFromGrid("Q_NG_POS_CREDITLINE_CTF_MSB_GRID");
		JSONObject jsonobj = (JSONObject) jsonarr.get(rowindex);
		String dossier_id = (String) jsonobj.get("Dossier No");
		logger.info("Dossier Id is" + dossier_id);
		logger.info("Inside createRequestXML Function and callName is " + callName);
		String tagName = "_TagName";
		String tagNames = GetXML.getProp().getProperty(callName + tagName);
		logger.info(tagNames);
		String request_prefix=GetXML.getProp().getProperty(callName+"_RequestPrefix");
		if(request_prefix.equals(null))
		{
			request_prefix="";
		}
		String[] tags = tagNames.split(",");

		String requestXML = readDummyRequest(callName);
		XMLParser parser = new XMLParser(requestXML);

		for (String tag : tags) {
			String tagValue = parser.getValueOf(tag);
			if (tagValue.startsWith("formid~")) {
				String value = (String) iformObj.getValue(tagValue.split("~")[1]);
				parser.changeValue(request_prefix+tag, value);
			}
		}

		parser.changeValue(request_prefix+"DossierID", dossier_id);
		logger.info("RequestXML is :\n" + parser.toString());
		String responseXML = new SocketConnector().getSocketXMLResponse(parser.toString(), callName,iformObj);
		
		String restricted_tags=GetXML.getProp().getProperty(callName+"_RestrictedTags");
		String []restricted_values=restricted_tags.split(",");
		for(String temp:restricted_values)
			responseXML = responseXML.replace(temp, "");

		logger.info("Response XML received by setResponseDataGrid for CTF MSB is" + responseXML);
		tagName = "_TagNameResponseGrid";
		tagNames = GetXML.getProp().getProperty(callName + tagName);

		logger.info(tagNames);

		String statuscode = GetXML.getProp().getProperty(callName + "_StatusCode");
		String[] status_code_split = statuscode.split("~");

		String[] tagValue = tagNames.split(",");
		for (String tag : tagValue) {
			tags = tag.split("~");
			WFXmlResponse objWFxmlResponse = new WFXmlResponse(responseXML);
			logger.info("objWFxmlResponse value is " + objWFxmlResponse);
			jsonarr = new JSONArray();
			if (objWFxmlResponse.getVal(status_code_split[0]).equals(status_code_split[1])) {
				WFXmlList WFXmlList = objWFxmlResponse.createList(tags[0], tags[1]);
				logger.info("Wfmxmlsit is --------------" + WFXmlList);

				for (int i = 0; WFXmlList.hasMoreElements(true); WFXmlList.skip(true), i++) {

					jsonobj = new JSONObject();
					logger.info("iiiiiiiiii" + i);
					logger.info("Dossier id we want is" + dossier_id);
					logger.info("Dossier id avaiaalable is" + WFXmlList.getVal("DossierID"));
					if (WFXmlList.getVal("DossierID").equalsIgnoreCase(dossier_id)) {
						for (int j = 2; j < tags.length - 1; ++j) {
							String one = tags[j];
							logger.info("333333333333333333" + one);
							String[] temp = one.split("#");
							logger.info("@@@" + temp[0] + "!!!!" + temp[1]);
							String xyz = WFXmlList.getVal(temp[1]);
							logger.info("xyz" + xyz);
							if (xyz == null || xyz == "") {
								xyz = " ";
							}
							jsonobj.put(temp[0], xyz);
						}
						jsonarr.add(jsonobj);
					}

				}
				logger.info(jsonarr);
				logger.info("ID of table is table90");
				iformObj.clearTable("table90");
				iformObj.addDataToGrid("table90", jsonarr);
			} else {
				logger.info("For " + callName + " Status code returned from response is not success ");
			}
		}

		return "All Good";
	}*/
	
	

	private String fillStatementData(IFormReference iformObj, String stringdata) {

		String[] callNames = { "MSBAcctsDataInq", "MSBFacilitiesDataInq" };
		for (String callName : callNames) {
			String responseXML;
			responseXML = createRequestXML(iformObj, callName);
			setResponseDataGrid(iformObj, callName, responseXML);
		}
		String wi_name = getWorkitemName(iformObj);
		String query = "SELECT DISTINCT ACC_NO from NG_FLEET_STMTDATA_ACCMOVMNT_GRID WHERE WI_NAME='" + wi_name + "' ";
		try {
			List<List<String>> account_no = getDataFromDB(iformObj, query);
			for (List<String> value : account_no) {
				String result = value.get(0);
				logger.info("Account No's set in dropdown are" + result);
				iformObj.addItemInCombo(stringdata, result, result);
			}
		} catch (Exception e) {
			logger.info("Exception occurred: fillAccounts " + e);
		}
		return "";
	}

	private String createDisbursementWI(IFormReference iformObj, String stringdata) {
		FleetCommon obj = new FleetCommon(iformObj);
		logger.info("createDisbursementWI before call");
		String winame_disbursement = obj.createWorkitemDisbursement(iformObj, stringdata);

		try {

			String app_limit_amt = getControlValue(iformObj,
					"Q_NG_POS_APPLICATION_DATA_APPROVED_LIMIT_AMT_AFTER_SIMAH");
			String avail_amt_for_disbursement = getControlValue(iformObj,
					"Q_NG_POS_APPLICATION_DATA_AVAIL_AMT_FOR_DISBURSEMENT");
			String amt_to_be_disbursed = getControlValue(iformObj, "Q_NG_POS_APPLICATION_DATA_AMT_TO_BE_DISBURSED");
			String date = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss").format(new Date());
			String parent_wi_name = getControlValue(iformObj, "WI_NAME");
			/*
			 * String
			 * query="SELECT WI_NAME FROM NG_DISBURSEMENT_EXTTABLE WHERE PARENT_WI_NAME='"
			 * +parent_wi_name+"'"; logger.info(query); List<List<String>>
			 * result=getDataFromDB(iformObj, query);
			 * disbursement_workitem_no=result.get(0).get(0);
			 */
			logger.info("Disburseemnt work item no" + winame_disbursement);
			JSONArray jsonArr = new JSONArray();
			JSONObject jsonObj = new JSONObject();
			jsonObj.put("Application Amount after SIMAH", app_limit_amt);
			jsonObj.put("Available Amount for Disbursement", avail_amt_for_disbursement);
			jsonObj.put("Amount to be Disbursed", amt_to_be_disbursed);
			jsonObj.put("Date Time", date);
			jsonObj.put("Disbursement Workitem No.", winame_disbursement);

			logger.info("Json Array is" + jsonObj);
			jsonArr.add(jsonObj);
			iformObj.addDataToGrid("Q_NG_POS_DISBURSEMENT_GRID", jsonArr);

		} catch (Exception e) {
			logger.error("Exception catched in  addToDecisionHistoryGrid", e);
		}

		return winame_disbursement;
	}

	/*
	 * private String fillDisbursementDetails(IFormReference iformObj, String
	 * stringdata) {
	 * 
	 * 
	 * try {
	 * 
	 * String app_limit_amt = getControlValue(iformObj,
	 * "Q_NG_POS_APPLICATION_DATA_APPROVED_LIMIT_AMT_AFTER_SIMAH"); String
	 * avail_amt_for_disbursement = getControlValue(iformObj,
	 * "Q_NG_POS_APPLICATION_DATA_AVAIL_AMT_FOR_DISBURSEMENT"); String
	 * amt_to_be_disbursed = getControlValue(iformObj,
	 * "Q_NG_POS_APPLICATION_DATA_AMT_TO_BE_DISBURSED"); String date = new
	 * SimpleDateFormat("dd/MM/yyyy HH:mm:ss").format(new Date()); String
	 * disbursement_workitem_no = winame_disbursement;
	 * 
	 * String parent_wi_name = getControlValue(iformObj, "WI_NAME");
	 * 
	 * logger.info("Disburseemnt work item no" + disbursement_workitem_no);
	 * JSONArray jsonArr = new JSONArray(); JSONObject jsonObj = new JSONObject();
	 * jsonObj.put("Application Amount after SIMAH", app_limit_amt);
	 * jsonObj.put("Available Amount for Disbursement", avail_amt_for_disbursement);
	 * jsonObj.put("Amount to be Disbursed", amt_to_be_disbursed);
	 * jsonObj.put("Date Time", date); jsonObj.put("Disbursement Workitem No.",
	 * disbursement_workitem_no);
	 * 
	 * logger.info("Json Array is" + jsonObj); jsonArr.add(jsonObj);
	 * iformObj.addDataToGrid("Q_NG_POS_DISBURSEMENT_GRID", jsonArr);
	 * 
	 * } catch (Exception e) {
	 * logger.error("Exception catched in  addToDecisionHistoryGrid", e); }
	 * 
	 * return "All is well"; }
	 */
	
	public String addToDecisionHistoryGrid(IFormReference iformObj, String stringData) 
	{
		try {
			
			logger.info("inside addToDecisionHistoryGrid");
			String strData[] = stringData.split("#");
			String Workstep = strData[0];
			logger.info("workstep name is " + Workstep);
			String username = strData[1];
			logger.info("username name is " + username);
			String decision = getControlValue(iformObj, "DECISION");
			logger.info("decision name is " + decision);
			String action = getControlValue(iformObj, "REMARKS");
			logger.info("action name is " + action);
			String date = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss").format(new Date());
			logger.info("date name is " + date);
			JSONArray jsonArr = new JSONArray();
			JSONObject jsonObj = new JSONObject();
			String query="SELECT CONCAT(PERSONALNAME,' ',FAMILYNAME),MAILID FROM PDBUser WHERE UserName='"+username+"'";
			String emailvalue="",fullname="",TAT="";
			List<List<String>> data = iformObj.getDataFromDB(query);
			for (List<String> value : data) 
			{
				fullname = value.get(0);
				emailvalue= value.get(1);
			}
			jsonObj.put("Date Time", date);

			logger.info(date);
			//Start Edit By Deepak Goyal
            if(Workstep.equalsIgnoreCase("PQ1 without SIMAH"))
            {
                  query="select  datediff(MINUTE,Createddatetime,getdate()) as TAT from WFINSTRUMENTTABLE where ProcessInstanceID='"+getWorkitemName(iformObj)+"'";
                  List<List<String>> data1 = iformObj.getDataFromDB(query);
                  for (List<String> value : data1) 
                  {
                         TAT = value.get(0);                     
                  }
            }
            else
            {
                  query="select top 1 datediff(MINUTE,convert(datetime,(select top 1 b.date_time from NG_FLEET_DECISION_GRID b where b.WI_NAME=a.wi_name and b.decision <> 'Auto Sell' order by b.insertionOrderId desc),103),convert(datetime,getdate(),103)) as TAT from NG_FLEET_DECISION_GRID a where WI_NAME='"+getWorkitemName(iformObj)+"' and decision <> 'Auto Sell' order by a.insertionOrderId desc";
                  List<List<String>> data1 = iformObj.getDataFromDB(query);
                  for (List<String> value : data1) 
                  {
                         TAT = value.get(0);                     
                  }
            }
            //End Edit By Deepak Goyal

			jsonObj.put("Workstep", Workstep);
			logger.info("inside Decision his");
			logger.info(Workstep);
			jsonObj.put("Decision", decision);
			logger.info(decision);
			jsonObj.put("User ID", username);
			logger.info(username);
			jsonObj.put("Remark", action);
			logger.info(action);
			jsonObj.put("Email ID", emailvalue);
			logger.info(emailvalue);
			jsonObj.put("User Name", fullname);
			logger.info(fullname);
			jsonObj.put("TAT", TAT);
			logger.info("TAT is ===== "+TAT);
			logger.info("Jason object value is " + jsonObj);
			jsonArr.add(jsonObj);
			iformObj.addDataToGrid("table78", jsonArr); // table78 is the id of decision history table
			
			if(Workstep.equalsIgnoreCase("PQ1 without SIMAH"))
			{
				iformObj.setValue("PQ1_SUBMITTED_BY", username);
				iformObj.setValue("PQ2_SUBMITTED_BY", username);
				logger.info("At workstep "+Workstep+" username is "+username);
			}
			else if(Workstep.equalsIgnoreCase("PQ2 with SIMAH"))
			{
				iformObj.setValue("PQ2_SUBMITTED_BY", username);
				iformObj.setValue("SALES_REWORK_SUBMITTED_BY", username);
				logger.info("At workstep "+Workstep+" username is "+username);
			}
			else if(Workstep.equalsIgnoreCase("Sales Rework"))
			{
				iformObj.setValue("SALES_REWORK_SUBMITTED_BY", username);
				iformObj.setValue("APPROVED_SALES_SUBMITTED_BY", username);
				logger.info("At workstep "+Workstep+" username is "+username);
			}
			else if(Workstep.equalsIgnoreCase("Approved Sales"))
			{
				iformObj.setValue("APPROVED_SALES_SUBMITTED_BY", username);
				iformObj.setValue("DISBURSEMENT_INITIATE_SUBMITTED_BY", username);
				logger.info("At workstep "+Workstep+" username is "+username);
			}
			else if(Workstep.equalsIgnoreCase("Disbursal_Initiate"))
			{
				iformObj.setValue("DISBURSEMENT_INITIATE_SUBMITTED_BY", username);
				iformObj.setValue("BUY_AND_CONTRACT_SUBMITTED_BY", username);
				logger.info("At workstep "+Workstep+" username is "+username);
			}
			else if(Workstep.equalsIgnoreCase("Buy_and_Contract"))
			{
				iformObj.setValue("BUY_AND_CONTRACT_SUBMITTED_BY", username);
				iformObj.setValue("SELL_AND_STIPLULATE_SUBMITTED_BY", username);
				logger.info("At workstep "+Workstep+" username is "+username);
			}
			else if(Workstep.equalsIgnoreCase("Sell_and_Stipulation_Maker") || Workstep.equalsIgnoreCase("Stipulation_and_Sell_Checker"))
			{
				iformObj.setValue("SELL_AND_STIPLULATE_SUBMITTED_BY", username);
				logger.info("At workstep "+Workstep+" username is "+username);
			}
				
			
		} catch (Exception e) {
			logger.error("Exception catched in  addToDecisionHistoryGrid", e);
		}
		return "SUCCESS~DataAddedToGrid";
	}
	
	
	/*
	private String setRoutingLevel(IFormReference iformObj, String stringdata) {
		// TODO Auto-generated method stub
		logger.info("Inside setRoutingLevel function");
		String query = "";

		// Added by SK
		if (stringdata.equalsIgnoreCase("BR")) {
			logger.info("BR CASE");
			query = "select max(route_level) as final_level from(select min(b.level_id) as route_level from NG_FLEET_exttable A, ng_mast_authority_matrix B, ng_mast_level_mapping c where A.channel=B.filter and B.process_name=C.process_name and b.approval_type=C.approval_type and B.filter=C.filter and B.level_id=C.level_id and B.amt>A.app_limit_amt AND B.APPROVAL_TYPE='Business' AND A.WI_NAME='"
					+ getWorkitemName(iformObj)
					+ "' UNION select min(B.level_id) as route_level from NG_FLEET_exttable A, ng_mast_authority_matrix B, ng_mast_level_mapping c where A.channel=B.filter and B.process_name=C.process_name and b.approval_type=C.approval_type and B.filter=C.filter and B.level_id=C.level_id and A.no_of_exception=B.no_of_exception AND B.APPROVAL_TYPE='Business' AND A.WI_NAME='"
					+ getWorkitemName(iformObj) + "') D";
		} else if (stringdata.equalsIgnoreCase("CR")) {
			logger.info("CR CASE");
			query = "select max(route_level) as final_level from(select min(b.level_id) as route_level from NG_FLEET_exttable A, ng_mast_authority_matrix B, ng_mast_level_mapping c where A.channel=B.filter and B.process_name=C.process_name and b.approval_type=C.approval_type and B.filter=C.filter and B.level_id=C.level_id and B.amt>A.app_limit_amt AND B.APPROVAL_TYPE='Credit Risk' AND A.WI_NAME='"
					+ getWorkitemName(iformObj)
					+ "' UNION select min(B.level_id) as route_level from NG_FLEET_exttable A, ng_mast_authority_matrix B, ng_mast_level_mapping c where A.channel=B.filter and B.process_name=C.process_name and b.approval_type=C.approval_type and B.filter=C.filter and B.level_id=C.level_id and A.no_of_exception=B.no_of_exception AND B.APPROVAL_TYPE='Credit Risk' AND A.WI_NAME='"
					+ getWorkitemName(iformObj) + "') D";
		}

		String final_level = "";
		List<List<String>> comboValues = getDataFromDB(iformObj, query);
		logger.info(comboValues);

		for (List<String> value : comboValues) {
			final_level = value.get(0);
			logger.debug("final_level :: " + final_level);
			setControlValue(iformObj, "FINAL_ROUTING_LEVEL", final_level);
		}

		return "SUCCESS";

	}
*/
	private String fillTrassetData(IFormReference iformObj, String stringdata) {

		String cic_no = getControlValue(iformObj, "Q_NG_POS_COMPANY_DATA_CIC");
		// String wi_name=getControlValue(iformObj, "WI_NAME");

		String query = "SELECT * FROM NG_MAST_TRASSET_DATA WHERE CIC='" + cic_no + "' ";
		logger.info("Trasset Query is "+query);
		List<List<String>> result = getDataFromDB(iformObj, query);
		try {
			if(result.size()>0)
			{
				logger.info("result from mast data is" + result);
				logger.info("result at 0 index is " + result.get(0));
				logger.info("result at 0,0 index is" + result.get(0).get(0));
	
				JSONArray jsonarray = new JSONArray();
				JSONObject jsonobject;
	
				List<List<String>> resultfromDB = getDataFromDB(iformObj, query);
				logger.info(result);
				for (List<String> value : resultfromDB) {
					jsonobject = new JSONObject();
					jsonobject.put("Trasset Ref No", value.get(1));
					jsonobject.put("Product Name", value.get(2));
					jsonobject.put("Revolving", value.get(3));
					jsonobject.put("Profit Rate Type", value.get(4));
					jsonobject.put("Profit Rate", value.get(5));
					jsonobject.put("Effective Date",value.get(8));
					jsonobject.put("Expiry Date", value.get(9));
					jsonobject.put("Amount Internal",value.get(11));
					jsonobject.put("Amount Total Understanding",value.get(12));
					jsonobject.put("Outstanding Amount", value.get(13));
					jsonobject.put("Available Amount", value.get(14));
					jsonobject.put("ORR", " ");
					jsonobject.put("Days in PDO", value.get(16));
					jsonobject.put("PDO Amount", value.get(17));
					jsonobject.put("Write Off", value.get(18));
					jsonobject.put("RM code", value.get(20));
					jsonobject.put("RM Name", value.get(21));
					jsonobject.put("TL Name", value.get(22));
	
					jsonarray.add(jsonobject);
				}
				logger.info("Jsonarray for trasset details is "+jsonarray);
				iformObj.addDataToGrid("Q_NG_POS_CREDITLINE_TRASSET_DET_GRID", jsonarray);
			}
		}
		catch(Exception e)
		{
			logger.info("Exception occurred: fillTrassetData: Database Query "+query+" and stack trace is"+e);
		}		
		return "Trasset Data filled succesfully";
	}

	 //Replaced on 26 FEb
	/* 
	private String setRoutingLevel(IFormReference iformObj,String stringdata) 
	  { 
       logger.info("Inside setRoutingLevel function");
       //getWorkitemName(iformObj)
       String query="select max(route_level) as final_level from( select min(c.level_id) as route_level from NG_FLEET_exttable A, ng_mast_authority_matrix B, ng_mast_level_mapping c where A.channel=B.filter and A.channel=c.filter AND B.process_name=C.process_name AND b.approval_type=C.approval_type AND B.filter=C.filter and b.APPROVAL_TYPE='Business' AND B.level_id=C.level_id and convert(float,B.amt)>=convert(float,A.app_limit_amt) AND a.wi_name='"+getWorkitemName(iformObj)+"' UNION select max(C.level_id) as route_level from NG_FLEET_exttable A, ng_mast_authority_matrix B,ng_mast_level_mapping c WHERE A.channel=B.filter and A.channel=c.filter and b.APPROVAL_TYPE='Business' and B.process_name=C.process_name AND b.approval_type=C.approval_type and B.filter=C.filter and B.level_id=C.level_id AND (A.no_of_exception=B.no_of_exception or A.no_of_exception>B.no_of_exception) AND a.wi_name='"+getWorkitemName(iformObj)+"') D ";
       String final_level=""; 
       List<List<String>> comboValues = getDataFromDB(iformObj,query);
       logger.info("For setting routing values db result is "+comboValues);
	  
		for (List<String> value : comboValues)
		{
			final_level = value.get(0);
			logger.debug("final_level :: " + final_level);
			setControlValue(iformObj, "FINAL_ROUTING_LEVEL", final_level);
		}

		return "setRoutingLevel set successfully";
	  
	  }
	 */
	
	private String setRoutingLevel(IFormReference iformObj,String stringdata) 
    { 
  logger.info("Inside setRoutingLevel function");
  //getWorkitemName(iformObj)
  String approval_type;
  if (stringdata.equalsIgnoreCase("Credit Officer"))
  {
     approval_type="Credit Risk";
  }
  else
  {
     approval_type="Business";
  }
  String query="select max(route_level) as final_level from( select min(c.level_id) as route_level from NG_FLEET_exttable A, ng_mast_authority_matrix B, ng_mast_level_mapping c where A.channel=B.filter and A.channel=c.filter AND B.process_name=C.process_name AND b.approval_type=C.approval_type AND B.filter=C.filter and b.APPROVAL_TYPE='"+approval_type+"' AND B.level_id=C.level_id and convert(float,B.amt)>=convert(float,A.app_limit_amt) AND a.wi_name='"+getWorkitemName(iformObj)+"' UNION select max(C.level_id) as route_level from NG_FLEET_exttable A, ng_mast_authority_matrix B,ng_mast_level_mapping c WHERE A.channel=B.filter and A.channel=c.filter and b.APPROVAL_TYPE='"+approval_type+"' and B.process_name=C.process_name AND b.approval_type=C.approval_type and B.filter=C.filter and B.level_id=C.level_id AND (A.no_of_exception=B.no_of_exception or A.no_of_exception>B.no_of_exception) AND a.wi_name='"+getWorkitemName(iformObj)+"') D ";
  String final_level=""; 
  List<List<String>> comboValues = getDataFromDB(iformObj,query);
  logger.info("For setting routing values db result is "+comboValues);
    
         for (List<String> value : comboValues)
         {
                final_level = value.get(0);
                logger.debug("final_level :: " + final_level);
                setControlValue(iformObj, "FINAL_ROUTING_LEVEL", final_level);
         }
         
         query="select actual_description from ng_mast_level_mapping where APPROVAL_TYPE='"+approval_type+"' and LEVEL_ID='"+final_level+"' and FILTER='"+iformObj.getValue("CHANNEL")+"'";
         String actual_description=""; 
         List<List<String>> actual_description_Values = getDataFromDB(iformObj,query);
         logger.info("For setting routing values db result is "+actual_description_Values);
           
                for (List<String> value_new : actual_description_Values)
                {
                      actual_description = value_new.get(0);
                      logger.debug("actual_description :: " + actual_description);
                      if(approval_type.equalsIgnoreCase("Credit Risk"))
                      {
                             setControlValue(iformObj, "FINAL_ROUTING_LEVEL_CRD", actual_description);
                      }
                      else
                      {
                             setControlValue(iformObj, "FINAL_ROUTING_LEVEL_BUSS", actual_description);
                      }
                }
         return "setRoutingLevel set successfully";
    
    }

	
	// chirag-start
	Properties p;

	public void loadProperties() {
		logger.info("insise loAD properties" + System.getProperty("user.dir"));

		p = new Properties();
		String sConfigFile = System.getProperty("user.dir") + System.getProperty("file.separator")
				+ "template_generation_AlRajhi" + System.getProperty("file.separator") + "template_gen.properties";

		try {
			logger.info("properties try block");
			p.load(new FileInputStream(sConfigFile));
		} catch (IOException e) {

		}
	}

	public String generateTemplate(IFormReference iformObj, String stringdata) {

		logger.info("inside generate tempalte method");
		WDGeneralData wdgeneralObj = iformObj.getObjGeneralData();
		loadProperties();
		String sJtsIp = p.getProperty("sJtsIp");
		String sJtsPort = p.getProperty("sJtsPort");
		String pStorageDIR = p.getProperty("storageDIR_gen_templates");
		String attachInOD = p.getProperty("attachInOD");
		String socketIP = "127.0.0.1";
		int portNo = Integer.parseInt(p.getProperty("utlity_serversocket_portNo"));
		logger.info("sJtsIp " + sJtsIp);
		logger.info("sJtsPort " + sJtsPort);
		logger.info("portNo " + portNo);
		logger.info("pStorageDIR " + pStorageDIR);
		logger.info("attachInOD " + attachInOD);
		logger.info("socketIP " + socketIP);

		String serverName = "Jboss";
		String sServerIp = iformObj.getServerIp();
		String sServerPort = iformObj.getServerPort();
		String sSessionId = wdgeneralObj.getM_strDMSSessionId();
		String sCabname = iformObj.getCabinetName();
		String sWIName = getWorkitemName(iformObj);
		String sProcessName = iformObj.getProcessName();
		String sTemplateName = stringdata;
		String filetype = "DOC";
		String COLLATERAL = "collateral";
		COLLATERAL = (COLLATERAL == null) ? "" : COLLATERAL;

		final String SS_EXEC_ERROR_MSG = "Error from Call Client Socket Server while Web-Service execution";
		final String SS_CONN_ERROR_MSG = "Could not connect to Call Client Socket Server";

		String iBPSserverIP = iformObj.getServerIp();
		String iBPSserverPort = iformObj.getServerPort();

		logger.info("\n");
		logger.info("serverName " + serverName);
		logger.info("sServerIp " + sServerIp);
		logger.info("sServerPort " + sServerPort);
		logger.info("sSessionId " + sSessionId);
		logger.info("sCabname " + sCabname);
		logger.info("sWIName " + sWIName);
		logger.info("sTemplateName " + sTemplateName);
		logger.info("sProcessName " + sProcessName);
		logger.info("filetype " + filetype);
		logger.info("System.getProperty user.dir  " + System.getProperty("user.dir"));
		logger.info("\n");
		logger.info("COLLATERAL:" + COLLATERAL);
		logger.info("iBPSserverIP:" + iBPSserverIP);
		logger.info("iBPSserverPort:" + iBPSserverPort);
		System.err.println("Data Receieved");
		String responseXml = null;
		String requestXml = null;

		System.err.println("portNo to listen from SocketCall.jsp : " + portNo);

		requestXml = "WI_NAME=" + sWIName + "~~JTS_IP=" + sJtsIp + "~~JTS_PORT=" + sJtsPort + "~~SESSION_ID="
				+ sSessionId + "~~SERVER_IP=" + sServerIp + "~~SERVER_PORT=" + sServerPort + "~~SERVER_NAME="
				+ serverName + "~~CABINET_NAME=" + sCabname + "~~PROCESS_NAME=" + sProcessName + "~~TEMPLATE_NAME="
				+ sTemplateName + "~~FILE_TYPE=" + filetype + "~~pStorageDIR=" + pStorageDIR + "~~attachInOD="
				+ attachInOD + "~~COLLATERAL=" + COLLATERAL + "~~iBPSserverIP=" + iBPSserverIP + "~~iBPSserverPort="
				+ iBPSserverPort;

		logger.info("requestXml " + requestXml);

		try {
			String tempResponseXml = null;
			try {
				Socket client = new Socket(socketIP, portNo);
				client.setSoTimeout(3600000);
				DataOutputStream outData = new DataOutputStream(client.getOutputStream());

				String dataToBeSent = requestXml;
				byte[] dataByteArr = dataToBeSent.getBytes("UTF-8");
				outData.writeInt(dataByteArr.length);
				outData.write(dataByteArr);

				DataInputStream in = new DataInputStream(client.getInputStream());

				int dataLength = in.readInt();
				byte[] data = new byte[dataLength];
				in.readFully(data);
				tempResponseXml = new String(data, "UTF-8");

				in.close();
			} catch (UnknownHostException e) {
				tempResponseXml = SS_CONN_ERROR_MSG;
				logger.info("UnknownHostException  " + e);
			} catch (IOException e) {
				tempResponseXml = SS_CONN_ERROR_MSG;
				logger.info("IOException  " + e);
			} catch (Exception e) {
				tempResponseXml = SS_EXEC_ERROR_MSG;
				logger.info("Exception  " + e);
			}

			if (tempResponseXml == null || tempResponseXml.length() == 0) {
				responseXml = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n" + "<message>\n"
						+ "<ErrorCode>1</ErrorCode>\n"
						+ "<ErrorDesc>No Response Received from Call Client Socket Server.</ErrorDesc>\n"
						+ "</message>";
				logger.info("tempResponseXml 12  ");
			} else {
				if (tempResponseXml.equals(SS_EXEC_ERROR_MSG) || tempResponseXml.equals(SS_CONN_ERROR_MSG)) {
					responseXml = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n" + "<message>\n"
							+ "<ErrorCode>1</ErrorCode>\n" + "<ErrorDesc>" + tempResponseXml + "</ErrorDesc>\n"
							+ "</message>";
					logger.info("tempResponseXml 13  ");
				} else {
					logger.info("tempResponseXml 14  ");
					responseXml = tempResponseXml;
				}
			}
			logger.info("tempResponseXml 15  ");
		} catch (Exception e) {
			logger.info("tempResponseXml 16  ");
			responseXml = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n" + "<message>\n" + "<ErrorCode>1</ErrorCode>\n"
					+ "<ErrorDesc>Error while generating template.</ErrorDesc>\n" + "</message>";
		}
		if(responseXml.contains("<Status>0</Status>"))
		{
			logger.info("inside ifffffff@@@@@");
			return "template generated";
		}
		else
		{
			logger.info("inside else@@@@@");
			return responseXml;
		}
	//Chirag -end
	}
	
	

	//ashutosh-start
	public String Documentgrid(IFormReference iformobj, String Stringdata) {



		// on upload button
		logger.info("Documentgrid@@ashu");
		try {

		/*logger.info("inside try");
		String winame = getWorkitemName(iformobj);

		String data = "SELECT UPLOAD_STATUS,UPLOAD_DATE_TIME from NG_FLEET_DOCUMENT_GRID where WI_NAME='" + winame + "' ";
		logger.info("query is @@-----" + data);



		List<List<String>> dataresult = iformobj.getDataFromDB(data);
		logger.info("dataresult is @@-----" + dataresult);

		logger.info("string data value@@@" + Stringdata);
		int colIndex_status = 3;
		int colIndex_datetime=4;
		logger.info("colindex of status is----" + colIndex_status);
		logger.info("colindex of date_time is----" + colIndex_datetime);
		*/
		int rowindex = Integer.parseInt(Stringdata);
		logger.info("rowindex is>>>>>" + Stringdata);
		String date = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss").format(new Date());
		logger.info("date is$$$$"+date);
		iformobj.setTableCellValue("document_table", rowindex, 3, "success");
		iformobj.setTableCellValue("document_table", rowindex, 4, date);
		logger.info("if complete####");

		}
		catch (Exception e) {
		// TODO: handle exception
		e.getMessage();
		logger.info("inside catch",e);
		}
		return "successfully added to document grid";
		// iformobj.addDataToGrid("document_table", jarray);
		}
//ashutosh-end
	

	public String generateTemplateWithCIC(IFormReference iformObj, String stringdata) {

		logger.info("inside generate tempalte CIC vala method");
		WDGeneralData wdgeneralObj = iformObj.getObjGeneralData();
		loadProperties();
		String sJtsIp = p.getProperty("sJtsIp");
		String sJtsPort = p.getProperty("sJtsPort");
		String pStorageDIR = p.getProperty("storageDIR_gen_templates");
		String attachInOD = p.getProperty("attachInOD");
		String socketIP = "127.0.0.1";
		int portNo = Integer.parseInt(p.getProperty("utlity_serversocket_portNo"));
		logger.info("sJtsIp " + sJtsIp);
		logger.info("sJtsPort " + sJtsPort);
		logger.info("portNo " + portNo);
		logger.info("pStorageDIR " + pStorageDIR);
		logger.info("attachInOD " + attachInOD);
		logger.info("socketIP " + socketIP);

		String serverName = "Jboss";
		String sServerIp = iformObj.getServerIp();
		String sServerPort = iformObj.getServerPort();
		String sSessionId = wdgeneralObj.getM_strDMSSessionId();
		String sCabname = iformObj.getCabinetName();
		String sWIName = getWorkitemName(iformObj);
		String sProcessName = iformObj.getProcessName();
		
	       logger.info("  1996 inside tamp generate with cic and sTemplateName");// "+sTemplateName+"  and cic_is"+cic_is);

		String sTemplateName = stringdata.split("##")[0]; 
		String cic_is = stringdata.split("##")[1];
		String rowhasindex = stringdata.split("##")[2];
		
		
       logger.info(" line no 4708 inside tamp generate with cic and stringdata value is "+stringdata+"sTemplateName "+sTemplateName+"  and cic_is"+cic_is+"rowhasindex "+rowhasindex);
		
		//String sTemplateName = stringdata;
		String filetype = "DOC";
		//String filetype = "PDF";
		String COLLATERAL = "collateral";
		COLLATERAL = (COLLATERAL == null) ? "" : COLLATERAL;

		final String SS_EXEC_ERROR_MSG = "Error from Call Client Socket Server while Web-Service execution";
		final String SS_CONN_ERROR_MSG = "Could not connect to Call Client Socket Server";

		String iBPSserverIP = iformObj.getServerIp();
		String iBPSserverPort = iformObj.getServerPort();

		logger.info("\n");
		logger.info("serverName " + serverName);
		logger.info("sServerIp " + sServerIp);
		logger.info("sServerPort " + sServerPort);
		logger.info("sSessionId " + sSessionId);
		logger.info("sCabname " + sCabname);
		logger.info("sWIName " + sWIName);
		logger.info("sTemplateName " + sTemplateName);
		logger.info("sCIC " + cic_is);
		logger.info("sProcessName " + sProcessName);
		logger.info("filetype " + filetype);
		logger.info("System.getProperty user.dir  " + System.getProperty("user.dir"));
		logger.info("\n");
		logger.info("COLLATERAL:" + COLLATERAL);
		logger.info("iBPSserverIP:" + iBPSserverIP);
		logger.info("iBPSserverPort:" + iBPSserverPort);
		System.err.println("Data Receieved");
		String responseXml = null;
		String requestXml = null;

		System.err.println("portNo to listen from SocketCall.jsp : " + portNo);

		
		requestXml = "WI_NAME=" + sWIName + "~~JTS_IP=" + sJtsIp + "~~JTS_PORT=" + sJtsPort + "~~SESSION_ID="
				+ sSessionId + "~~SERVER_IP=" + sServerIp + "~~SERVER_PORT=" + sServerPort + "~~SERVER_NAME="
				+ serverName + "~~CABINET_NAME=" + sCabname + "~~PROCESS_NAME=" + sProcessName + "~~TEMPLATE_NAME="
				+ sTemplateName + "~~FILE_TYPE=" + filetype + "~~pStorageDIR=" + pStorageDIR + "~~attachInOD="
				+ attachInOD + "~~COLLATERAL=" + COLLATERAL + "~~iBPSserverIP=" + iBPSserverIP + "~~iBPSserverPort="
				+ iBPSserverPort+ "~~CIC=" + cic_is +"~~rowhasindex=" + rowhasindex ;
		
		
		logger.info("requestXml " + requestXml);

		try {
			String tempResponseXml = null;
			try {
				Socket client = new Socket(socketIP, portNo);
				client.setSoTimeout(3600000);
				DataOutputStream outData = new DataOutputStream(client.getOutputStream());

				String dataToBeSent = requestXml;
				byte[] dataByteArr = dataToBeSent.getBytes("UTF-8");
				outData.writeInt(dataByteArr.length);
				outData.write(dataByteArr);

				DataInputStream in = new DataInputStream(client.getInputStream());

				int dataLength = in.readInt();
				byte[] data = new byte[dataLength];
				in.readFully(data);
				tempResponseXml = new String(data, "UTF-8");

				in.close();
			} catch (UnknownHostException e) {
				tempResponseXml = SS_CONN_ERROR_MSG;
				logger.info("UnknownHostException  " + e);
			} catch (IOException e) {
				tempResponseXml = SS_CONN_ERROR_MSG;
				logger.info("IOException  " + e);
			} catch (Exception e) {
				tempResponseXml = SS_EXEC_ERROR_MSG;
				logger.info("Exception  " + e);
			}

			if (tempResponseXml == null || tempResponseXml.length() == 0) {
				responseXml = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n" + "<message>\n"
						+ "<ErrorCode>1</ErrorCode>\n"
						+ "<ErrorDesc>No Response Received from Call Client Socket Server.</ErrorDesc>\n"
						+ "</message>";
				logger.info("tempResponseXml 12  ");
			} else {
				if (tempResponseXml.equals(SS_EXEC_ERROR_MSG) || tempResponseXml.equals(SS_CONN_ERROR_MSG)) {
					responseXml = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n" + "<message>\n"
							+ "<ErrorCode>1</ErrorCode>\n" + "<ErrorDesc>" + tempResponseXml + "</ErrorDesc>\n"
							+ "</message>";
					logger.info("tempResponseXml 13  ");
				} else {
					logger.info("tempResponseXml 14  ");
					responseXml = tempResponseXml;
				}
			}
			logger.info("tempResponseXml 15  ");
		} catch (Exception e) {
			logger.info("tempResponseXml 16  ");
			responseXml = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n" + "<message>\n" + "<ErrorCode>1</ErrorCode>\n"
					+ "<ErrorDesc>Error while generating template.</ErrorDesc>\n" + "</message>";
		}
		if(responseXml.contains("<Status>0</Status>"))
		{
			logger.info("inside ifffffff@@@@@");
			return "template generated";
		}
		else
		{
			logger.info("inside else@@@@@");
			return responseXml;
		}
	//Chirag -end
	}
	
	
	
	public String Base64DecodePdf (String hex,IFormReference iformObj,String docName)
    {
	  String document_path=GetXML.getProp().getProperty("Broker_Document_Path");
	  
	  String fileLocation=document_path+"\\"+getWorkitemName(iformObj);
	  //String fileLocation=document_path+"\\"+docName;
	   String path="\\POS\\Broker Document"+"\\"+docName;
	  //String path=docName;
	  File file = new File(fileLocation);
	  if (!file.exists())
	  {
		  file.mkdirs();
	  }
	  fileLocation=fileLocation+"\\"+docName;
	  file = new File(fileLocation);
	  logger.info("Broker Dcoument: File location for Base64DecodePdf " + fileLocation);
      logger.info("Broker Dcoument: Path for Base64DecodePdf " + path);
      try ( FileOutputStream fos = new FileOutputStream(file);) 
      {
        byte[] decoder = asByteArray(hex);
        fos.write(decoder);
        System.out.println("PDF File Saved");
        logger.info("PDF File Saved");
        fos.close();
        return path;
      }
      catch (Exception e) 
      {
        e.printStackTrace();
      }
      
      return "Error";
    }
	
  public static byte[] asByteArray(String hex) 
  {
           
           byte[] bts=new byte[hex.length()/2];
           for (int i=0;i<bts.length;i++)
           {
                  bts[i]=(byte) Integer.parseInt(hex.substring(2*i,2*i+2),16);
           }

             return bts;
 }
  /*
  private String BrokerDocumentcall_main(IFormReference iformObj, String stringdata) {
      logger.info("Inside document broker main function");
	  try {
    	  String requestXML=stringdata;
          // URL url = new URL ("http://ip:port/download_url");
          String urlStr="http://dpwt.alrajhibank.com.sa:7711/cgi-bin/bitonws.cgi";
          System.setProperty("http.maxRedirects", "30");
          CookieHandler.setDefault(new CookieManager(null,CookiePolicy.ACCEPT_ALL));
          URL url = new URL(urlStr);
          //String authStr = "FTSRAJB:ftsrajb" ;
          //String authEncoded = Base64.getEncoder().encodeToString((authStr).getBytes());;
          //Proxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress("proxy1", 80));
          //Properties systemProperties = System.getProperties();
          // systemProperties.put("proxySetrue");
          //systemProperties.setProperty("http.proxyHost","proxy1");
          //systemProperties.setProperty("http.proxyPort","80");
          //System.setProperty("http.proxyUser", "ARBANK\\CON7004");
          //System.setProperty("http.proxyPassword", "FKwp9123");

          
          //HttpURLConnection connection = (HttpURLConnection) url.openConnection(proxy);
          System.out.println("requestXML is === "+requestXML);
          logger.info("Request xml is "+requestXML);
          
          
          HttpURLConnection connection = (HttpURLConnection) url.openConnection();
          connection.setRequestMethod("POST");
          connection.setDoOutput(true);
//            connection.setRequestProperty("Authorization", "Basic " + authEncoded);
//            connection.setRequestProperty("Proxy-Authorization", "Basic " + authEncoded);
          try(OutputStream os = connection.getOutputStream()) {
          byte[] input = requestXML.getBytes("utf-8");
          os.write(input, 0, input.length);
          }
          // File file = new File(outFilePath);
          // InputStream in = (InputStream) connection.getInputStream();
          String result="";
          
          result = new BufferedReader(new InputStreamReader( connection.getInputStream())).lines().parallel().collect(Collectors.joining("\n"));
          
          // OutputStream out = new BufferedOutputStream(new FileOutputStream(file));
          System.out.println("result ==== "+result);
          logger.info("Broker Document Response is :::::"+result);
          }
          catch (Exception e) {
          e.printStackTrace();
          logger.info("Exception Occured Broker Document and exception is "+e);
          }


        return ""; 
  }
  */
  
  private String BrokerDocumentcall_main(IFormReference iformObj, String stringdata) {
	  String response;
      XMLParser parser;
      String hex;
      String return_string="";
     
      //Start Edit By Deepak Goyal
      String folderindex="";
      String sQuery1="select folderindex from pdbfolder where  name = '"+getWorkitemName(iformObj)+"' ";
      List<List<String>> folderindexlist=iformObj.getDataFromDB(sQuery1);
      if(folderindexlist.size()>0)
      {
    	  if(folderindexlist.get(0).size()>0)
    	  {
    		  folderindex=folderindexlist.get(0).get(0);
    	  }
      }

      
      String document_list[] = null;
      if(getActivityName(iformObj).equalsIgnoreCase("Buy_and_Contract"))
      {
    	  document_list=new String[]{"DD&amp;Co Sellers Offer.pdf","DD&amp;Co Purchasers Acceptance.pdf","Holding Certificate.pdf","Customer Holding Certificate.pdf"};
      }
      else if (getActivityName(iformObj).equalsIgnoreCase("Sell_and_Stipulation_Maker") || getActivityName(iformObj).equalsIgnoreCase("Stipulation_and_Sell_Checker"))
      {
    	  document_list=new String[]{"CTL Sellers Offer.pdf","CTL Purchasers Acceptance.pdf","Form of Delivery Instruction.pdf"};
      }
     // String document_list[]= {"Holding Certificate.pdf","DD&amp;Co Sellers Offer.pdf"};
    //End Edit By Deepak Goyal
      for(String document:document_list)
	  {
		  try
	      {
	           
			  	logger.info("Calling BrokerDocumentcall from main function with document name" + document);
	             response=BrokerDocumentcall(iformObj,document);
	             logger.info("response from BrokerDocumentcall==" + response);
	             parser = new XMLParser(response);
	             logger.info("After parser");
	             hex=parser.getValueOf("pdfhex");
	             logger.info("hex value= "+hex);
	             document=document.replace("&amp;","");
	             String path=Base64DecodePdf(hex,iformObj,document);
	             logger.info("After Base64DecodePdf method call and path is "+path);
	             //addDocumentToWorkitem("10.242.195.133","8080","msbnewgen_sit","3",path,getSessionId(iformObj),folderindex,document,iformObj.getUserName(),"0");
	             if(hex.equalsIgnoreCase("")||hex==null)
	            	 return_string=return_string+document+"#"+"Error~";
	             else
	            	 return_string=return_string+document+"#"+"Success~";
	        }
	             
	     
	      catch(Exception e)
	      {
	             logger.info("Exception in BrokerDocumentcall_main method ==== "+e);
	      }
	  } 
      int length=return_string.length() -1;
      if (return_string.endsWith("~"))
      	return_string=return_string.substring(0, return_string.length() - 1);  
      return return_string;
      
}
  //Parent Folder INdex=
  //volume=3
  
  private String addDocumentToWorkitem(String AppIP,String AppPort,String CabinetName,String Volume,String Path,String SessionID,String ParentFolderIndex,String DocumentName,String UserName,String DocSize)
  {
	  
      JPDBRecoverDocData jpidesc = new JPDBRecoverDocData();
      JPISIsIndex isindex = new JPISIsIndex();
      NGEjbClient ejbOb = null;
	try {
		ejbOb = NGEjbClient.getSharedInstance();
	} catch (NGException e1) {
		// TODO Auto-generated catch block
		e1.printStackTrace();
	}
      String sOutputXML="";
      String isIndex="";
      try {
             //CPISDocumentTxn.AddDocument_MT(null, "10.242.195.133",(short) 3333, "MSBNEWGEN_SIT", (short)3, "C:\\Users\\con7029\\Desktop\\Filenet\\Archived_Documents\\arabic.txt", jpidesc, "2", isindex, null);
             //CPISDocumentTxn.add(null, "10.242.195.133",(short) 3333, "MSBNEWGEN_SIT", (short)3, "C:\\Users\\con7029\\Desktop\\Filenet\\Archived_Documents\\arabic.txt", jpidesc, "2", isindex, null);
             CPISDocumentTxn.AddDocument_MT(null, AppIP, (new Short("3333")).shortValue(), CabinetName, (new Short(Volume)).shortValue(), Path, jpidesc, null, isindex);
             isIndex=(new StringBuilder()).append(isindex.m_nDocIndex).append("#").append(isindex.m_sVolumeId).append("#").toString();
             System.out.println("isIndex == "+isIndex);
             logger.info("isIndex == "+isIndex);
      } catch (JPISException e) {
             // TODO Auto-generated catch block
             e.printStackTrace();
      }
      
      try
			{
			String inputXml = "<NGOAddDocument_Input>\n"
			                                 + "<Option>NGOAddDocument</Option>\n"
			                                 + "<CabinetName>"+CabinetName+"</CabinetName>\n"
			                                 + "<UserDBId>" + SessionID + "</UserDBId>\n"
			                                 + "<GroupIndex>0</GroupIndex>\n"
			                                 + "<Document>\n"
			                                 + "<ParentFolderIndex>" +ParentFolderIndex+ "</ParentFolderIndex>\n"
			                                 + "<NoOfPages>1</NoOfPages>\n"
			                                 + "<AccessType>S</AccessType>\n"
			                                 + "<DocumentName>" + DocumentName + "</DocumentName>\n"
			                                 + "<CreatedByAppName>"+UserName+"</CreatedByAppName>\n"
			                                 + "<ISIndex>" + isIndex.trim()+"</ISIndex>\n" 
			                                         + "<DocumentType>N</DocumentType>"
			                                 + "<DocumentSize>" +DocSize + "</DocumentSize>\n"
			                                 + "<ODMADocumentIndex></ODMADocumentIndex><Comment>Broker Document</Comment><EnableLog>Y</EnableLog>"
			                                 + "<FTSFlag>PP</FTSFlag>"
			                                 + "<DataDefinition>\n"
			                                 + "</DataDefinition>\n"
			                                 + "</Document>\n"
			                                 + "</NGOAddDocument_Input>";
			  sOutputXML= ejbOb.makeCall(AppIP,AppPort,"JBossEAP",inputXml);
			  logger.info("sOutputXML == "+sOutputXML);
			   }
      
      catch(Exception exception)
      {
      System.out.println(exception.getMessage());
      // writeLog(callingFile,LOG_FILE_NAME,"Exception in get doc : " + exception.getMessage());
      
      }

      return sOutputXML;
  }
  private String BrokerDocumentcall(IFormReference iformObj, String document) {
         String callName="Broker_Document";
         try
         {
                logger.info("Inside createRequestXML Function and callName is " + callName);
                String tagName = "_TagName";
                
                String request_prefix=GetXML.getProp().getProperty(callName+"_RequestPrefix");
                if(request_prefix.equals(null))
                {
                      request_prefix="";
                }
                logger.info("Request prefix is "+request_prefix+"please check");
                
                String header_tags=GetXML.getProp().getProperty(callName+"_Header");
                String []header_tags_arry=header_tags.split(",");
                
                logger.info("Header tags are "+header_tags);
                JSONObject jsonobj_header=new JSONObject();
                for(String temp:header_tags_arry)
                {
                      String[] hash_split=temp.split("#");
                      jsonobj_header.put(hash_split[0],hash_split[1]);
                }
                
                logger.info("JSOn object is "+jsonobj_header);
         
                String tagNames = GetXML.getProp().getProperty(callName + tagName);
                logger.info(tagNames);
                String[] tags = tagNames.split(",");
  
                String requestXML = readDummyRequest(callName);
  
                XMLParser parser = new XMLParser(requestXML);
                
  
                for (String tag : tags) 
                {
                      String tagValue = parser.getValueOf(request_prefix+tag);
                      logger.info("tag values are"+tagValue);
                      if(tagValue.contains("header~"))
                      {
                             try 
                             {
                                    if(tagValue.split("~")[1].equalsIgnoreCase("UUID"))
                                    {
                                           parser.changeValue(request_prefix+tag, java.util.UUID.randomUUID().toString());
                                    }
                                    else
                                    {
                                           String value=(String) jsonobj_header.get(tagValue.split("~")[1]);
                                           logger.info("Value to be replaced by jsonobj_header is "+value);
                                           parser.changeValue(request_prefix+tag, value);
                                    }
                             }
                             catch(Exception e)
                             {
                                    logger.info("Exception is "+e);
                             }
                      }
                      else if (tagValue.startsWith("formid~"))
                      {
                             String value = (String) iformObj.getValue(tagValue.split("~")[1]);                               
                             parser.changeValue(request_prefix+tag, value);
                      }      
                }
                
                parser.changeValue("DocumentKey",document);
                
                logger.info("RequestXML is :\n" + parser.toString());
                String responseXML = new SocketConnector().getSocketXMLResponse(parser.toString(), callName,iformObj);
  
                //String responseXML=" <?xml version=\"1.0\" encoding=\"UTF-8\"?><SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:SOAP-ENC=\"http://schemas.xmlsoap.org/soap/encoding/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:ns=\"urn:bitonws\"><SOAP-ENV:Header></SOAP-ENV:Header><SOAP-ENV:Body><ns:getdocumentResponse><pdfhex></pdfhex></ns:getdocumentResponse></SOAP-ENV:Body></SOAP-ENV:Envelope>";
                
                logger.info("Response XML is: \n" + responseXML);
                return responseXML;
         }
         catch(Exception e)
         {
                logger.info("Exception occurred: createRequestXML "+e);
                return "";
         }
         
         //return "success~BrokerDocumentcall";
  }
  private String relatedpartyFetchDataFromIDnumber(IFormReference iformObj, String stringdata)
	{
		try
		{
		String callName = "CustCICInq"; //For Related Party individual details
		JSONObject jsonobj = new JSONObject();
	
			logger.info("Inside createRequestXML Function and callName is " + callName);
			String tagName = "_TagName";
			
			String request_prefix=GetXML.getProp().getProperty(callName+"_RequestPrefix");
			if(request_prefix.equals(null))
			{
				request_prefix="";
			}
			logger.info("Request prefix is "+request_prefix+"please check");
			
			String header_tags=GetXML.getProp().getProperty(callName+"_Header");
			String []header_tags_arry=header_tags.split(",");
			
			logger.info("Header tags are "+header_tags);
			JSONObject jsonobj_header=new JSONObject();
			for(String temp:header_tags_arry)
			{
				String[] hash_split=temp.split("#");
				jsonobj_header.put(hash_split[0],hash_split[1]);
			}
			
			logger.info("JSOn object is "+jsonobj_header);
		
			String tagNames = GetXML.getProp().getProperty(callName + tagName);
			logger.info(tagNames);
			String[] tags = tagNames.split(",");
	
			String requestXML = readDummyRequest(callName);
	
			XMLParser parser = new XMLParser(requestXML);
			
	
			for (String tag : tags) 
			{
				String tagValue = parser.getValueOf(request_prefix+tag);
				logger.info("tag values are"+tagValue);
				if(tagValue.contains("header~"))
				{
					try {
						
					if(tagValue.split("~")[1].equalsIgnoreCase("UUID"))
					{
						parser.changeValue(request_prefix+tag, java.util.UUID.randomUUID().toString());
					}
					else
					{
					String value=(String) jsonobj_header.get(tagValue.split("~")[1]);
					logger.info("Value to be replaced by jsonobj_header is "+value);
					parser.changeValue(request_prefix+tag, value);
					}
					}
					catch(Exception e)
					{
						logger.info("Exception is "+e);
					}
				}
				if (tagValue.startsWith("formid~")) {
					String value = (String) iformObj.getValue(tagValue.split("~")[1]);
					parser.changeValue(request_prefix+tag, value);
				}
				
			}
		
			String id_no= getControlValue(iformObj, "table10599_ID_NUMBER"); //Check this
			parser.changeValue(request_prefix+"IDNumber",id_no);
			parser.changeValue(request_prefix+"arb:IDNum",id_no);
			
			if(GetXML.getProp().containsKey(callName+"_LanguageTag"))
			{
				logger.info("CreateRequestXML : Language tag is present in property file");
				String language_tag=GetXML.getProp().getProperty(callName+"_LanguageTag");
				logger.info("CreateRequestXML : Language tag value in property file is "+language_tag);
				String session_lang=(String) iformObj.getValue("SESSION_LANG");
				logger.info("CreateRequestXML : Session Language is "+session_lang);
				parser.changeValue(request_prefix+language_tag, session_lang);
				logger.info(request_prefix+language_tag+" got value "+session_lang);
			}
			
			
		System.out.println("RequestXML is :\n" + parser.toString());
		logger.info("RequestXML is :\n" + parser.toString());
		String ResponseXML = new SocketConnector().getSocketXMLResponse(parser.toString(), callName,iformObj);

		String restricted_tags=GetXML.getProp().getProperty(callName+"_RestrictedTags");
		String []restricted_values=restricted_tags.split(",");
		for(String temp:restricted_values)
			ResponseXML=ResponseXML.replace(temp,"");
	
		tagName = "_TagNameResponseGrid";
		tagNames = GetXML.getProp().getProperty(callName + tagName);
		logger.info("TagNames from property file are "+tagNames);
		
		String statuscode=GetXML.getProp().getProperty(callName+"_StatusCode");
		String []status_code_split=statuscode.split("~");
	
		tags=tagNames.split("~");
		WFXmlResponse objWFxmlResponse = new WFXmlResponse(ResponseXML);
		logger.info("objWFxmlResponse value is "+objWFxmlResponse);

		JSONArray jsonarr=new JSONArray();
			
		logger.info("Status codes are"+status_code_split[0]+"and"+status_code_split[1]);
			
		logger.info("Value of status tag in response is"+objWFxmlResponse.getVal(status_code_split[0]));
			
		String new_date="";
		
		if (objWFxmlResponse.getVal(status_code_split[0]).equals(status_code_split[1])) 
		{
			WFXmlList WFXmlList = objWFxmlResponse.createList(tags[0],tags[1]);
			for (int i = 0; WFXmlList.hasMoreElements(true); WFXmlList.skip(true), i++) 
			{
				jsonobj = new JSONObject();
				for(int j=2;j<tags.length;++j)
				{
					String tag_split_values=tags[j];
					String []hash_split_values=tag_split_values.split("#");
					String result_from_response=WFXmlList.getVal(hash_split_values[1]);
					logger.info("Everything OK Till now");
					if(hash_split_values[1].equalsIgnoreCase("IdExpiryDate") || hash_split_values[1].equalsIgnoreCase("IDIssueDate"))
					{
						try
						{
							if(result_from_response.contains("/"))
							{
								new_date=result_from_response.split("/")[2]+"/"+result_from_response.split("/")[1]+"/"+result_from_response.split("/")[0];
							}
							else if(result_from_response.contains("-"))
							{
								new_date=result_from_response.split("-")[2]+"-"+result_from_response.split("-")[1]+"-"+result_from_response.split("-")[0];
							}
							result_from_response=new_date;
						}
						catch(Exception e)
						{
							result_from_response="";
						}
					}
					
					if(result_from_response.equals(null))
					{
						result_from_response="";
					}
					
					jsonobj.put(hash_split_values[0],result_from_response.trim());
				}
			}	
				
			logger.info("Current Json Object is"+jsonobj);
			jsonarr.add(jsonobj);
		}
		else
		{
			logger.info("For "+callName+" Status code returned from response is not success ");
			String error_description=objWFxmlResponse.getVal("StatusDesc");
			return "Error~In "+callName+" error received with error code "+objWFxmlResponse.getVal(status_code_split[0]+"-"+error_description);
		}
			
		logger.info("Final Value of Json Array is "+jsonarr);
		logger.info("This array will contain json objects which will contain one-to-one field id with their value in key value pair form");
			
		JSONObject finaljsonobj = new JSONObject();
			
		if(jsonarr.size()>0)
		{
			finaljsonobj=(JSONObject) jsonarr.get(0); // Here later on we can apply condition to check which json object we need
		}
			
		for(Iterator iterator = finaljsonobj.keySet().iterator(); iterator.hasNext();) 
		{
			 String key = (String) iterator.next();
			 logger.info("Values set for"+key+" are "+finaljsonobj.get(key).toString());
			 setControlValue(iformObj, key, finaljsonobj.get(key).toString());
		}
			
		}
		catch(Exception e)
		{
			logger.info("Exception Occurred: relatedpartyFetchDataFromIDnumber"+e);
		}
		
		return "relatedpartyFetchDataFromIDnumber called Successfully";
	}
	
}
